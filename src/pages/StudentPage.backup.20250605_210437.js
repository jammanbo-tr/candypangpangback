import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useDocument, useCollection } from 'react-firebase-hooks/firestore';
import { doc, updateDoc, arrayUnion, collection, getDocs, query, where, orderBy, onSnapshot } from 'firebase/firestore';
import { db } from '../firebase';
import { Card, CardContent, Typography, Button, Box, Modal, Chip, Stack, Snackbar, Alert, Badge, IconButton } from '@mui/material';
import CelebrationIcon from '@mui/icons-material/Celebration';
import EmojiEventsIcon from '@mui/icons-material/EmojiEvents';
import NotificationsActiveIcon from '@mui/icons-material/NotificationsActive';
import Checkbox from '@mui/material/Checkbox';
import FormControlLabel from '@mui/material/FormControlLabel';
import StorefrontIcon from '@mui/icons-material/Storefront';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import LinkIcon from '@mui/icons-material/Link';
import { auth, googleProvider } from '../firebase';
import { signInWithPopup, signOut } from 'firebase/auth';
import { useAuthState } from 'react-firebase-hooks/auth';

const levelImages = [
  '/lv1.png', // ÏïåÏÇ¨ÌÉï
  '/lv2.png', // ÏÉàÏΩ§Ìïú ÏÇ¨ÌÉï
  '/lv3.png', // ÎßâÎåÄÏÇ¨ÌÉï
  '/lv4.png', // Î°§Î¶¨Ìåù
  '/lv5.png', // ÏàòÏ†ú ÏÇ¨ÌÉï
  '/lv6.png', // ÏÇ¨ÌÉï ÎßàÏä§ÌÑ∞
];

const LEVELS = [
  'ÏïåÏÇ¨ÌÉï',
  'ÏÉàÏΩ§Ìïú ÏÇ¨ÌÉï',
  'ÎßâÎåÄÏÇ¨ÌÉï',
  'Î°§Î¶¨Ìåù',
  'ÏàòÏ†ú ÏÇ¨ÌÉï',
  'ÏÇ¨ÌÉï ÎßàÏä§ÌÑ∞',
];

const LINK_CATEGORIES = [
  { key: 'general', label: 'ÏùºÎ∞ò', color: '#757575' },
  { key: 'video', label: 'üìπ ÎèôÏòÅÏÉÅ', color: '#ff5722' },
  { key: 'document', label: 'üìÑ Î¨∏ÏÑú', color: '#2196f3' },
  { key: 'quiz', label: 'üìù ÌÄ¥Ï¶à', color: '#9c27b0' },
  { key: 'game', label: 'üéÆ Í≤åÏûÑ', color: '#4caf50' },
  { key: 'reference', label: 'üìö Ï∞∏Í≥†ÏûêÎ£å', color: '#ff9800' }
];

const getRequiredExp = (level) => 150 + level * 10;

// ÎÇ†Ïßú Ìè¨Îß∑ Ìï®Ïàò
const formatDate = ts => {
  const d = new Date(ts);
  return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}-${String(d.getDate()).padStart(2,'0')} ${String(d.getHours()).padStart(2,'0')}:${String(d.getMinutes()).padStart(2,'0')}`;
};

const candyImages = [
  '/lv1.png', '/lv2.png', '/lv3.png', '/lv4.png', '/lv5.png', '/lv6.png'
];

// ÏãúÍ∞Ñ Ìè¨Îß∑ Ìï®Ïàò (Î™á Î∂Ñ Ï†Ñ, Ïò§Îäò, ÎÇ†Ïßú)
function formatTimeAgo(ts) {
  const now = Date.now();
  const diff = Math.floor((now - ts) / 1000);
  if (diff < 60) return `${diff}Ï¥à Ï†Ñ`;
  if (diff < 3600) return `${Math.floor(diff/60)}Î∂Ñ Ï†Ñ`;
  const d = new Date(ts);
  const today = new Date();
  if (d.toDateString() === today.toDateString()) return `${d.getHours()}:${String(d.getMinutes()).padStart(2,'0')}`;
  return `${d.getFullYear()}-${d.getMonth()+1}-${d.getDate()} ${d.getHours()}:${String(d.getMinutes()).padStart(2,'0')}`;
}

// Î†àÎ≤®ÏóÖ Ïπ¥ÎìúÎΩëÍ∏∞ Î∞è Ïø†Ìè∞Ìï® Î≥¥ÏÉÅ Î™©Î°ù/Ïù¥ÎØ∏ÏßÄ ÏÉÅÏàò Ï∂îÍ∞Ä
const REWARD_LIST = [
  { key: '5money', img: '/5money.png', label: '5Ïõê', prob: 15 },
  { key: '10money', img: '/10money.png', label: '10Ïõê', prob: 10 },
  { key: 'bites', img: '/bites.png', label: 'ÏÇ¨ÏõåÎ∞îÏù¥Ï∏† 1Í∞ú', prob: 10 },
  { key: 'chew2', img: '/chew2.png', label: 'ÎßàÏù¥ÏÆ∏ 2Í∞ú', prob: 20 },
  { key: 'chupa', img: '/chupa.png', label: 'Ï∏ÑÌååÏ∂•Ïä§ 1Í∞ú', prob: 20 },
  { key: 'chupafr', img: '/chupafr.png', label: 'ÏπúÍµ¨ÏóêÍ≤å Ï∏ÑÌååÏ∂•Ïä§ 1Í∞ú ÏÑ†Î¨º', prob: 15 },
  { key: 'bottle', img: '/bottle.png', label: 'Î∞ò ÏπúÍµ¨ Î™®Îëê ÏÉàÏΩ§Îã¨ÏΩ§ 1Í∞ú', prob: 5 },
];
const CARD_BACK_IMAGE = '/cardback.png';

const candyRainImages = [
  '/jian1.png','/jian2.png','/jian3.png','/jian4.png','/jian5.png','/jian6.png',
  '/lv1.png','/lv2.png','/lv3.png','/lv4.png','/lv5.png','/lv6.png',
  '/chupa.png','/chupafr.png','/bottle.png'
];

const StudentPage = () => {
  const { studentId } = useParams();
  const [studentDoc, loading, error] = useDocument(doc(db, 'students', studentId));
  const [studentsSnapshot] = useCollection(collection(db, 'students'));
  const [itemsSnapshot] = useCollection(collection(db, 'items'));
  const student = studentDoc?.data();
  const navigate = useNavigate();

  // Î™®Îã¨ ÏÉÅÌÉú
  const [showMsgModal, setShowMsgModal] = useState(false);
  const [showPraiseModal, setShowPraiseModal] = useState(false);
  const [showSelfPraiseModal, setShowSelfPraiseModal] = useState(false);
  const [showAlarmModal, setShowAlarmModal] = useState(false);
  const [msgText, setMsgText] = useState('');
  const [praiseText, setPraiseText] = useState('');
  const [praiseExp, setPraiseExp] = useState(10);
  const [selfPraiseText, setSelfPraiseText] = useState('');
  const [selfPraiseExp, setSelfPraiseExp] = useState(10);
  const [expEffect, setExpEffect] = useState(false);
  const [levelUpEffect, setLevelUpEffect] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0);
  const [selectedFriends, setSelectedFriends] = useState([]);
  const [praiseResultEffect, setPraiseResultEffect] = useState(false);
  const [praiseResultMsg, setPraiseResultMsg] = useState('');
  const [questToast, setQuestToast] = useState(false);
  const [prevQuestCount, setPrevQuestCount] = useState(0);
  const [showJarModal, setShowJarModal] = useState(false);
  const [showBoardModal, setShowBoardModal] = useState(false);
  const [boardCodeInput, setBoardCodeInput] = useState('');
  const [showShopModal, setShowShopModal] = useState(false);
  const [shopTab, setShopTab] = useState('deposit');
  const [depositReason, setDepositReason] = useState('');
  const [depositAmount, setDepositAmount] = useState('');
  const [depositSuccess, setDepositSuccess] = useState(false);
  const [buyQuantities, setBuyQuantities] = useState({});
  const [buyCustomAmount, setBuyCustomAmount] = useState('');
  const [buyError, setBuyError] = useState('');
  const [buySuccess, setBuySuccess] = useState('');
  const [depositError, setDepositError] = useState('');
  const [unreadAlarmCount, setUnreadAlarmCount] = useState(0);

  // Í≥µÏßÄÏÇ¨Ìï≠ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [notices, setNotices] = useState([]);
  const [broadcastNotice, setBroadcastNotice] = useState(null);
  const [showBroadcastModal, setShowBroadcastModal] = useState(false);
  const broadcastTimeoutRef = React.useRef(null);

  // ÏòàÏïΩ ÏïåÎûå Î™®Îã¨ ÏÉÅÌÉú
  const [activeAlarm, setActiveAlarm] = useState(null);

  // ÏïåÎ¶º Î™®Îã¨ ÏÉÅÌÉú
  const [showNotificationModal, setShowNotificationModal] = useState(false);

  // Í¥ëÍ≥† Î™®Îã¨ ÌôïÏù∏ Ïó¨Î∂Ä Ï≤¥ÌÅ¨ Ìï®Ïàò (Í≥µÏßÄÏÇ¨Ìï≠ Í¥ëÍ≥†Ïö©)
  const hasSeenBroadcast = (noticeId, broadcastTime) => {
    try {
      const seen = JSON.parse(localStorage.getItem('seenBroadcastNotices') || '[]');
      return seen.includes(`${noticeId}_${broadcastTime}`);
    } catch {
      return false;
    }
  };
  const markBroadcastAsSeen = (noticeId, broadcastTime) => {
    try {
      const seen = JSON.parse(localStorage.getItem('seenBroadcastNotices') || '[]');
      const key = `${noticeId}_${broadcastTime}`;
      if (!seen.includes(key)) {
        localStorage.setItem('seenBroadcastNotices', JSON.stringify([...seen, key]));
      }
    } catch {}
  };
  // ÏòàÏïΩ ÏïåÎûå ÌôïÏù∏ Ïó¨Î∂Ä Ï≤¥ÌÅ¨ Ìï®Ïàò (ÏòàÏïΩ ÏïåÎûåÏö©)
  const hasSeenAlarm = (alarmId) => {
    try {
      const seen = JSON.parse(localStorage.getItem('seenAlarms') || '[]');
      return seen.includes(alarmId);
    } catch {
      return false;
    }
  };
  const markAlarmAsSeen = (alarmId) => {
    try {
      const seen = JSON.parse(localStorage.getItem('seenAlarms') || '[]');
      if (!seen.includes(alarmId)) {
        localStorage.setItem('seenAlarms', JSON.stringify([...seen, alarmId]));
      }
    } catch {}
  };

  // ÏÉàÎ°úÏö¥ ÍµêÏÇ¨ Î©îÏãúÏßÄ Í∞úÏàò Í≥ÑÏÇ∞
  useEffect(() => {
    if (!student) return;
    // ÏùΩÏßÄ ÏïäÏùÄ ÏÑ†ÏÉùÎãò Î©îÏãúÏßÄ
    const teacherMsgs = (student.messages || []).filter(m => m.from === 'teacher');
    const lastRead = student.lastTeacherMsgRead || 0;
    const unreadMsg = teacherMsgs.filter(m => m.ts > lastRead).length;
    // ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎûå(notifications/announce)
    const alarms = ((student.announce||[]).concat(student.notifications||[]));
    // ÏπúÍµ¨ Ïπ≠Ï∞¨ ÏäπÏù∏ ÎÇ¥Ïó≠
    const praiseApproved = (student.praise || []).filter(p => p.checked && p.result === 'approved' && p.from && p.from !== 'student' && p.fromName);
    // expEventsÏùò ÏπúÍµ¨ Ïπ≠Ï∞¨ ÎÇ¥Ïó≠
    const expEventsPraise = (student.expEvents || []).filter(e => e.type === 'friendPraise' && e.from && e.result === 'approved');
    // Î™®Îì† ÏïåÎûåÏùÑ Ìï©Ï≥êÏÑú Ï§ëÎ≥µ Ï†úÍ±∞
    const allAlarms = [...alarms, ...praiseApproved, ...expEventsPraise];
    const seenAlarms = JSON.parse(localStorage.getItem('seenStudentAlarms')||'[]');
    const unreadAlarms = allAlarms.filter(a => a.ts && !seenAlarms.includes(a.ts)).length;
    setUnreadCount(unreadMsg + unreadAlarms);
    setUnreadAlarmCount(unreadAlarms);
  }, [student]);

  // Í≥µÏßÄÏÇ¨Ìï≠ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    const fetchNotices = async () => {
      try {
        const q = query(collection(db, 'notices'), orderBy('updatedAt', 'desc'));
        const snapshot = await getDocs(q);
        const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setNotices(data);
        // Í¥ëÍ≥†Ï§ëÏù∏ Í≥µÏßÄ ÌôïÏù∏ (ÏïÑÏßÅ ÌôïÏù∏ÌïòÏßÄ ÏïäÏùÄ Í≤ÉÎßå, broadcastTimeÍπåÏßÄ Ï≤¥ÌÅ¨)
        const broadcast = data.find(n => n.broadcast && n.broadcastTime && !hasSeenBroadcast(n.id, n.broadcastTime));
        if (broadcast) {
          setBroadcastNotice(broadcast);
          setShowBroadcastModal(true);
          if (broadcastTimeoutRef.current) clearTimeout(broadcastTimeoutRef.current);
        } else {
          setBroadcastNotice(null);
          setShowBroadcastModal(false);
          if (broadcastTimeoutRef.current) clearTimeout(broadcastTimeoutRef.current);
        }
      } catch (e) {
        setNotices([]);
      }
    };
    fetchNotices();
    const interval = setInterval(fetchNotices, 5000); // 5Ï¥àÎßàÎã§ Í∞±Ïã†
    return () => {
      clearInterval(interval);
      if (broadcastTimeoutRef.current) clearTimeout(broadcastTimeoutRef.current);
    };
  }, []);

  // Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞
  const handleSendMessage = async () => {
    if (!messageText.trim()) return;
    const studentRef = doc(db, 'students', studentId);
    const newMessages = [...(student.messages || []), {
      from: 'student',
      text: messageText,
      ts: Date.now(),
      replyTo: replyToMessage ? replyToMessage.text : null
    }];
    await updateDoc(studentRef, { messages: newMessages });
    setShowMsgModal(false); // Î©îÏãúÏßÄ Î™®Îã¨ Îã´Í∏∞
    setShowMessageModal(false); // ÎãµÏû• Î™®Îã¨ÎèÑ ÌòπÏãú Ïó¥Î†§ÏûàÏúºÎ©¥ Îã´Í∏∞
    setMessageText(''); // ÏûÖÎ†•Ï∞Ω Ï¥àÍ∏∞Ìôî
    setReplyToMessage(null);
  };

  // ÏπúÍµ¨ Ïπ≠Ï∞¨ÌïòÍ∏∞ (ÍµêÏÇ¨ÏóêÍ≤å ÏöîÏ≤≠)
  const handleSendPraise = async () => {
    if (selectedFriends.length === 0) return;

    setShowPraiseModal(false);
    setPraiseText('');
    setPraiseExp(10);
    setSelectedFriends([]);

    try {
      await Promise.all(selectedFriends.map(friendId => {
        const praiseObj = {
          from: studentId,
          fromName: student.name,
          text: praiseText,
          exp: praiseExp,
          ts: Date.now(),
          checked: false,
          type: 'friendPraise'
        };
        return updateDoc(doc(db, 'students', friendId), {
          praise: arrayUnion(praiseObj)
        });
      }));
      setPraiseResultMsg('ÏπúÍµ¨ÏóêÍ≤å Ïπ≠Ï∞¨ ÏöîÏ≤≠ÏùÑ Î≥¥ÎÉàÏäµÎãàÎã§!');
      setPraiseResultEffect(true);
      setTimeout(() => setPraiseResultEffect(false), 2000);
    } catch (e) {
      setPraiseResultMsg('Ïπ≠Ï∞¨ ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.');
      setPraiseResultEffect(true);
      setTimeout(() => setPraiseResultEffect(false), 2000);
    }
  };

  // ÎÇò Ïπ≠Ï∞¨ÌïòÍ∏∞ (ÍµêÏÇ¨ÏóêÍ≤å ÏöîÏ≤≠)
  const handleSendSelfPraise = async () => {
    await updateDoc(doc(db, 'students', studentId), {
      praise: arrayUnion({ from: 'student', text: selfPraiseText, exp: selfPraiseExp, self: true, ts: Date.now() })
    });
    setShowSelfPraiseModal(false);
    setSelfPraiseText('');
    setSelfPraiseExp(10);
  };

  // ÏïåÎûå(Ï¢Ö) ÌÅ¥Î¶≠ Ïãú ÍµêÏÇ¨ Î©îÏãúÏßÄ Î™®Îã¨ + ÏùΩÏùå Ï≤òÎ¶¨
  const handleAlarmClick = async () => {
    setShowNotificationModal(true);
    // ÏÑ†ÏÉùÎãò Î©îÏãúÏßÄ ÏùΩÏùå Ï≤òÎ¶¨
    if (student && (student.messages || []).some(m => m.from === 'teacher')) {
      const teacherMsgs = (student.messages || []).filter(m => m.from === 'teacher');
      const lastTs = teacherMsgs.length > 0 ? teacherMsgs[teacherMsgs.length - 1].ts : 0;
      await updateDoc(doc(db, 'students', studentId), { lastTeacherMsgRead: lastTs });
    }
    // Î™®Îì† ÏïåÎûå ÏùΩÏùå Ï≤òÎ¶¨ - Í∞úÏÑ†
    const alarms = ((student?.announce||[]).concat(student?.notifications||[]));
    alarms.forEach(a => { if (a.ts) markStudentAlarmAsSeen(a.ts); });
    // ÏπúÍµ¨ Ïπ≠Ï∞¨ ÏäπÏù∏ ÎÇ¥Ïó≠ÎèÑ ÏùΩÏùå Ï≤òÎ¶¨
    const praiseApproved = (student?.praise || []).filter(p => p.checked && p.result === 'approved' && p.from && p.from !== 'student' && p.fromName);
    praiseApproved.forEach(p => { if (p.ts) markStudentAlarmAsSeen(p.ts); });
    // expEventsÏùò ÏπúÍµ¨ Ïπ≠Ï∞¨ ÎÇ¥Ïó≠ÎèÑ ÏùΩÏùå Ï≤òÎ¶¨
    const expEventsPraise = (student?.expEvents || []).filter(e => e.type === 'friendPraise' && e.from && e.result === 'approved');
    expEventsPraise.forEach(e => { if (e.ts) markStudentAlarmAsSeen(e.ts); });
    setUnreadCount(0);
    setUnreadAlarmCount(0);
  };

  // Í≤ΩÌóòÏπò/Î†àÎ≤®ÏóÖ Ïù¥ÌéôÌä∏
  React.useEffect(() => {
    if (!student) return;
    let requiredExp = getRequiredExp(student.level - 1);
    if (student.exp === 0 && student.level > 0) {
      setLevelUpEffect(true);
      setTimeout(() => setLevelUpEffect(false), 1200);
    } else {
      setExpEffect(true);
      setTimeout(() => setExpEffect(false), 800);
    }
  }, [student?.exp, student?.level]);

  // Ïπ≠Ï∞¨ ÏäπÏù∏/Í±∞Ï†à Í≤∞Í≥º Ïù¥ÌéôÌä∏ Í∞êÏßÄ
  useEffect(() => {
    if (!student) return;
    // ÎÇ¥Í∞Ä Î≥¥ÎÇ∏ Ïπ≠Ï∞¨ Ï§ë ÏäπÏù∏/Í±∞Ï†àÎêú Í≤É Ï§ë ÏµúÍ∑º 1Í±¥
    const myPraise = (student.praise || []).filter(p => p.from === 'student' && p.checked && p.result && !p.resultNotified);
    if (myPraise.length > 0) {
      const last = myPraise[myPraise.length - 1];
      if (last.result === 'approved') {
        setPraiseResultMsg('Ïπ≠Ï∞¨Ïù¥ ÏäπÏù∏ÎêòÏñ¥ Í≤ΩÌóòÏπòÍ∞Ä ÏßÄÍ∏âÎêòÏóàÏäµÎãàÎã§! üéâ');
      } else if (last.result === 'rejected') {
        setPraiseResultMsg(`Ïπ≠Ï∞¨Ïù¥ Í±∞Ï†àÎêòÏóàÏäµÎãàÎã§. ÏÇ¨Ïú†: ${last.reason}`);
      }
      setPraiseResultEffect(true);
      // resultNotified ÌîåÎûòÍ∑∏ Ï∂îÍ∞Ä(Ï§ëÎ≥µ ÏïåÎ¶º Î∞©ÏßÄ)
      const praiseArr = (student.praise || []).map(p => p.ts === last.ts ? { ...p, resultNotified: true } : p);
      updateDoc(doc(db, 'students', studentId), { praise: praiseArr });
      setTimeout(() => setPraiseResultEffect(false), 2000);
    }
    // [ÌÄòÏä§Ìä∏ ÏäπÏù∏/Ïã§Ìå® Í≤∞Í≥º Ïù¥ÌéôÌä∏ Í∞êÏßÄ Ï∂îÍ∞Ä]
    const myQuest = (student.quests || []).filter(q => (q.status === 'approved' || q.status === 'rejected') && !q.resultNotified);
    if (myQuest.length > 0) {
      const lastQ = myQuest[myQuest.length - 1];
      if (lastQ.status === 'approved') {
        setPraiseResultMsg(`ÌÄòÏä§Ìä∏Í∞Ä ÏäπÏù∏ÎêòÏñ¥ Í≤ΩÌóòÏπò ${lastQ.exp}xpÍ∞Ä ÏßÄÍ∏âÎêòÏóàÏäµÎãàÎã§! üéâ`);
      } else if (lastQ.status === 'rejected') {
        setPraiseResultMsg(`ÌÄòÏä§Ìä∏Í∞Ä Í±∞Ï†àÎêòÏóàÏäµÎãàÎã§. ÏÇ¨Ïú†: ${lastQ.reason || 'ÏóÜÏùå'}`);
      }
      setPraiseResultEffect(true);
      // resultNotified ÌîåÎûòÍ∑∏ Ï∂îÍ∞Ä(Ï§ëÎ≥µ ÏïåÎ¶º Î∞©ÏßÄ)
      const questArr = (student.quests || []).map(q => q.ts === lastQ.ts ? { ...q, resultNotified: true } : q);
      updateDoc(doc(db, 'students', studentId), { quests: questArr });
      setTimeout(() => setPraiseResultEffect(false), 2000);
    }
  }, [student]);

  // Î∞úÌëú ÌöüÏàò Í≥ÑÏÇ∞ (expEventsÏùò type: 'exp'Îßå ÏßëÍ≥Ñ)
  let expEvents = student && Array.isArray(student.expEvents) ? student.expEvents : [];
  const expEventsExp = expEvents.filter(evt => evt.type === 'exp');
  const todayStr = new Date().toISOString().slice(0, 10);
  const todayPresentations = expEventsExp.filter(e => new Date(e.ts).toISOString().slice(0, 10) === todayStr).length;
  const totalPresentations = expEventsExp.length;

  // ÏÉà ÌÄòÏä§Ìä∏ ÎèÑÏ∞© Ïù¥ÌéôÌä∏
  useEffect(() => {
    if (!student) return;
    const questList = Array.isArray(student.quests) ? student.quests : [];
    if (questList.length === 0) return;
    // localStorageÏóêÏÑú Î≥∏ ÌÄòÏä§Ìä∏ ts Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
    let seenQuestTs = [];
    try {
      seenQuestTs = JSON.parse(localStorage.getItem(`seenQuestToast_${studentId}`) || '[]');
    } catch {}
    // ÏïÑÏßÅ Î≥∏ Ï†Å ÏóÜÎäî ÌÄòÏä§Ìä∏(ts) Ï∞æÍ∏∞ (status: ongoingÎßå)
    const newQuest = questList.find(q => q.status === 'ongoing' && !seenQuestTs.includes(q.ts));
    if (newQuest) {
      setQuestToast(true);
      setTimeout(() => setQuestToast(false), 1800);
      // Î≥∏ ÌÄòÏä§Ìä∏Î°ú Í∏∞Î°ù
      try {
        localStorage.setItem(`seenQuestToast_${studentId}`,
          JSON.stringify([...seenQuestTs, newQuest.ts])
        );
      } catch {}
    }
    setPrevQuestCount(questList.length);
  }, [student?.quests, studentId]);

  // ÏßÑÌñâ Ï§ëÏù∏ ÌÄòÏä§Ìä∏ Ï∞æÍ∏∞
  const ongoingQuest = student && Array.isArray(student.quests) ? student.quests.find(q => q.status === 'ongoing') : null;

  // ÌïôÍ∏â ÏÇ¨ÌÉï ÏßëÍ≥Ñ (teacherÏôÄ ÎèôÏùºÌïòÍ≤å level Í∏∞Ï§Ä)
  const candyCounts = [0,0,0,0,0,0];
  if (studentsSnapshot) {
    studentsSnapshot.docs.forEach(doc => {
      const s = doc.data();
      const currentLevel = s.level || 0;
      for (let i = 0; i < currentLevel && i < 6; i++) {
        candyCounts[i]++;
      }
    });
  }

  const handleEnterBoard = () => {
    if (boardCodeInput.trim().length > 0 && student) {
      navigate(`/board/${boardCodeInput.trim().toUpperCase()}?studentId=${studentId}&studentName=${encodeURIComponent(student.name)}`);
      setShowBoardModal(false);
      setBoardCodeInput('');
    }
  };

  // Ï†ÑÍ¥ëÌåê Ïä§ÌÉÄÏùº Í∞úÏÑ†
  const tickerStyle = {
    position: 'fixed',
    top: 0,
    left: 0,
    width: '100vw',
    height: 38,
    background: 'rgba(25, 118, 210, 0.08)',
    color: '#1976d2',
    fontWeight: 700,
    fontSize: 17,
    display: 'flex',
    alignItems: 'center',
    zIndex: 5000,
    overflow: 'hidden',
    pointerEvents: 'none',
    opacity: 0.80,
    backdropFilter: 'blur(2px)',
    borderBottom: '1.5px solid #e3f2fd',
  };
  const tickerTextStyle = {
    whiteSpace: 'nowrap',
    animation: 'ticker 40s linear infinite',
    fontWeight: 700,
    opacity: 0.85,
    letterSpacing: '0.5px',
    textShadow: '0 2px 8px #fff8',
  };

  // ÏòàÏïΩ ÏïåÎûå Î™®Îã¨ Ìö®Í≥ºÏùå/ÏßÑÎèô useEffect
  // useEffect(() => {
  //   if (activeAlarm && showAlarmModal) {
  //     (() => { playAlertSound(); if (window.navigator.vibrate) window.navigator.vibrate([120,80,120]); })();
  //   }
  // }, [activeAlarm, showAlarmModal]);

  // Í¥ëÍ≥†(Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏) Î™®Îã¨ Ìö®Í≥ºÏùå/ÏßÑÎèô useEffect
  // useEffect(() => {
  //   if (broadcastNotice && showBroadcastModal) {
  //     playAlertSound();
  //     if (window.navigator.vibrate) window.navigator.vibrate([120, 80, 120]);
  //   }
  // }, [broadcastNotice, showBroadcastModal]);

  // ÏòàÏïΩ ÏïåÎûå Î™®Îã¨ ÏßÑÎèô Î∞òÎ≥µ (ÎûúÎç§ Ìå®ÌÑ¥, ÎûúÎç§ Î∞òÎ≥µÏ£ºÍ∏∞)
  useEffect(() => {
    let vibrateTimeout;
    function randomVibrateLoop() {
      if (!(activeAlarm && showAlarmModal)) return;
      // ÏßÑÎèô Ìå®ÌÑ¥: 3~7Ìöå, Í∞Å ÏßÑÎèô 50~200ms, Í∞ÑÍ≤© 30~120ms
      const count = Math.floor(Math.random() * 5) + 3;
      const pattern = [];
      for (let i = 0; i < count; i++) {
        pattern.push(Math.floor(Math.random() * 150) + 50); // ÏßÑÎèô
        if (i < count - 1) pattern.push(Math.floor(Math.random() * 90) + 30); // Ïâº
      }
      if (window.navigator.vibrate) window.navigator.vibrate(pattern);
      // Îã§Ïùå Î∞òÎ≥µÍπåÏßÄ ÎåÄÍ∏∞ÏãúÍ∞Ñ: 0.7~1.7Ï¥à ÎûúÎç§
      const next = Math.floor(Math.random() * 1000) + 700;
      vibrateTimeout = setTimeout(randomVibrateLoop, next);
    }
    if (activeAlarm && showAlarmModal) {
      randomVibrateLoop();
    }
    return () => {
      if (vibrateTimeout) clearTimeout(vibrateTimeout);
      if (window.navigator.vibrate) window.navigator.vibrate(0);
    };
  }, [activeAlarm, showAlarmModal]);

  // ÏïåÎ¶º Î™®Îã¨ ÏÉÅÌÉú Í≥ÑÏÇ∞
  const unreadTeacherMessages = (student?.messages || []).filter(m => m.from === 'teacher' && (!student.lastTeacherMsgRead || m.ts > student.lastTeacherMsgRead));
  const unreadQuests = (student?.quests || []).filter(q => !q.read);

  const allNotifications = [
    // Î∞úÌëú Ïù¥Î≤§Ìä∏
    ...(student?.expEvents||[]).map(e => ({
      type: e.type === 'exp' ? 'presentation' : e.type === 'quest' ? 'quest-exp' : e.type,
      text: e.type === 'exp' ? `Î∞úÌëú Í≤ΩÌóòÏπò +${e.amount}` : e.type === 'quest' ? `ÌÄòÏä§Ìä∏ Î≥¥ÏÉÅ +${e.amount}xp (${e.text||''})` : '',
      ts: e.ts
    })),
    // ÍµêÏÇ¨ Î©îÏãúÏßÄ
    ...(student?.messages||[]).filter(m=>m.from==='teacher').map(m => ({
      type: 'teacher-message',
      text: m.text,
      ts: m.ts
    })),
    // ÌÄòÏä§Ìä∏ ÎÇ¥Ïó≠
    ...(student?.quests||[]).map(q => ({
      type: q.status === 'approved' ? 'quest-approved' : q.status === 'rejected' ? 'quest-rejected' : 'quest',
      text: q.status === 'approved' ? `ÌÄòÏä§Ìä∏ ÏäπÏù∏: ${q.text} (+${q.exp}xp)` : q.status === 'rejected' ? `ÌÄòÏä§Ìä∏ Ïã§Ìå®: ${q.text} (Î≥¥ÏÉÅ: 0xp${q.reason ? ', ÏÇ¨Ïú†: ' + q.reason : ''})` : `ÌÄòÏä§Ìä∏: ${q.text} (Î≥¥ÏÉÅ: ${q.exp}xp)` ,
      ts: q.ts
    })),
    // ÌÄòÏä§Ìä∏ ÏäπÏù∏/Í±∞Ï†à Í≤∞Í≥º Î©îÏãúÏßÄ(ÎÇ¥Í∞Ä Î≥¥ÎÇ∏ ÌÄòÏä§Ìä∏ ÏöîÏ≤≠ Í≤∞Í≥º)
    ...(student?.praise||[]).filter(p=>p.checked && p.result).map(p => ({
      type: p.result==='approved' ? 'praise-approved' : 'praise-rejected',
      text: p.result==='approved' ? `Ïπ≠Ï∞¨ ÏäπÏù∏: ${p.text} (+${p.exp}xp)` : `Ïπ≠Ï∞¨ Í±∞Ï†à: ${p.text} (ÏÇ¨Ïú†: ${p.reason||'ÏóÜÏùå'})`,
      ts: p.ts
    }))
  ].filter(n=>n.text).sort((a,b)=>b.ts-a.ts);

  const [lastNotificationRead, setLastNotificationRead] = useState(() => Number(localStorage.getItem('lastNotificationRead') || 0));

  // Ïπ¥ÎìúÎΩëÍ∏∞/Ïø†Ìè∞Ìï® ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [showCardModal, setShowCardModal] = useState(false);
  const [cardChoices, setCardChoices] = useState([]); // 3Ïû• Î≥¥ÏÉÅ ÌõÑÎ≥¥
  const [cardResult, setCardResult] = useState(null); // ÎΩëÏùÄ Î≥¥ÏÉÅ
  const [cardEffect, setCardEffect] = useState(false);
  const [couponBoxOpen, setCouponBoxOpen] = useState(false);
  const [coupons, setCoupons] = useState([]); // Firestore Ïø†Ìè∞Ìï® ÎÇ¥Ïó≠
  const [levelRewardDrawn, setLevelRewardDrawn] = useState({}); // FirestoreÏóêÏÑú Í¥ÄÎ¶¨

  // FirestoreÏóêÏÑú Ïø†Ìè∞Ìï®, Î†àÎ≤®ÏóÖ ÎΩëÍ∏∞ ÏôÑÎ£å Ïó¨Î∂Ä Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ
  useEffect(() => {
    if (!studentId) return;
    const unsub = onSnapshot(doc(db, 'students', studentId), (snap) => {
      const data = snap.data();
      setCoupons(data?.coupons || []);
      setLevelRewardDrawn(data?.levelRewardDrawn || {});
    });
    return () => unsub();
  }, [studentId]);

  // Ïø†Ìè∞ ÏÇ¨Ïö© Ï≤òÎ¶¨ Ìï®Ïàò (Firestore Î∞òÏòÅ)
  const handleUseCoupon = async (coupon) => {
    if (coupon.used) return;
    // Î≥¥ÏÉÅ ÏßÄÍ∏â Î°úÏßÅ (Í∏∞Ï°¥Í≥º ÎèôÏùº)
    if (coupon.key === '5money' || coupon.key === '10money') {
      const amount = coupon.key === '5money' ? 5 : 10;
      await updateDoc(doc(db, 'students', studentId), {
        balance: (student.balance || 0) + amount,
        transactions: arrayUnion({
          type: 'deposit',
          reason: 'Î†àÎ≤®ÏóÖ Î≥¥ÏÉÅ',
          amount: amount,
          ts: Date.now()
        })
      });
    } else if (coupon.key === 'bites' || coupon.key === 'chew2' || coupon.key === 'chupa') {
      const itemName = coupon.key === 'bites' ? 'ÏÇ¨ÏõåÎ∞îÏù¥Ï∏†' : coupon.key === 'chew2' ? 'ÎßàÏù¥ÏÆ∏' : 'Ï∏ÑÌååÏ∂•Ïä§';
      const quantity = coupon.key === 'chew2' ? 2 : 1;
      await updateDoc(doc(db, 'students', studentId), {
        items: arrayUnion({
          name: itemName,
          quantity: quantity,
          ts: Date.now()
        })
      });
    } else if (coupon.key === 'chupafr' || coupon.key === 'bottle') {
      await updateDoc(doc(db, 'students', studentId), {
        messages: arrayUnion({
          from: 'system',
          text: coupon.key === 'chupafr' ? 'ÏπúÍµ¨ÏóêÍ≤å Ï∏ÑÌååÏ∂•Ïä§ 1Í∞úÎ•º ÏÑ†Î¨ºÌñàÏäµÎãàÎã§!' : 'Î∞ò ÏπúÍµ¨ Î™®ÎëêÏóêÍ≤å ÏÉàÏΩ§Îã¨ÏΩ§ 1Í∞úÎ•º ÏÑ†Î¨ºÌñàÏäµÎãàÎã§!',
          ts: Date.now()
        })
      });
    }
    // Firestore Ïø†Ìè∞ used Ï≤òÎ¶¨
    const updatedCoupons = coupons.map(c => c.ts === coupon.ts ? { ...c, used: true } : c);
    await updateDoc(doc(db, 'students', studentId), { coupons: updatedCoupons });
  };

  // Firestore Í∏∞Î∞ò Î†àÎ≤®ÏóÖ Î≥¥ÏÉÅ ÎΩëÍ∏∞ ÏôÑÎ£å Ïó¨Î∂Ä
  const hasDrawnLevelReward = (level) => {
    return !!levelRewardDrawn[level];
  };
  const markLevelRewardAsDrawn = async (level) => {
    await updateDoc(doc(db, 'students', studentId), {
      levelRewardDrawn: { ...levelRewardDrawn, [level]: true }
    });
  };

  // 1. Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Ìï®Ïàò (studentId Í∏∞Î∞ò)
  const getLocalLevelRewardDrawn = (level) => {
    try {
      const drawn = JSON.parse(localStorage.getItem(`levelRewardDrawn_${studentId}`) || '{}');
      return !!drawn[level];
    } catch {
      return false;
    }
  };
  const setLocalLevelRewardDrawn = (level) => {
    try {
      const drawn = JSON.parse(localStorage.getItem(`levelRewardDrawn_${studentId}`) || '{}');
      drawn[level] = true;
      localStorage.setItem(`levelRewardDrawn_${studentId}`, JSON.stringify(drawn));
    } catch {}
  };
  // 2. Firestore + localStorage Îëò Îã§ ÌôïÏù∏
  const hasDrawnLevelRewardAll = (level) => {
    return hasDrawnLevelReward(level) || getLocalLevelRewardDrawn(level);
  };
  // 3. mark Ìï®ÏàòÎèÑ Îëò Îã§ ÏóÖÎç∞Ïù¥Ìä∏
  const markLevelRewardAsDrawnAll = async (level) => {
    setLocalLevelRewardDrawn(level);
    await updateDoc(doc(db, 'students', studentId), {
      levelRewardDrawn: { ...levelRewardDrawn, [level]: true }
    });
  };
  // 4. Î°úÎî© ÏÉÅÌÉú
  const [studentLoaded, setStudentLoaded] = useState(false);
  useEffect(() => {
    if (studentDoc) setStudentLoaded(true);
  }, [studentDoc]);

  // Ïπ¥ÎìúÎΩëÍ∏∞ Î™®Îã¨ Ìä∏Î¶¨Í±∞ useEffect (Îã®Ïùº)
  useEffect(() => {
    if (!studentLoaded || !student) return;
    // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏ Ï∂îÍ∞Ä
    console.log('[ÎîîÎ≤ÑÍ∑∏] Î†àÎ≤®ÏóÖ Î≥¥ÏÉÅ Ï≤¥ÌÅ¨:', {
      studentId,
      studentLevel: student.level,
      firestoreÎ≥¥ÏÉÅÎ∞õÏùå: hasDrawnLevelReward(student.level),
      Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÌÇ§: `levelRewardDrawn_${studentId}`,
      Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÎ≥¥ÏÉÅÎ∞õÏùå: getLocalLevelRewardDrawn(student.level),
      Ï¢ÖÌï©Î≥¥ÏÉÅÎ∞õÏùå: hasDrawnLevelRewardAll(student.level),
      showCardModal: showCardModal
    });
    if (!hasDrawnLevelRewardAll(student.level)) {
      console.log('[ÎîîÎ≤ÑÍ∑∏] Ïπ¥Îìú Î™®Îã¨ Ìä∏Î¶¨Í±∞Îê®! - Î†àÎ≤®:', student.level);
      // Ïπ¥Îìú 3Ïû• Î≥¥ÏÉÅ ÌõÑÎ≥¥ ÏÉùÏÑ±
      const pick3 = () => {
        const arr = [];
        for (let i = 0; i < 3; i++) {
          arr.push(REWARD_LIST[Math.floor(Math.random() * REWARD_LIST.length)]);
        }
        return arr;
      };
      setCardChoices(pick3());
      setShowCardModal(true);
      setCardResult(null);
      setCardEffect(false);
      // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê Î®ºÏ†Ä Í∏∞Î°ù (Ï¶âÏãú Ï†ÅÏö©)
      setLocalLevelRewardDrawn(student.level);
      console.log('[ÎîîÎ≤ÑÍ∑∏] Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê Î†àÎ≤®ÏóÖ Î≥¥ÏÉÅ Í∏∞Î°ùÎê®:', student.level);
      // FirestoreÏóêÎèÑ Í∏∞Î°ù (ÎπÑÎèôÍ∏∞)
      markLevelRewardAsDrawn(student.level)
        .then(() => console.log('[ÎîîÎ≤ÑÍ∑∏] FirestoreÏóê Î†àÎ≤®ÏóÖ Î≥¥ÏÉÅ Í∏∞Î°ù ÏôÑÎ£å:', student.level))
        .catch(err => console.error('[ÎîîÎ≤ÑÍ∑∏] Firestore ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', err));
    }
  }, [student, studentLoaded]);

  // Ïø†Ìè∞Ìï® ÌÉ≠ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [couponTab, setCouponTab] = useState('unused'); // 'unused' or 'used'

  // Ïπ¥ÎìúÎΩëÍ∏∞ Î™®Îã¨ Îã´Í∏∞ Ìï®Ïàò (ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî)
  const handleCloseCardModal = () => {
    setShowCardModal(false);
    setCardChoices([]);
    setCardResult(null);
    setCardEffect(false);
  };

  // FirestoreÏôÄ localStorage Î≥¥ÏÉÅ ÏÉÅÌÉú ÏûêÎèô ÎèôÍ∏∞Ìôî useEffect
  useEffect(() => {
    if (!studentLoaded || !student) return;
    const local = getLocalLevelRewardDrawn(student.level);
    const remote = hasDrawnLevelReward(student.level);
    if (local && !remote) {
      // FirestoreÏóê trueÎ°ú ÎßûÏ∂§
      markLevelRewardAsDrawn(student.level);
    } else if (!local && remote) {
      // localStorageÏóê trueÎ°ú ÎßûÏ∂§
      setLocalLevelRewardDrawn(student.level);
    }
  }, [student, studentLoaded]);

  // ÏïåÎ¶º Î™®Îã¨ ÌÉ≠ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [notificationTab, setNotificationTab] = useState('Î©îÏãúÏßÄ');

  // ÏïåÎûå Î¶¨Ïä§Ìä∏ map ÎÇ¥Î∂ÄÏóêÏÑú onClick Îì±ÏúºÎ°ú ÏïÑÎûò ÏΩîÎìú Ï∂îÍ∞Ä
  // localStorageÏóê ts Ï†ÄÏû•
  const markStudentAlarmAsSeen = (ts) => {
    try {
      const seen = JSON.parse(localStorage.getItem('seenStudentAlarms') || '[]');
      if (!seen.includes(ts)) {
        localStorage.setItem('seenStudentAlarms', JSON.stringify([...seen, ts]));
      }
    } catch {}
  };
  // ÏïåÎûå ÌÅ¥Î¶≠ Ïãú markStudentAlarmAsSeen(a.ts) Ìò∏Ï∂ú
  // ... existing code ...

  // ... feverTime ÏÉÅÌÉú useState ...
  const [feverActive, setFeverActive] = useState(false);
  // Firestore feverTime Íµ¨ÎèÖ useEffect ...
  useEffect(() => {
    const unsub = onSnapshot(doc(db, 'settings', 'feverTime'), (snap) => {
      const data = snap.data();
      setFeverActive(!!(data && data.active === true));
    });
    return () => unsub();
  }, []);
  // ... candy rain Ïï†ÎãàÎ©îÏù¥ÏÖò Ïª¥Ìè¨ÎÑåÌä∏ ...
  function CandyRain() {
    const [candies, setCandies] = useState([]);
    const requestRef = useRef();
    // Ìå°Ìå° Ìö®Í≥º ÌôïÎ•† Ï¶ùÍ∞Ä
    const POP_PROB = 0.45; // ÌôïÎ•† Îçî ÏÉÅÌñ• Ï°∞Ï†ï
    // Ï∫îÎîî ÏÉùÏÑ±
    useEffect(() => {
      let running = true;
      function addCandy() {
        if (!running || !feverActive) return;
        setCandies(candies => [
          ...candies,
          {
            id: Math.random().toString(36).slice(2),
            img: candyRainImages[Math.floor(Math.random()*candyRainImages.length)],
            left: Math.random()*85+5, // ÌôîÎ©¥ Í∞ÄÏû•ÏûêÎ¶¨ Ï†úÏô∏
            top: Math.random()*70+15, // 15~85vh ÏÇ¨Ïù¥ÏóêÏÑú ÎûúÎç§ÌïòÍ≤å ÏÉùÏÑ±
            size: Math.random()*50+20, // 20~70pxÎ°ú Îçî Îã§ÏñëÌïòÍ≤å
            angle: (Math.random() - 0.5) * 360, // 360ÎèÑ ÌöåÏ†Ñ
            pop: true, // Î™®Îì† Ï∫îÎîîÍ∞Ä Ìå°Ìå° Ìö®Í≥º
            fade: false
          }
        ]);
        if (running && feverActive) {
          setTimeout(addCandy, Math.random()*200+100); // 100~300msÎ°ú Îçî Îπ†Î•¥Í≤å ÏÉùÏÑ±
        }
      }
      if (feverActive) addCandy();
      return () => { running = false; };
    }, [feverActive]);
    // Ï∫îÎîî Ïï†ÎãàÎ©îÏù¥ÏÖò Î∞è Ï†úÍ±∞
    useEffect(() => {
      if (!feverActive) {
        setCandies(candies => candies.map(c => ({ ...c, fade: true })));
        const timeout = setTimeout(() => setCandies([]), 1400);
        return () => clearTimeout(timeout);
      }
    }, [feverActive]);
  return (
      <div style={{ pointerEvents:'none', position:'fixed', top:0, left:0, width:'100vw', height:'100vh', zIndex:9999 }}>
        {candies.map(candy => (
          <img key={candy.id} src={candy.img} alt="candy" style={{
            position:'absolute',
            left: `${candy.left}vw`,
            top: `${candy.top}vh`,
            width: candy.size,
            height: candy.size,
            opacity: candy.fade ? 0 : 0.92,
            pointerEvents:'none',
            filter: 'drop-shadow(0 0 16px #ffd600)',
            animation: 'popCandy 0.7s forwards',
            transform: `rotate(${candy.angle}deg)`,
            transition: 'opacity 1.1s'
          }} />
        ))}
          <style>{`
          @keyframes popCandy {
            0% { transform: scale(0.2) rotate(0deg); opacity: 0; }
            20% { transform: scale(1.8) rotate(-15deg); opacity: 1; }
            40% { transform: scale(1.2) rotate(10deg); opacity: 0.9; }
            60% { transform: scale(1.5) rotate(-10deg); opacity: 0.8; }
            80% { transform: scale(1.1) rotate(5deg); opacity: 0.6; }
            100% { transform: scale(0.2) rotate(20deg); opacity: 0; }
            }
          `}</style>
        </div>
    );
  }
  // ... existing code ...
  {feverActive && <CandyRain />}
  // ... Î∞úÌëú Í≤ΩÌóòÏπò ÏßÄÍ∏â Î°úÏßÅÏóêÏÑú feverActive Ï≤¥ÌÅ¨ÌïòÏó¨ 2Î∞∞ ÏßÄÍ∏â ...

  // 1. feverActive ÏïàÎÇ¥ Î™®Îã¨ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [showFeverModal, setShowFeverModal] = useState(false);
  useEffect(() => {
    if (feverActive) {
      setShowFeverModal(true);
      const t = setTimeout(() => setShowFeverModal(false), 5000);
      return () => clearTimeout(t);
    } else {
      setShowFeverModal(false);
    }
  }, [feverActive]);

  // StudentPage Ïª¥Ìè¨ÎÑåÌä∏ ÎÇ¥ useState/useEffect ÏïÑÎûòÏóê Ï∂îÍ∞Ä
  const feverBgImages = [
    '/fv1.png','/fv2.png','/fv3.png','/fv4.png','/fv5.png','/fv6.png','/fv7.png','/fv8.png'
  ];
  const [feverBgIdx, setFeverBgIdx] = useState(0);
  const [feverBgActive, setFeverBgActive] = useState(false);

  useEffect(() => {
    let interval;
    if (feverActive) {
      setFeverBgActive(true);
      // ÌîºÎ≤ÑÌÉÄÏûÑ ÏãúÏûë Ïãú Î∞îÎ°ú ÎûúÎç§ Ïù¥ÎØ∏ÏßÄÎ°ú Î∞∞Í≤Ω ÏÑ§Ï†ï
      setFeverBgIdx(Math.floor(Math.random() * feverBgImages.length));
      interval = setInterval(() => {
        setFeverBgIdx(idx => (idx + 1) % feverBgImages.length);
      }, Math.random() * 200 + 300); // 0.3~0.5Ï¥à Í∞ÑÍ≤©
    } else {
      setFeverBgActive(false);
      setFeverBgIdx(0);
    }
    return () => interval && clearInterval(interval);
  }, [feverActive]);

  // Í∞êÏ†ï Ïù¥Î™®Ìã∞ÏΩò ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [selectedEmotion, setSelectedEmotion] = useState(null);
  const [isSelectingEmotion, setIsSelectingEmotion] = useState(false);

  // FirestoreÏóêÏÑú emotionIcon Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    if (student && student.emotionIcon) {
      setSelectedEmotion(student.emotionIcon);
    }
  }, [student]);

  // Í∞êÏ†ï Ïù¥Î™®Ìã∞ÏΩò Ï†ÄÏû• Ìï®Ïàò
  const handleSelectEmotion = async (icon) => {
    setSelectedEmotion(icon);
    setIsSelectingEmotion(false);
    await updateDoc(doc(db, 'students', studentId), { emotionIcon: icon });
  };

  const EMOTION_ICONS = Array.from({ length: 16 }, (_, i) => `/em${i + 1}.png`);

  const [showMessageModal, setShowMessageModal] = useState(false);
  const [messageText, setMessageText] = useState('');
  const [replyToMessage, setReplyToMessage] = useState(null);

  const handleReplyMessage = (message) => {
    setReplyToMessage(message);
    setShowMessageModal(true);
  };

  const [showQuestModal, setShowQuestModal] = useState(false);
  const [hasSeenQuestModal, setHasSeenQuestModal] = useState(false);

  // ÌÄòÏä§Ìä∏ Î™®Îã¨ ÌôïÏù∏ Ïó¨Î∂Ä Ï≤¥ÌÅ¨ Ìï®Ïàò
  const checkQuestModalSeen = () => {
    try {
      const seen = localStorage.getItem('questModalSeen');
      return seen === 'true';
    } catch {
      return false;
    }
  };

  // ÌÄòÏä§Ìä∏ Î™®Îã¨ÏùÑ Î≥∏ Í≤ÉÏúºÎ°ú ÌëúÏãú
  const markQuestModalAsSeen = () => {
    try {
      localStorage.setItem('questModalSeen', 'true');
      setHasSeenQuestModal(true);
    } catch {}
  };

  // ÌÄòÏä§Ìä∏ Î™®Îã¨ ÌëúÏãú Ïó¨Î∂Ä ÌôïÏù∏
  useEffect(() => {
    if (student && !checkQuestModalSeen()) {
      setShowQuestModal(true);
    }
  }, [student]);

  // ÌÄòÏä§Ìä∏ Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
  const QuestModal = () => (
    <Modal
      open={showQuestModal}
      onClose={() => {
        setShowQuestModal(false);
        markQuestModalAsSeen();
      }}
      aria-labelledby="quest-modal-title"
    >
            <Box sx={{
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        width: 400,
        bgcolor: 'background.paper',
        boxShadow: 24,
        p: 4,
        borderRadius: 2,
      }}>
        <Typography id="quest-modal-title" variant="h6" component="h2" gutterBottom>
          ÌôòÏòÅÌï©ÎãàÎã§! üéâ
        </Typography>
        <Typography variant="body1" paragraph>
          Ï∫îÎîîÏÉµÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§! Ïó¨Í∏∞ÏÑúÎäî Îã§ÏùåÍ≥º Í∞ôÏùÄ ÌôúÎèôÏùÑ Ìï† Ïàò ÏûàÏñ¥Ïöî:
        </Typography>
        <ul>
          <li>ÏÑ†ÏÉùÎãòÍ≥º Î©îÏãúÏßÄÎ•º Ï£ºÍ≥†Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî</li>
          <li>Ïπ≠Ï∞¨ÏùÑ Î∞õÍ≥† Í≤ΩÌóòÏπòÎ•º ÏñªÏùÑ Ïàò ÏûàÏñ¥Ïöî</li>
          <li>Î†àÎ≤®ÏóÖÌïòÎ©¥ Î≥¥ÏÉÅÏùÑ Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî</li>
          <li>ÏÉÅÏ†êÏóêÏÑú Îã§ÏñëÌïú ÏïÑÏù¥ÌÖúÏùÑ Íµ¨Îß§Ìï† Ïàò ÏûàÏñ¥Ïöî</li>
        </ul>
        <Button
          variant="contained"
          color="primary"
          fullWidth
          onClick={() => {
            setShowQuestModal(false);
            markQuestModalAsSeen();
          }}
          sx={{ mt: 2 }}
        >
          ÏãúÏûëÌïòÍ∏∞
        </Button>
            </Box>
    </Modal>
  );

  // Ï†ïÎ≥¥(i) ÏïÑÏù¥ÏΩò ÌÅ¥Î¶≠ Ïãú Î™®Îã¨ ÏÉÅÌÉú
  const [showInfoModal, setShowInfoModal] = useState(false);

  // InfoModal: i ÏïÑÏù¥ÏΩò ÌÅ¥Î¶≠ Ïãú ÏïàÎÇ¥ Î™®Îã¨ (Ïã§Ï†ú Ï°¥Ïû¨ÌïòÎäî Ïù¥ÎØ∏ÏßÄÎßå ÏÇ¨Ïö©)
  {showInfoModal && (
    <Modal
      open={showInfoModal}
      onClose={() => setShowInfoModal(false)}
      aria-labelledby="info-modal-title"
    >
      <Box sx={{
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        width: 400,
        bgcolor: 'background.paper',
        boxShadow: 24,
        p: 4,
        borderRadius: 2,
      }}>
        <Typography id="info-modal-title" variant="h6" component="h2" gutterBottom>
          Ï∫îÎîîÏÉµ ÏïàÎÇ¥ üìù
        </Typography>
        <Typography variant="body1" paragraph>
          <ul style={{ margin: 0, paddingLeft: 18 }}>
            <li>Ï∫îÎîîÏÉµÏùÄ ÌïôÏÉùÎì§Ïùò ÏÑ±Ïû•Í≥º ÏÜåÌÜµÏùÑ ÏúÑÌïú Í≥µÍ∞ÑÏûÖÎãàÎã§.</li>
            <li>ÏπúÍµ¨Î•º Ïπ≠Ï∞¨ÌïòÍ±∞ÎÇò, ÏÑ†ÏÉùÎãòÍ≥º Î©îÏãúÏßÄÎ•º Ï£ºÍ≥†Î∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§.</li>
            <li>Í≤ΩÌóòÏπòÎ•º ÏåìÏïÑ Î†àÎ≤®ÏóÖÌïòÍ≥†, Îã§ÏñëÌïú Î≥¥ÏÉÅÏùÑ Î∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§.</li>
            <li>ÏÉÅÏ†êÏóêÏÑú ÏïÑÏù¥ÌÖúÏùÑ Íµ¨ÏûÖÌïòÍ±∞ÎÇò, ÌÄòÏä§Ìä∏Ïóê ÎèÑÏ†ÑÌï† Ïàò ÏûàÏäµÎãàÎã§.</li>
            <li>ÌïôÏäµÏùºÏßÄ Î≤ÑÌäºÏùÑ ÌÜµÌï¥ ÎÇòÎßåÏùò ÏùºÏßÄÎ•º ÏûëÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.</li>
          </ul>
        </Typography>
                        <Button
                          variant="contained"
          color="primary"
          fullWidth
          onClick={() => setShowInfoModal(false)}
          sx={{ mt: 2 }}
        >
          Îã´Í∏∞
                        </Button>
                </Box>
    </Modal>
  )}

  // Î™®Îã¨ Ïò§Ìîà Ïó¨Î∂Ä(Î∞∞Í≤Ω ÍπúÎπ°ÏûÑ Î∞©ÏßÄ)
  const isModalOpen = showQuestModal || showInfoModal;

  // ÍµêÏÇ¨ Ìä∏Î¶¨Í±∞ Ïø†Ìè∞ Ïù¥Î≤§Ìä∏ Í∞êÏßÄ(useEffect)
  useEffect(() => {
    if (!student || !studentId) return;
    if (student.triggerCouponEvent && student.triggerCouponEvent.active) {
      // Ïπ¥ÎìúÎΩëÍ∏∞ Î™®Îã¨ ÌôúÏÑ±Ìôî (Í∏∞Ï°¥ pick3 Î°úÏßÅ ÌôúÏö©)
      const pick3 = () => {
        const arr = [];
        for (let i = 0; i < 3; i++) {
          arr.push(REWARD_LIST[Math.floor(Math.random() * REWARD_LIST.length)]);
        }
        return arr;
      };
      setCardChoices(pick3());
      setShowCardModal(true);
      setCardResult(null);
      setCardEffect(false);
      // Ìä∏Î¶¨Í±∞ ÌîåÎûòÍ∑∏ Ï†úÍ±∞(Ìïú Î≤àÎßå Ïã§Ìñâ)
      const clearTrigger = async () => {
        try {
          await updateDoc(doc(db, 'students', studentId), {
            triggerCouponEvent: { active: false, ts: Date.now() }
          });
        } catch (error) {
          console.error('[Ïø†Ìè∞Ïù¥Î≤§Ìä∏] Ìä∏Î¶¨Í±∞ ÌîåÎûòÍ∑∏ Ï†úÍ±∞ Ïã§Ìå®:', error);
        }
      };
      clearTrigger();
    }
  }, [student, studentId]);

  const [showLinkModal, setShowLinkModal] = useState(false);
  const [currentLink, setCurrentLink] = useState(null);
  const [linkCategory, setLinkCategory] = useState('all');
  const [showLinkHistoryModal, setShowLinkHistoryModal] = useState(false);

  // ÎßÅÌÅ¨ Î∞©Î¨∏ Ï∂îÏ†Å Ìï®Ïàò
  const handleLinkVisit = async (link) => {
    try {
      const studentRef = doc(db, 'students', studentId);
      const student = studentDoc.data();
      const updatedLinks = (student.links || []).map(l => {
        if (l.url === link.url && l.ts === link.ts) {
          return {
            ...l,
            visits: [...(l.visits || []), { ts: Date.now() }]
          };
        }
        return l;
      });
      await updateDoc(studentRef, { links: updatedLinks });
    } catch (error) {
      console.error('Error tracking link visit:', error);
    }
  };

  // ÏÉà ÎßÅÌÅ¨ ÌôïÏù∏
  useEffect(() => {
    if (!student) return;
    const links = student.links || [];
    const unreadLinks = links.filter(link => {
      const lastVisit = Math.max(...(link.visits || []).map(v => v.ts));
      return !lastVisit;
    });
    if (unreadLinks.length > 0) {
      const latestLink = unreadLinks.sort((a, b) => b.ts - a.ts)[0];
      setCurrentLink(latestLink);
      setShowLinkModal(true);
      if ('vibrate' in navigator) {
        navigator.vibrate([200, 100, 200]);
      }
    }
  }, [student]);

  const [user, authLoading] = useAuthState(auth);

  const [showDiaryModal, setShowDiaryModal] = useState(false);

  if (authLoading) return <div>Î°úÎî© Ï§ë...</div>;

  if (!user) {
    return (
      <div style={{ minHeight: '100vh', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
        <h2>Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§</h2>
        <button
          onClick={async () => {
            try {
              await signInWithPopup(auth, googleProvider);
            } catch (e) {
              alert('Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ' + e.message);
            }
          }}
          style={{
            padding: '12px 32px',
            fontSize: 18,
            borderRadius: 8,
            background: '#4285F4',
            color: '#fff',
            border: 'none',
            fontWeight: 700,
            cursor: 'pointer',
            marginTop: 16
          }}
        >
          Íµ¨Í∏Ä Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏
        </button>
      </div>
    );
  }
  if (!student) {
    return (
      <div style={{ minHeight: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center', fontSize: 22, color: '#d72660' }}>
        ÌïôÏÉù Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§...
      </div>
    );
  }

  // Î°úÍ∑∏Ïù∏Ìïú Í≤ΩÏö∞: Î°úÍ∑∏ÏïÑÏõÉ Î≤ÑÌäº + Í∏∞Ï°¥ ÌïôÏÉù ÌéòÏù¥ÏßÄ ÎÇ¥Ïö©
  return (
    <div style={{ minHeight: '100vh', background: 'linear-gradient(135deg, #ffe4ec 0%, #f8bbd0 100%)', backgroundImage: 'url(/ST_bg.png), linear-gradient(135deg, #ffe4ec 0%, #f8bbd0 100%)', backgroundBlendMode: 'soft-light', backgroundRepeat: 'no-repeat', backgroundSize: 'cover', backgroundPosition: 'center', paddingBottom: 80 }}>
      <div style={{ position: 'fixed', top: 24, right: 32, zIndex: 2000, display: 'flex', flexDirection: 'row', gap: 18, alignItems: 'center' }}>
        {/* Ïú†Î¶¨Î≥ë ÏïÑÏù¥ÏΩò Î≤ÑÌäº */}
        <div style={{ width: 40, height: 40, display: 'flex', alignItems: 'center', justifyContent: 'center', cursor: 'pointer', position: 'relative' }} title="ÌïôÍ∏â Ï∫îÎîî Ïú†Î¶¨Î≥ë" onClick={() => setShowJarModal(true)}>
          <img src="/jar2.png" alt="Ïú†Î¶¨Î≥ë" style={{ width: 32, height: 32, objectFit: 'contain', filter: 'drop-shadow(0 2px 6px #b2ebf2a0)' }} />
        </div>
        {/* Ï∫îÎîîÏàç Î≤ÑÌäº (StorefrontIcon + ÌÖçÏä§Ìä∏) */}
        <button onClick={() => setShowShopModal(true)} style={{ background: '#fffde7', border: 'none', borderRadius: 999, padding: '8px 18px', boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>
          <StorefrontIcon style={{ color: '#d72660', fontSize: 28 }} />
          <span style={{ fontWeight: 700, color: '#d72660', fontSize: 16 }}>Ï∫îÎîîÏàç</span>
        </button>
        {/* Ïø†Ìè∞Ìï® Î≤ÑÌäº (SVG Ìã∞Ïºì ÏïÑÏù¥ÏΩò + ÌÖçÏä§Ìä∏) */}
        <button onClick={() => setCouponBoxOpen(true)} style={{ background: '#fffde7', border: 'none', borderRadius: 999, padding: '8px 18px', boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>
          <svg width="28" height="28" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: 4 }}>
            <rect x="3" y="8" width="26" height="12" rx="4" fill="#FFD700" stroke="#B8860B" strokeWidth="2"/>
            <rect x="7" y="12" width="18" height="4" rx="2" fill="#FFF8DC" />
            <circle cx="8.5" cy="14" r="1.5" fill="#B8860B" />
            <circle cx="23.5" cy="14" r="1.5" fill="#B8860B" />
            <path d="M3 12 Q1 14 3 16" stroke="#B8860B" strokeWidth="2" fill="none"/>
            <path d="M29 12 Q31 14 29 16" stroke="#B8860B" strokeWidth="2" fill="none"/>
          </svg>
          <span style={{ fontWeight: 700, color: '#d72660', fontSize: 16 }}>Ïø†Ìè∞Ìï®</span>
        </button>
      </div>
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginBottom: 32, marginTop: 8 }}>
        <img src="/candyshop_banner.png" alt="JAMMANBO CANDY SHOP Î∞∞ÎÑà" style={{ maxWidth: 480, width: '90vw', height: 'auto', borderRadius: 18, boxShadow: '0 4px 24px #b2ebf240', display: 'block' }} />
      </div>
      <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 16 }}>
        <button onClick={() => setShowBoardModal(true)} style={{ fontWeight: 700, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '10px 32px', fontSize: 17, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', transition: 'all 0.2s' }}>Í≤åÏãúÌåê ÏûÖÏû•</button>
      </div>
      <div>
        <Card sx={{
          maxWidth: 480,
          width: 'min(95vw, 480px)',
          minHeight: 340,
          mx: 'auto',
          my: 4,
          borderRadius: 6,
          border: '3px solid #a7d7c5',
          boxShadow: '0 2px 16px #a7d7c540',
          background: '#fff',
          position: 'relative',
          p: 0,
          overflow: 'visible',
        }}>
          <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'stretch', width: '100%', p: 0 }}>
            <Box sx={{
              width: 140, minWidth: 120, maxWidth: 160, background: '#e3f2fd', borderRadius: '18px 0 0 18px', display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', py: 4, px: 2, boxShadow: '2px 0 12px #b2ebf220',
            }}>
              <img src={levelImages[student.level] || levelImages[0]} alt={LEVELS[student.level] || 'ÏÇ¨ÌÉï'} style={{ width: 115, height: 115, objectFit: 'contain', display: 'block', marginBottom: 16 }} />
              <span style={{ color: '#1976d2', fontWeight: 700, fontSize: 22, letterSpacing: '-1px', marginTop: 4 }}>{LEVELS[student.level] || LEVELS[0]}</span>
            </Box>
            <Box sx={{ flex: 1, p: '24px 18px 18px 18px', display: 'flex', flexDirection: 'column', justifyContent: 'space-between', minHeight: 180 }}>
              <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'flex-start', justifyContent: 'space-between', mb: 1 }}>
                <Box>
                  <Typography variant="h5" fontWeight="bold" sx={{ fontSize: '1.35rem', mb: 0.5 }}>{student.name}</Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
                    <span style={{ color: '#1976d2', fontWeight: 600, fontSize: 16 }}>Lv.{student.level}</span>
                    <span style={{ fontSize: 13, color: '#bbb', margin: '0 4px' }}>|</span>
                    <span style={{ color: '#43a047', fontWeight: 600, fontSize: 16 }}>XP {student.exp}</span>
                  </Box>
                </Box>
                <Badge badgeContent={unreadCount} color="error">
                  <IconButton color="primary" onClick={handleAlarmClick} sx={{ mt: 0.5 }}>
                    <NotificationsActiveIcon fontSize="medium" />
                  </IconButton>
                </Badge>
              </Box>
              <Box sx={{ width: '100%', mb: 1.5 }}>
                <div style={{ width: '100%', height: 16, background: '#e3f2fd', borderRadius: 10, position: 'relative', overflow: 'hidden', boxShadow: '0 1px 4px #b2ebf240' }}>
                  <div style={{ width: `${Math.min(100, Math.round((student.exp / getRequiredExp(student.level)) * 100))}%`, height: '100%', background: '#90caf9', borderRadius: 10, transition: 'width 0.4s' }} />
                  <div style={{ position: 'absolute', left: 0, top: 0, width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center', fontWeight: 600, fontSize: 13, color: '#1976d2', letterSpacing: '-0.5px' }}>
                    XP {student.exp} / {getRequiredExp(student.level)}
                  </div>
                </div>
              </Box>
              <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                <Chip label={`Ïò§Îäò Î∞úÌëú: ${todayPresentations}`} color="info" size="small" />
                <Chip label={`ÎàÑÏ†Å Î∞úÌëú: ${totalPresentations}`} color="success" size="small" />
              </Box>
              {Array.isArray(student.quests) && student.quests.filter(q => q.status === 'ongoing').length > 0 && (
                <Box mb={2} textAlign="center">
                  {student.quests.filter(q => q.status === 'ongoing').map((quest, idx) => (
                    <div key={idx} style={{ 
                      background: '#fff8e1', 
                      borderRadius: 16, 
                      padding: '16px 20px', 
                      marginBottom: 12,
                      border: '2px solid #ffd54f',
                      boxShadow: '0 2px 8px #ffd54f40'
                    }}>
                      <div style={{ 
                        fontWeight: 700, 
                        color: '#ff9800', 
                        fontSize: 16,
                        marginBottom: 8,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        gap: 6
                      }}>
                        <span role="img" aria-label="quest">üéØ</span> ÌÄòÏä§Ìä∏
                      </div>
                      <div style={{ 
                        color: '#222', 
                        fontWeight: 600, 
                        fontSize: 15, 
                        marginBottom: 8,
                        lineHeight: 1.4
                      }}>
                        {quest.text}
                      </div>
                      <div style={{ 
                        color: '#1976d2', 
                        fontWeight: 600, 
                        fontSize: 15, 
                        marginBottom: 12
                      }}>
                        Î≥¥ÏÉÅ: <span style={{ color: '#43a047' }}>{quest.exp}xp</span>
                      </div>
                      {quest.requestPending ? (
                        <div style={{ 
                          color: '#1976d2', 
                          fontWeight: 600, 
                          fontSize: 14,
                          background: '#e3f2fd',
                          padding: '8px 16px',
                          borderRadius: 999,
                          display: 'inline-block'
                        }}>
                          ÏäπÏù∏ ÏöîÏ≤≠ ÎåÄÍ∏∞ Ï§ë...
                        </div>
                      ) : (
                        <Button
                          variant="contained"
                          sx={{ 
                            background: '#e0f7fa', 
                            color: '#1976d2', 
                            borderRadius: 999, 
                            fontWeight: 600, 
                            boxShadow: '0 2px 8px #b2ebf240',
                            '&:hover': { background: '#b2ebf2' },
                            padding: '8px 24px'
                          }}
                          onClick={async () => {
                            const newQuests = (student.quests || []).map(q => q.ts === quest.ts ? { ...q, requestPending: true } : q);
                            await updateDoc(doc(db, 'students', studentId), { quests: newQuests });
                          }}
                        >
                          ÌÄòÏä§Ìä∏ ÏäπÏù∏ ÏöîÏ≤≠ÌïòÍ∏∞
                        </Button>
                      )}
                    </div>
                  ))}
                </Box>
              )}
              <Box mt={1.5}>
                <Button fullWidth sx={{ mb: 1, borderRadius: 999, fontWeight: 'bold', background: '#ffe4ec', border: '2px solid #ffb6b9', color: '#d72660', boxShadow: '0 2px 8px #f8bbd0a0', fontSize: 16, letterSpacing: '-0.5px', py: 1.2, '&:hover': { background: '#ffd6e0' } }} onClick={() => { console.log('Î©îÏãúÏßÄ Î≤ÑÌäº ÌÅ¥Î¶≠'); setShowMsgModal(true); }} startIcon={<EmojiEventsIcon />}>Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞</Button>
                <Button fullWidth sx={{ mb: 1, borderRadius: 999, fontWeight: 'bold', background: '#ffe4ec', border: '2px solid #ffb6b9', color: '#d72660', boxShadow: '0 2px 8px #f8bbd0a0', fontSize: 16, letterSpacing: '-0.5px', py: 1.2, '&:hover': { background: '#ffd6e0' } }} onClick={() => { console.log('ÏπúÍµ¨ Ïπ≠Ï∞¨ Î≤ÑÌäº ÌÅ¥Î¶≠'); setShowPraiseModal(true); }} startIcon={<CelebrationIcon />}>ÏπúÍµ¨ Ïπ≠Ï∞¨ÌïòÍ∏∞</Button>
                <Button fullWidth sx={{ borderRadius: 999, fontWeight: 'bold', background: '#ffe4ec', border: '2px solid #ffb6b9', color: '#d72660', boxShadow: '0 2px 8px #f8bbd0a0', fontSize: 16, letterSpacing: '-0.5px', py: 1.2, '&:hover': { background: '#ffd6e0' } }} onClick={() => { console.log('ÎÇò Ïπ≠Ï∞¨ Î≤ÑÌäº ÌÅ¥Î¶≠'); setShowSelfPraiseModal(true); }} startIcon={<CelebrationIcon />}>ÎÇò Ïπ≠Ï∞¨ÌïòÍ∏∞</Button>
              </Box>
            </Box>
          </Box>
        </Card>
      </div>
      {notices.length > 0 && (
        <div style={{ ...tickerStyle, top: 0, position: 'fixed', left: 0, width: '100vw', zIndex: 5000 }}>
          <span style={{ fontSize: 24, marginRight: 18 }} role="img" aria-label="siren">üì£</span>
          <div style={tickerTextStyle}>
            {notices.map((n, i) => (
              <span key={n.id} style={{ marginRight: 48 }}>{n.content}</span>
            ))}
          </div>
          <style>{`@keyframes ticker { 0% { transform: translateX(100vw); } 100% { transform: translateX(-100vw); } }`}</style>
        </div>
      )}
      {feverActive && <CandyRain />}
      {showFeverModal && <Modal
        open={showFeverModal}
        onClose={() => setShowFeverModal(false)}
        aria-labelledby="fever-modal-title"
      >
        <Box sx={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: 400,
          bgcolor: 'background.paper',
          boxShadow: 24,
          p: 4,
          borderRadius: 2,
        }}>
          <Typography id="fever-modal-title" variant="h6" component="h2" gutterBottom>
            ÌîºÎ≤ÑÌÉÄÏûÑ ÏïàÎÇ¥
          </Typography>
          <Typography variant="body1" paragraph>
            ÌîºÎ≤ÑÌÉÄÏûÑÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§! Ïù¥ ÏãúÍ∞ÑÎèôÏïà Í≤ΩÌóòÏπòÎ•º 2Î∞∞Î°ú Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî.
          </Typography>
          <Button
            variant="contained"
            color="primary"
            fullWidth
            onClick={() => setShowFeverModal(false)}
            sx={{ mt: 2 }}
          >
            ÌôïÏù∏
          </Button>
        </Box>
      </Modal>}
      {showMsgModal && (
        <div style={{ position: 'fixed', top: 60, left: 0, width: '100vw', height: 'calc(100vh - 60px)', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'flex-start', justifyContent: 'center', zIndex: 1000, paddingTop: 40 }}>
          <div style={{ background: '#fff', padding: '36px 32px 28px 32px', borderRadius: 24, minWidth: 340, maxWidth: 400, boxShadow: '0 4px 32px #b2ebf240', width: '90vw', marginTop: 0 }}>
            <div style={{ fontWeight: 700, fontSize: '1.18rem', marginBottom: 18, color: '#1976d2', letterSpacing: '-0.5px', textAlign: 'center' }}>ÏÑ†ÏÉùÎãòÍªò Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞</div>
            <textarea value={messageText} onChange={e => setMessageText(e.target.value)} style={{ width: '100%', minHeight: 80, borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 10, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box' }} placeholder="Î©îÏãúÏßÄ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" />
            <div style={{ marginTop: 0, textAlign: 'right', display: 'flex', gap: 10, justifyContent: 'flex-end' }}>
              <button onClick={() => { setShowMsgModal(false); setMessageText(''); }} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', transition: 'all 0.2s' }}>Ï∑®ÏÜå</button>
              <button onClick={handleSendMessage} disabled={!messageText.trim()} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', opacity: messageText.trim() ? 1 : 0.5, cursor: messageText.trim() ? 'pointer' : 'not-allowed', transition: 'all 0.2s' }}>Î≥¥ÎÇ¥Í∏∞</button>
            </div>
          </div>
        </div>
      )}
      {showPraiseModal && (
        <div style={{ position: 'fixed', top: 60, left: 0, width: '100vw', height: 'calc(100vh - 60px)', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'flex-start', justifyContent: 'center', zIndex: 1000, paddingTop: 40 }}>
          <div style={{ background: '#fff', padding: '36px 32px 28px 32px', borderRadius: 24, minWidth: 340, maxWidth: 400, boxShadow: '0 4px 32px #b2ebf240', width: '90vw', marginTop: 0 }}>
            <div style={{ fontWeight: 700, fontSize: '1.18rem', marginBottom: 18, color: '#1976d2', letterSpacing: '-0.5px', textAlign: 'center' }}>ÏπúÍµ¨ Ïπ≠Ï∞¨ÌïòÍ∏∞</div>
            <input value={praiseText} onChange={e => setPraiseText(e.target.value)} style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 10, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box' }} placeholder="Ïπ≠Ï∞¨ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" />
            <input type="number" value={praiseExp} onChange={e => setPraiseExp(Number(e.target.value))} min={1} max={100} style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 14, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box' }} placeholder="Ìù¨Îßù Í≤ΩÌóòÏπò" />
            {/* ÏπúÍµ¨ ÏÑ†ÌÉù UI Ï∂îÍ∞Ä */}
            <div style={{ marginBottom: 14 }}>
              <div style={{ fontWeight: 600, fontSize: 16, marginBottom: 8, color: '#1976d2' }}>Ïπ≠Ï∞¨Ìï† ÏπúÍµ¨ ÏÑ†ÌÉù</div>
              {studentsSnapshot && studentsSnapshot.docs.map(doc => {
                const friend = doc.data();
                const friendId = friend.id ? friend.id : doc.id;
                if (friendId === studentId) return null; // ÏûêÍ∏∞ ÏûêÏã† Ï†úÏô∏
                return (
                  <FormControlLabel
                    key={friendId}
                    control={
                      <Checkbox
                        checked={selectedFriends.includes(friendId)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedFriends([...selectedFriends, friendId]);
                          } else {
                            setSelectedFriends(selectedFriends.filter(id => id !== friendId));
                          }
                        }}
                      />
                    }
                    label={friend.name}
                  />
                );
              })}
            </div>
            <div style={{ marginTop: 0, textAlign: 'right', display: 'flex', gap: 10, justifyContent: 'flex-end' }}>
              <button onClick={() => setShowPraiseModal(false)} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', transition: 'all 0.2s' }}>Ï∑®ÏÜå</button>
              <button onClick={handleSendPraise} disabled={!praiseText || selectedFriends.length === 0} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', opacity: praiseText && selectedFriends.length ? 1 : 0.5, cursor: praiseText && selectedFriends.length ? 'pointer' : 'not-allowed', transition: 'all 0.2s' }}>Î≥¥ÎÇ¥Í∏∞</button>
            </div>
          </div>
        </div>
      )}
      {showSelfPraiseModal && (
        <div style={{ position: 'fixed', top: 60, left: 0, width: '100vw', height: 'calc(100vh - 60px)', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'flex-start', justifyContent: 'center', zIndex: 1000, paddingTop: 40 }}>
          <div style={{ background: '#fff', padding: '36px 32px 28px 32px', borderRadius: 24, minWidth: 340, maxWidth: 400, boxShadow: '0 4px 32px #b2ebf240', width: '90vw', marginTop: 0 }}>
            <div style={{ fontWeight: 700, fontSize: '1.18rem', marginBottom: 18, color: '#1976d2', letterSpacing: '-0.5px', textAlign: 'center' }}>ÎÇò Ïπ≠Ï∞¨ÌïòÍ∏∞</div>
            <input value={selfPraiseText} onChange={e => setSelfPraiseText(e.target.value)} style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 10, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box' }} placeholder="Ïπ≠Ï∞¨ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" />
            <input type="number" value={selfPraiseExp} onChange={e => setSelfPraiseExp(Number(e.target.value))} min={1} max={100} style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 14, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box' }} placeholder="Ìù¨Îßù Í≤ΩÌóòÏπò" />
            <div style={{ marginTop: 0, textAlign: 'right', display: 'flex', gap: 10, justifyContent: 'flex-end' }}>
              <button onClick={() => setShowSelfPraiseModal(false)} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', transition: 'all 0.2s' }}>Ï∑®ÏÜå</button>
              <button onClick={handleSendSelfPraise} disabled={!selfPraiseText} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', opacity: selfPraiseText ? 1 : 0.5, cursor: selfPraiseText ? 'pointer' : 'not-allowed', transition: 'all 0.2s' }}>Î≥¥ÎÇ¥Í∏∞</button>
            </div>
          </div>
        </div>
      )}
      {/* Ïú†Î¶¨Î≥ë Î™®Îã¨ */}
      {showJarModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 4000 }}>
          <div style={{ background: '#fff', padding: 32, borderRadius: 48, minWidth: 340, boxShadow: '0 4px 32px #b2ebf240', maxWidth: '90vw', position: 'relative', border: '6px solid #b2ebf2' }}>
            <div style={{ fontWeight: 700, fontSize: '1.5rem', marginBottom: 18, color: '#1976d2', letterSpacing: '-0.5px', textAlign: 'center' }}>ÌïôÍ∏â Ï∫îÎîî Ïú†Î¶¨Î≥ë</div>
            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginBottom: 12 }}>
              {/* ÏÇ¨ÌÉï Í∑∏Î¶¨ÎìúÌòï Î∞∞Ïπò */}
              {(() => {
                const allCandies = [];
                candyCounts.forEach((count, idx) => {
                  for (let i = 0; i < count; i++) {
                    allCandies.push({ img: candyImages[idx], idx });
                  }
                });
                const perRow = 10;
                const numRows = Math.ceil(allCandies.length / perRow);
                return (
                  <div style={{ width: 320, height: 380, marginBottom: 8, display: 'flex', flexDirection: 'column-reverse', justifyContent: 'flex-start', alignItems: 'center', gap: 4 }}>
                    {Array.from({ length: numRows }).map((_, rowIdx) => (
                      <div key={rowIdx} style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-start', alignItems: 'flex-end', gap: 4, minHeight: 36 }}>
                        {Array.from({ length: perRow }).map((_, colIdx) => {
                          const candy = allCandies[rowIdx * perRow + colIdx];
                          return candy ? (
                            <img key={colIdx} src={candy.img} alt={`candy${candy.idx+1}`} style={{ width: 32, height: 32, filter: 'drop-shadow(0 2px 6px #b2ebf2a0)' }} />
                          ) : <div key={colIdx} style={{ width: 32, height: 32 }} />;
                        })}
                      </div>
                    ))}
                  </div>
                );
              })()}
              <div style={{ display: 'flex', gap: 12, marginTop: 2 }}>
                {candyCounts.map((count, idx) => (
                  <div key={idx} style={{ display: 'flex', alignItems: 'center', gap: 4, fontWeight: 600, color: '#1976d2', fontSize: 15 }}>
                    <img src={candyImages[idx]} alt={`candy${idx+1}`} style={{ width: 22, height: 22, marginRight: 2 }} />
                    x{count}
                  </div>
                ))}
              </div>
              <div style={{ color: '#888', fontSize: 13, marginTop: 4 }}>ÌïôÏÉùÎì§Ïù¥ Î†àÎ≤®ÏóÖÌï† ÎïåÎßàÎã§ ÏÇ¨ÌÉïÏù¥ Ïú†Î¶¨Î≥ëÏóê ÏåìÏó¨Ïöî!</div>
            </div>
            <div style={{ textAlign: 'center', marginTop: 18 }}>
              <button onClick={() => setShowJarModal(false)} style={{ fontWeight: 600, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', transition: 'all 0.2s' }}>Îã´Í∏∞</button>
            </div>
          </div>
        </div>
      )}
      {/* Í≤åÏãúÌåê ÏûÖÏû• Î™®Îã¨ */}
      {showBoardModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 3000 }}>
          <div style={{ background: '#fff', padding: 32, borderRadius: 20, minWidth: 320, maxWidth: 400, boxShadow: '0 4px 32px #b2ebf240', textAlign: 'center' }}>
            <div style={{ fontWeight: 700, fontSize: '1.15rem', marginBottom: 18, color: '#1976d2' }}>Í≤åÏãúÌåê ÏΩîÎìú ÏûÖÎ†•</div>
            <input value={boardCodeInput} onChange={e => setBoardCodeInput(e.target.value)} maxLength={8} style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 18, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box', textAlign: 'center', letterSpacing: 2, fontWeight: 600 }} placeholder="ÏΩîÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî" />
            <div style={{ display: 'flex', gap: 10, justifyContent: 'center', marginTop: 8 }}>
              <button onClick={() => setShowBoardModal(false)} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', transition: 'all 0.2s' }}>Ï∑®ÏÜå</button>
              <button onClick={handleEnterBoard} disabled={!boardCodeInput.trim()} style={{ fontWeight: 600, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #b2ebf240', opacity: boardCodeInput.trim() ? 1 : 0.5, cursor: boardCodeInput.trim() ? 'pointer' : 'not-allowed', transition: 'all 0.2s' }}>ÏûÖÏû•</button>
            </div>
          </div>
        </div>
      )}
      {/* Ï∫îÎîîÏàç Î™®Îã¨ */}
      {showShopModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 4000 }}>
          <div style={{ background: '#fff', padding: 40, borderRadius: 32, minWidth: 420, maxWidth: 520, boxShadow: '0 8px 48px #b2ebf240', textAlign: 'center', position: 'relative' }}>
            <button onClick={() => setShowShopModal(false)} style={{ position: 'absolute', top: 18, right: 18, background: 'none', border: 'none', fontSize: 28, color: '#bbb', cursor: 'pointer', fontWeight: 700 }}>√ó</button>
            <div style={{ display: 'flex', justifyContent: 'center', gap: 24, marginBottom: 18 }}>
              <button onClick={() => setShopTab('deposit')} style={{ fontWeight: 700, fontSize: 18, color: shopTab==='deposit' ? '#d72660' : '#888', background: 'none', border: 'none', borderBottom: shopTab==='deposit' ? '3px solid #d72660' : '3px solid #eee', padding: '8px 24px', cursor: 'pointer', transition: 'all 0.2s' }}>ÏûÖÍ∏à</button>
              <button onClick={() => setShopTab('buy')} style={{ fontWeight: 700, fontSize: 18, color: shopTab==='buy' ? '#d72660' : '#888', background: 'none', border: 'none', borderBottom: shopTab==='buy' ? '3px solid #d72660' : '3px solid #eee', padding: '8px 24px', cursor: 'pointer', transition: 'all 0.2s' }}>Íµ¨ÏûÖ</button>
            </div>
            {/* ÎÇ¥ ÏûîÏï° ÌëúÏãú */}
            <div style={{ fontWeight: 800, fontSize: 22, color: '#1976d2', marginBottom: 18, letterSpacing: '-1px' }}>
              ÎÇ¥ ÏûîÏï°: {student?.balance ?? 0}Ïõê
            </div>
            {shopTab === 'deposit' && (
              <div style={{ minHeight: 180, padding: 20 }}>
                <div style={{ fontWeight: 700, fontSize: 20, color: '#1976d2', marginBottom: 18 }}>ÏûÖÍ∏à</div>
                <input type="text" value={depositReason} onChange={e => setDepositReason(e.target.value)} placeholder="ÏûÖÍ∏à ÏÇ¨Ïú†" style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 12, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box', textAlign: 'center', fontWeight: 600 }} />
                <input type="number" value={depositAmount} onChange={e => setDepositAmount(e.target.value)} placeholder="Í∏àÏï°" style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 8, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box', textAlign: 'center', fontWeight: 600 }} />
                {depositError && <div style={{ color: '#d72660', fontWeight: 700, marginTop: 4 }}>{depositError}</div>}
                <button onClick={async () => {
                  if (!depositReason.trim()) {
                    setDepositError('ÏûÖÍ∏à ÏÇ¨Ïú†Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.');
                    return;
                  }
                  if (!depositAmount || isNaN(Number(depositAmount)) || Number(depositAmount) <= 0) return;
                  await updateDoc(doc(db, 'students', studentId), {
                    balance: (student.balance || 0) + Number(depositAmount),
                    transactions: arrayUnion({
                      type: 'deposit',
                      reason: depositReason,
                      amount: Number(depositAmount),
                      ts: Date.now()
                    })
                  });
                  setDepositSuccess(true);
                  setTimeout(() => setDepositSuccess(false), 1200);
                  setDepositReason('');
                  setDepositAmount('');
                  setDepositError('');
                }} disabled={!depositReason.trim() || !depositAmount || isNaN(Number(depositAmount)) || Number(depositAmount) <= 0} style={{ fontWeight: 600, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '10px 32px', fontSize: 17, boxShadow: '0 2px 8px #b2ebf240', cursor: (!depositReason.trim() || !depositAmount || isNaN(Number(depositAmount)) || Number(depositAmount) <= 0) ? 'not-allowed' : 'pointer', opacity: (!depositReason.trim() || !depositAmount || isNaN(Number(depositAmount)) || Number(depositAmount) <= 0) ? 0.5 : 1, marginTop: 8 }}>ÏûÖÍ∏à ÏôÑÎ£å</button>
                {depositSuccess && <div style={{ color: '#43a047', fontWeight: 700, marginTop: 16 }}>ÏûÖÍ∏àÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!</div>}
              </div>
            )}
            {shopTab === 'buy' && (
              <div style={{ minHeight: 180, maxHeight: 540, padding: 0, display: 'flex', flexDirection: 'column', height: '60vh', minWidth: 320 }}>
                <div style={{ fontWeight: 700, fontSize: 20, color: '#1976d2', margin: '18px 0 12px 0', textAlign: 'center' }}>ÏÉÅÌíà Íµ¨ÏûÖ</div>
                <div style={{ flex: 1, overflowY: 'auto', padding: '0 18px', marginBottom: 8, display: 'flex', flexWrap: 'wrap', gap: 18, justifyContent: 'center' }}>
                  {itemsSnapshot && itemsSnapshot.docs.map(doc => {
                    const item = doc.data();
                    const qty = buyQuantities[item.name] || 0;
                    const canBuy = (student?.balance ?? 0) >= item.price;
                    return (
                      <div key={item.name} style={{
                        border: `2px solid ${canBuy ? '#90caf9' : '#ffb6b9'}`,
                        borderRadius: 18,
                        background: canBuy ? '#f7faf7' : '#fff0f0',
                        minWidth: 120,
                        maxWidth: 150,
                        padding: 18,
                        textAlign: 'center',
                        boxShadow: canBuy ? '0 2px 8px #b2ebf240' : '0 2px 8px #ffb6b930',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                      }}>
                        <div style={{ fontWeight: 700, fontSize: 18, color: canBuy ? '#1976d2' : '#d72660', marginBottom: 6 }}>{item.name}</div>
                        <div style={{ color: canBuy ? '#43a047' : '#d72660', fontWeight: 600, fontSize: 16, marginBottom: 10 }}>{item.price}Ïõê</div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginBottom: 8 }}>
                          <button onClick={() => setBuyQuantities(q => ({ ...q, [item.name]: Math.max(0, (q[item.name]||0)-1) }))} style={{ borderRadius: 999, background: canBuy ? '#e0f7fa' : '#ffe4ec', color: canBuy ? '#1976d2' : '#d72660', border: 'none', width: 28, height: 28, fontWeight: 700, fontSize: 18, cursor: 'pointer' }}>-</button>
                          <span style={{ fontWeight: 700, fontSize: 17, minWidth: 18, display: 'inline-block', textAlign: 'center' }}>{qty}</span>
                          <button onClick={() => setBuyQuantities(q => ({ ...q, [item.name]: (q[item.name]||0)+1 }))} style={{ borderRadius: 999, background: canBuy ? '#e0f7fa' : '#ffe4ec', color: canBuy ? '#1976d2' : '#d72660', border: 'none', width: 28, height: 28, fontWeight: 700, fontSize: 18, cursor: 'pointer' }}>+</button>
                        </div>
                        <div style={{ color: canBuy ? '#888' : '#d72660', fontSize: 14, marginBottom: 8 }}>Ìï©Í≥Ñ: {item.price * qty}Ïõê</div>
                      </div>
                    );
                  })}
                  {/* ÏßÅÏ†ëÏûÖÎ†• Ïπ¥Îìú */}
                  <div style={{ border: '2px solid #ffe4ec', borderRadius: 18, background: '#fffde7', minWidth: 120, maxWidth: 150, padding: 18, textAlign: 'center', boxShadow: '0 2px 8px #f8bbd0a0', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: 140 }}>
                    <div style={{ fontWeight: 700, fontSize: 18, color: '#d72660', marginBottom: 10 }}>ÏßÅÏ†ë ÏûÖÎ†•</div>
                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 6, flex: 1 }}>
                      <input type="number" value={buyCustomAmount} onChange={e => setBuyCustomAmount(e.target.value)} placeholder="Í∏àÏï°" style={{ width: 60, borderRadius: 10, border: '1.5px solid #e0f7fa', padding: '6px 10px', fontSize: 15, background: '#fff', color: '#222', textAlign: 'center', fontWeight: 600 }} />
                      <span style={{ color: '#888', fontSize: 15, fontWeight: 600 }}>Ïõê</span>
                    </div>
                  </div>
                </div>
                {/* Ï¥ùÌï©/Íµ¨ÏûÖ Î≤ÑÌäº - ÌïòÎã® Í≥†Ï†ï */}
                <div style={{ position: 'sticky', bottom: 0, left: 0, right: 0, background: '#fff', padding: '18px 0 10px 0', borderTop: '1.5px solid #e0f7fa', zIndex: 10, boxShadow: '0 -2px 8px #b2ebf220', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                  <div style={{ fontWeight: 600, color: '#1976d2', fontSize: 17, marginBottom: 6 }}>
                    Ï¥ùÌï©: {
                      (() => {
                        let sum = 0;
                        if (itemsSnapshot) itemsSnapshot.docs.forEach(doc => {
                          const item = doc.data();
                          sum += (buyQuantities[item.name]||0) * item.price;
                        });
                        sum += Number(buyCustomAmount)||0;
                        return sum;
                      })()
                    } Ïõê
                  </div>
                  <button onClick={async () => {
                    let sum = 0;
                    let itemsObj = {};
                    if (itemsSnapshot) itemsSnapshot.docs.forEach(doc => {
                      const item = doc.data();
                      const qty = buyQuantities[item.name]||0;
                      sum += qty * item.price;
                      if (qty > 0) itemsObj[item.name] = qty;
                    });
                    const custom = Number(buyCustomAmount)||0;
                    sum += custom;
                    if (sum <= 0) {
                      setBuyError('Íµ¨ÏûÖÌï† ÏÉÅÌíàÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.');
                      setBuySuccess('');
                      return;
                    }
                    if ((student.balance||0) < sum) {
                      setBuyError('ÏûîÏï°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§.');
                      setBuySuccess('');
                      return;
                    }
                    await updateDoc(doc(db, 'students', studentId), {
                      balance: (student.balance||0) - sum,
                      transactions: arrayUnion({
                        type: 'spend',
                        items: itemsObj,
                        customAmount: custom,
                        amount: sum,
                        ts: Date.now()
                      })
                    });
                    setBuyError('');
                    setBuySuccess('Íµ¨ÏûÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
                    setBuyQuantities({});
                    setBuyCustomAmount('');
                    setTimeout(() => setBuySuccess(''), 1500);
                  }} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '10px 32px', fontSize: 17, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', marginTop: 4 }}>Íµ¨ÏûÖ</button>
                  {buyError && <div style={{ color: '#d72660', fontWeight: 700, marginTop: 10 }}>{buyError}</div>}
                  {buySuccess && <div style={{ color: '#43a047', fontWeight: 700, marginTop: 10 }}>{buySuccess}</div>}
                </div>
              </div>
            )}
          </div>
        </div>
      )}
      {/* ÏïåÎ¶º Î™®Îã¨ */}
      {showNotificationModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.32)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 6000 }}>
          <div style={{ background: '#fff', borderRadius: 32, padding: 36, minWidth: 340, maxWidth: 420, boxShadow: '0 12px 64px #1976d220', textAlign: 'center', opacity: 0.99, border: '4px solid #1976d2', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <div style={{ fontSize: 28, color: '#1976d2', marginBottom: 18, fontWeight: 900, letterSpacing: '-1.5px', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 10 }}>
              <span role="img" aria-label="bell">üîî</span> ÏïåÎ¶ºÌï®
            </div>
            {/* ÌÉ≠ UI */}
            <div style={{ display: 'flex', gap: 12, marginBottom: 18, flexWrap: 'wrap', justifyContent: 'center' }}>
              {['Î©îÏãúÏßÄ', 'ÌÄòÏä§Ìä∏ ÏäπÏù∏Ïó¨Î∂Ä', 'ÏïåÎûå'].map(tab => (
                <button
                  key={tab}
                  onClick={() => setNotificationTab(tab)}
                  style={{
                    fontWeight: notificationTab === tab ? 700 : 500,
                    borderRadius: 999,
                    background: notificationTab === tab ? '#e0f7fa' : '#f7faf7',
                    color: '#1976d2',
                    border: 'none',
                    padding: '7px 22px',
                    fontSize: 15,
                    boxShadow: '0 2px 8px #b2ebf240',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                  }}
                >
                  {tab}
                </button>
              ))}
            </div>
            {/* ÏïåÎ¶º Î¶¨Ïä§Ìä∏ ÌïÑÌÑ∞ÎßÅ */}
            <div style={{ maxHeight: 320, overflowY: 'auto', width: '100%' }}>
              {(() => {
                if (notificationTab === 'Î©îÏãúÏßÄ') {
                  // Ïò§ÏßÅ ÏÑ†ÏÉùÎãòÏù¥ Î≥¥ÎÇ∏ ÏùºÎ∞ò Î©îÏãúÏßÄÎßå (ÌÄòÏä§Ìä∏/Ïπ≠Ï∞¨ Îì± ÏãúÏä§ÌÖú Î©îÏãúÏßÄ Ï†úÏô∏)
                  const messageList = (student?.messages||[])
                    .filter(m => m.from === 'teacher' && !m.text?.startsWith('ÌÄòÏä§Ìä∏ Ïã§Ìå®') && !m.text?.startsWith('ÌÄòÏä§Ìä∏ ÏÑ±Í≥µ'))
                    .sort((a, b) => b.ts - a.ts);
                  if (messageList.length === 0) return <div style={{ color: '#888', fontSize: 16, margin: '32px 0' }}>ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.</div>;
                  return messageList.map((m, i) => (
                    <div key={i} style={{ background: '#fffde7', borderRadius: 12, padding: '10px 14px', marginBottom: 8, color: '#ff9800', fontWeight: 600, textAlign: 'left', fontSize: 15 }}>{m.text}</div>
                  ));
                } else if (notificationTab === 'ÌÄòÏä§Ìä∏ ÏäπÏù∏Ïó¨Î∂Ä') {
                  // Îã§ÏñëÌïú ÏÑ±Í≥µ/Ïã§Ìå® statusÎ•º Î™®Îëê Ìè¨Ìï®
                  const questList = (student?.quests||[])
                    .filter(q => ['success','done','fail','failed','rejected','reject'].includes((q.status||'').toLowerCase()))
                    .sort((a, b) => b.ts - a.ts);
                  if (questList.length === 0) return <div style={{ color: '#888', fontSize: 16, margin: '32px 0' }}>ÏôÑÎ£åÎêú ÌÄòÏä§Ìä∏ ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.</div>;
                  return questList.map((q, i) => {
                    const isSuccess = ['success','done'].includes((q.status||'').toLowerCase());
                    const isFail = ['fail','failed','rejected','reject'].includes((q.status||'').toLowerCase());
                    return (
                      <div key={i} style={{ background: isSuccess ? '#e0f7fa' : '#ffe4ec', borderRadius: 12, padding: '10px 14px', marginBottom: 8, color: isSuccess ? '#1976d2' : '#d72660', fontWeight: 600, textAlign: 'left', fontSize: 15 }}>
                        {isSuccess ? (
                          <>ÌÄòÏä§Ìä∏ ÏÑ±Í≥µ! <span style={{ color: '#43a047', fontWeight: 700 }}>+{q.exp}xp</span></>
                        ) : (
                          <>ÌÄòÏä§Ìä∏ Ïã§Ìå®: <span style={{ color: '#d72660', fontWeight: 700 }}>{q.failReason || q.reason || 'ÏÇ¨Ïú† ÎØ∏ÏûÖÎ†•'}</span></>
                        )}
                      </div>
                    );
                  });
                } else if (notificationTab === 'ÏïåÎûå') {
                  // announce, notifications, ÏπúÍµ¨ Ïπ≠Ï∞¨(praise), Ïπ≠Ï∞¨ Í≤ΩÌóòÏπò(expEvents) Î™®Îëê Ìï©Ïπ®
                  const praiseAlarms = (student?.praise||[])
                    .filter(p => p.checked && p.result === 'approved' && p.from && p.fromName)
                    .map(p => ({
                      ts: p.ts,
                      text: `üíñ ${p.fromName}ÎãòÏù¥ ÎÇòÎ•º Ïπ≠Ï∞¨ÌñàÏñ¥Ïöî! (${p.text || 'Ïπ≠Ï∞¨'}) +${p.exp||p.amount||0}xp üíñ`
                    }));
                  const expEventsPraise = (student?.expEvents||[])
                    .filter(e => e.type === 'friendPraise' && e.from && e.result === 'approved')
                    .map(e => ({
                      ts: e.ts,
                      text: `üíñ ${e.fromName||e.from||'ÏπúÍµ¨'}ÎãòÏù¥ ÎÇòÎ•º Ïπ≠Ï∞¨ÌñàÏñ¥Ïöî! (${e.text||'Ïπ≠Ï∞¨'}) +${e.exp||e.amount||0}xp üíñ`
                    }));
                  const alarms = [
                    ...(student?.announce||[]),
                    ...(student?.notifications||[]),
                    ...praiseAlarms,
                    ...expEventsPraise
                  ].sort((a, b) => (b.ts||0) - (a.ts||0));
                  if (!alarms || alarms.length === 0) return <div style={{ color: '#888', fontSize: 16, margin: '32px 0' }}>ÏïåÎûå ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.</div>;
                  return alarms.map((a, i) => (
                    <div key={i} style={{ background: '#e3f2fd', borderRadius: 12, padding: '10px 14px', marginBottom: 8, color: '#1976d2', fontWeight: 600, textAlign: 'left', fontSize: 15 }}>{a.text || a.message}</div>
                  ));
                }
                return null;
              })()}
            </div>
            <button onClick={() => setShowNotificationModal(false)} style={{ fontWeight: 700, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '10px 32px', fontSize: 17, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', marginTop: 18 }}>Îã´Í∏∞</button>
          </div>
        </div>
      )}
      {/* Ïø†Ìè∞Ìï® Î™®Îã¨ */}
      {couponBoxOpen && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.32)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 8000 }}>
          <div style={{ background: '#fff', borderRadius: 32, padding: 44, minWidth: 340, maxWidth: 480, boxShadow: '0 12px 64px #f57f1720', textAlign: 'center', opacity: 0.99, border: '4px solid #d72660', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <div style={{ fontSize: 26, color: '#d72660', marginBottom: 18, fontWeight: 900, letterSpacing: '-1.5px', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 10 }}>
              <span role="img" aria-label="coupon">üéüÔ∏è</span> ÎÇ¥ Ïø†Ìè∞Ìï®
            </div>
            {/* ÌÉ≠ UI */}
            <div style={{ display: 'flex', gap: 12, marginBottom: 18 }}>
              <button onClick={() => setCouponTab('unused')} style={{ fontWeight: couponTab === 'unused' ? 700 : 500, borderRadius: 999, background: couponTab === 'unused' ? '#e0f7fa' : '#f7faf7', color: '#1976d2', border: 'none', padding: '7px 22px', fontSize: 15, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', transition: 'all 0.2s' }}>ÏÇ¨Ïö© Ï†Ñ</button>
              <button onClick={() => setCouponTab('used')} style={{ fontWeight: couponTab === 'used' ? 700 : 500, borderRadius: 999, background: couponTab === 'used' ? '#e0f7fa' : '#f7faf7', color: '#1976d2', border: 'none', padding: '7px 22px', fontSize: 15, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', transition: 'all 0.2s' }}>ÏÇ¨Ïö©ÏôÑÎ£å</button>
            </div>
            {/* Ïø†Ìè∞ Î¶¨Ïä§Ìä∏ */}
            {coupons.filter(c => couponTab === 'unused' ? !c.used : c.used).length === 0 ? (
              <div style={{ color: '#888', fontSize: 16, margin: '32px 0' }}>Ìï¥Îãπ Ïø†Ìè∞Ïù¥ ÏóÜÏäµÎãàÎã§.</div>
            ) : (
              <div style={{ display: 'flex', flexDirection: 'column', gap: 12, width: '100%', maxHeight: 320, overflowY: 'auto' }}>
                {coupons.filter(c => couponTab === 'unused' ? !c.used : c.used).map((c, i) => (
                  <div key={i} style={{ display: 'flex', alignItems: 'center', gap: 14, background: '#f7faf7', borderRadius: 12, padding: '10px 18px', boxShadow: '0 2px 8px #b2ebf240', justifyContent: 'space-between' }}>
                    <img src={c.img} alt={c.label} style={{ width: 38, height: 38 }} />
                    <div style={{ flex: 1, textAlign: 'left', fontWeight: 700, color: '#1976d2', fontSize: 16 }}>{c.label}</div>
                    <span style={{ fontWeight: 700, borderRadius: 999, padding: '6px 18px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', background: c.used ? '#eee' : '#e0f7fa', color: c.used ? '#888' : '#1976d2', border: 'none', display: 'inline-block' }}>{c.used ? 'ÏÇ¨Ïö©ÏôÑÎ£å' : 'ÎØ∏ÏÇ¨Ïö©'}</span>
                  </div>
                ))}
              </div>
            )}
            <button onClick={() => setCouponBoxOpen(false)} style={{ fontWeight: 600, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', marginTop: 24 }}>Îã´Í∏∞</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default StudentPage; 