import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useDocument, useCollection } from 'react-firebase-hooks/firestore';
import { doc, updateDoc, arrayUnion, collection, getDocs, query, where, orderBy, onSnapshot, getDoc, addDoc, limit, deleteDoc, setDoc, writeBatch } from 'firebase/firestore';
import { db } from '../firebase';
import { Card, CardContent, Typography, Button, Box, Modal, Chip, Stack, Snackbar, Alert, Badge, IconButton } from '@mui/material';
import CelebrationIcon from '@mui/icons-material/Celebration';
import EmojiEventsIcon from '@mui/icons-material/EmojiEvents';
import NotificationsActiveIcon from '@mui/icons-material/NotificationsActive';
import Checkbox from '@mui/material/Checkbox';
import FormControlLabel from '@mui/material/FormControlLabel';
import StorefrontIcon from '@mui/icons-material/Storefront';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import LinkIcon from '@mui/icons-material/Link';
import MusicNoteIcon from '@mui/icons-material/MusicNote';
import HistoryIcon from '@mui/icons-material/History';
import { auth, googleProvider } from '../firebase';
import { signInWithPopup, signOut } from 'firebase/auth';
import { useAuthState } from 'react-firebase-hooks/auth';
import EmotionAttendanceModal from '../components/EmotionAttendanceModal';
import LearningJournalModal from '../components/LearningJournalModal';
import DataBoardModal from '../components/DataBoardModal';
import { getPokemonName, addAnonymousModeListener, getAnonymousMode } from '../utils/anonymousMode';

// CSS Ïï†ÎãàÎ©îÏù¥ÏÖò Ï†ïÏùò (ÌîºÎ≤ÑÌÉÄÏûÑÏö©)
const feverAnimationCSS = `
  @keyframes feverPulse {
    0% { 
      transform: scale(1); 
      box-shadow: 0 4px 16px rgba(255, 107, 53, 0.6);
    }
    50% { 
      transform: scale(1.05); 
      box-shadow: 0 8px 24px rgba(255, 107, 53, 0.8);
    }
    100% { 
      transform: scale(1); 
      box-shadow: 0 4px 16px rgba(255, 107, 53, 0.6);
    }
  }
  
  @keyframes feverSpin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }
`;

// Ïä§ÌÉÄÏùº ÏöîÏÜå Ï∂îÍ∞Ä
if (typeof document !== 'undefined') {
  const existingStyle = document.getElementById('fever-animations');
  if (!existingStyle) {
    const styleElement = document.createElement('style');
    styleElement.id = 'fever-animations';
    styleElement.textContent = feverAnimationCSS;
    document.head.appendChild(styleElement);
  }
}

const levelImages = [
  '/lv1.png', // ÏïåÏÇ¨ÌÉï
  '/lv2.png', // ÏÉàÏΩ§Ìïú ÏÇ¨ÌÉï
  '/lv3.png', // ÎßâÎåÄÏÇ¨ÌÉï
  '/lv4.png', // Î°§Î¶¨Ìåù
  '/lv5.png', // ÏàòÏ†ú ÏÇ¨ÌÉï
  '/lv6.png', // ÏÇ¨ÌÉï ÎßàÏä§ÌÑ∞
  '/lv7.png', // ÏΩúÎùºÎßõ, Îî∏Í∏∞Îßõ ÎßâÎåÄÏÇ¨ÌÉï ÏÑ∏Ìä∏
  '/lv8.png', // Ïã† Îßõ ÎßâÎåÄÏÇ¨ÌÉï ÏÑ∏Ìä∏
  '/lv9.png', // SUPER Ïã† Îßõ ÎßâÎåÄÏÇ¨ÌÉï ÏÑ∏Ìä∏
  '/lv10.png', // ÌÉ±Í∏ÄÌÉ±Í∏Ä ÏßÄÍµ¨Ï†§Î¶¨
  '/lv11.png', // Î∞òÏßùÎ∞òÏßù Î†àÏù∏Î≥¥Ïö∞ ÏÑ∏Ìä∏
  '/lv12.png', // Ïû†ÎßåÎ≥¥ Ï∫îÎîî ÏÑ∏Ìä∏
];

const LEVELS = [
  'ÏïåÏÇ¨ÌÉï',
  'ÏÉàÏΩ§Ìïú ÏÇ¨ÌÉï',
  'ÎßâÎåÄÏÇ¨ÌÉï',
  'Î°§Î¶¨Ìåù',
  'ÏàòÏ†ú ÏÇ¨ÌÉï',
  'ÏÇ¨ÌÉï ÎßàÏä§ÌÑ∞',
  'ÏΩúÎùºÎßõ, Îî∏Í∏∞Îßõ ÎßâÎåÄÏÇ¨ÌÉï ÏÑ∏Ìä∏',
  'Ïã† Îßõ ÎßâÎåÄÏÇ¨ÌÉï ÏÑ∏Ìä∏',
  'SUPER Ïã† Îßõ ÎßâÎåÄÏÇ¨ÌÉï ÏÑ∏Ìä∏',
  'ÌÉ±Í∏ÄÌÉ±Í∏Ä ÏßÄÍµ¨Ï†§Î¶¨',
  'Î∞òÏßùÎ∞òÏßù Î†àÏù∏Î≥¥Ïö∞ ÏÑ∏Ìä∏',
  'Ïû†ÎßåÎ≥¥ Ï∫îÎîî ÏÑ∏Ìä∏',
];

const LINK_CATEGORIES = [
  { key: 'general', label: 'ÏùºÎ∞ò', color: '#757575' },
  { key: 'video', label: 'üìπ ÎèôÏòÅÏÉÅ', color: '#ff5722' },
  { key: 'document', label: 'üìÑ Î¨∏ÏÑú', color: '#2196f3' },
  { key: 'quiz', label: 'üìù ÌÄ¥Ï¶à', color: '#9c27b0' },
  { key: 'game', label: 'üéÆ Í≤åÏûÑ', color: '#4caf50' },
  { key: 'reference', label: 'üìö Ï∞∏Í≥†ÏûêÎ£å', color: '#ff9800' }
];

const getRequiredExp = (level) => 150 + level * 10;

// ÎÇ†Ïßú Ìè¨Îß∑ Ìï®Ïàò
const formatDate = ts => {
  const d = new Date(ts);
  return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}-${String(d.getDate()).padStart(2,'0')} ${String(d.getHours()).padStart(2,'0')}:${String(d.getMinutes()).padStart(2,'0')}`;
};

const candyImages = [
  '/lv1.png', '/lv2.png', '/lv3.png', '/lv4.png', '/lv5.png', '/lv6.png',
  '/lv7.png', '/lv8.png', '/lv9.png', '/lv10.png', '/lv11.png', '/lv12.png'
];

// ÏãúÍ∞Ñ Ìè¨Îß∑ Ìï®Ïàò (Î™á Î∂Ñ Ï†Ñ, Ïò§Îäò, ÎÇ†Ïßú)
function formatTimeAgo(ts) {
  const now = Date.now();
  const diff = Math.floor((now - ts) / 1000);
  if (diff < 60) return `${diff}Ï¥à Ï†Ñ`;
  if (diff < 3600) return `${Math.floor(diff/60)}Î∂Ñ Ï†Ñ`;
  const d = new Date(ts);
  const today = new Date();
  if (d.toDateString() === today.toDateString()) return `${d.getHours()}:${String(d.getMinutes()).padStart(2,'0')}`;
  return `${d.getFullYear()}-${d.getMonth()+1}-${d.getDate()} ${d.getHours()}:${String(d.getMinutes()).padStart(2,'0')}`;
}

// Î†àÎ≤®ÏóÖ Ïπ¥ÎìúÎΩëÍ∏∞ Î∞è Ïø†Ìè∞Ìï® Î≥¥ÏÉÅ Î™©Î°ù/Ïù¥ÎØ∏ÏßÄ ÏÉÅÏàò Ï∂îÍ∞Ä
const REWARD_LIST = [
  { key: '5money', img: '/5money.png', label: '5Ïõê', prob: 15 },
  { key: '10money', img: '/10money.png', label: '10Ïõê', prob: 10 },
  { key: 'bites', img: '/bites.png', label: 'ÏÇ¨ÏõåÎ∞îÏù¥Ï∏† 1Í∞ú', prob: 10 },
  { key: 'chew2', img: '/chew2.png', label: 'ÎßàÏù¥ÏÆ∏ 2Í∞ú', prob: 20 },
  { key: 'chupa', img: '/chupa.png', label: 'Ï∏ÑÌååÏ∂•Ïä§ 1Í∞ú', prob: 20 },
  { key: 'chupafr', img: '/chupafr.png', label: 'ÏπúÍµ¨ÏóêÍ≤å Ï∏ÑÌååÏ∂•Ïä§ 1Í∞ú ÏÑ†Î¨º', prob: 15 },
  { key: 'bottle', img: '/bottle.png', label: 'Î∞ò ÏπúÍµ¨ Î™®Îëê ÏÉàÏΩ§Îã¨ÏΩ§ 1Í∞ú', prob: 5 },
];
const CARD_BACK_IMAGE = '/cardback.png';

const candyRainImages = [
  '/jian1.png','/jian2.png','/jian3.png','/jian4.png','/jian5.png','/jian6.png',
  '/lv1.png','/lv2.png','/lv3.png','/lv4.png','/lv5.png','/lv6.png',
  '/lv7.png','/lv8.png','/lv9.png','/lv10.png','/lv11.png','/lv12.png',
  '/chupa.png','/chupafr.png','/bottle.png'
];

const StudentPage = () => {
  const { studentId } = useParams();
  const [studentDoc, loading, error] = useDocument(doc(db, 'students', studentId));
  const [studentsSnapshot] = useCollection(collection(db, 'students'));
  const [itemsSnapshot] = useCollection(collection(db, 'items'));
  const student = useMemo(() => {
    return studentDoc?.data() ? { ...studentDoc.data(), id: studentId } : null;
  }, [studentDoc, studentId]);
  const navigate = useNavigate();

  // money ÌïÑÎìúÎ•º balanceÎ°ú ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
  useEffect(() => {
    if (student && student.money !== undefined && student.balance === undefined) {
      console.log('money ÌïÑÎìúÎ•º balanceÎ°ú ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò:', student.money);
      updateDoc(doc(db, 'students', studentId), {
        balance: student.money,
        money: null // money ÌïÑÎìú Ï†úÍ±∞
      }).catch(error => {
        console.error('ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïã§Ìå®:', error);
      });
    }
  }, [student, studentId]);

  // Î†àÎ≤®ÏóÖ Ï≤¥ÌÅ¨ Î∞è ÏàòÏ†ï (Ìïú Î≤àÎßå Ïã§Ìñâ)
  useEffect(() => {
    if (student && student.exp !== undefined && student.level !== undefined) {
      let currentExp = student.exp;
      let currentLevel = student.level;
      let shouldUpdate = false;
      let levelUps = [];
      
      // ÌòÑÏû¨ Î†àÎ≤®ÏóêÏÑú ÌïÑÏöîÌïú Í≤ΩÌóòÏπò Í≥ÑÏÇ∞
      let required = getRequiredExp(currentLevel);
      
      // Î†àÎ≤®ÏóÖÏù¥ ÌïÑÏöîÌïúÏßÄ ÌôïÏù∏
      while (currentExp >= required) {
        currentExp -= required;
        currentLevel += 1;
        shouldUpdate = true;
        levelUps.push({
          type: 'levelUp',
          fromLevel: currentLevel - 1,
          toLevel: currentLevel,
          candyEarned: currentLevel - 1,
          ts: Date.now()
        });
        required = getRequiredExp(currentLevel);
      }
      
      // Î†àÎ≤®ÏóÖÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ ÏóÖÎç∞Ïù¥Ìä∏
      if (shouldUpdate) {
        console.log(`${student.name} Î†àÎ≤®ÏóÖ Ï≤òÎ¶¨: ${student.level} ‚Üí ${currentLevel}, ÎÇ®ÏùÄ Í≤ΩÌóòÏπò: ${currentExp}`);
        updateDoc(doc(db, 'students', studentId), {
          exp: currentExp,
          level: currentLevel,
          expEvents: arrayUnion(...levelUps)
        }).catch(error => {
          console.error('Î†àÎ≤®ÏóÖ Ï≤òÎ¶¨ Ïã§Ìå®:', error);
        });
      }
    }
  }, [student?.exp, student?.level, studentId]);

  // Î™®Îã¨ ÏÉÅÌÉú
  const [showMsgModal, setShowMsgModal] = useState(false);
  const [showPraiseModal, setShowPraiseModal] = useState(false);
  const [showSelfPraiseModal, setShowSelfPraiseModal] = useState(false);
  const [showAlarmModal, setShowAlarmModal] = useState(false);
  const [msgText, setMsgText] = useState('');
  const [praiseText, setPraiseText] = useState('');
  const [praiseExp, setPraiseExp] = useState(10);
  const [selfPraiseText, setSelfPraiseText] = useState('');
  const [selfPraiseExp, setSelfPraiseExp] = useState(10);
  const [expEffect, setExpEffect] = useState(false);
  const [levelUpEffect, setLevelUpEffect] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0);
  const [selectedFriends, setSelectedFriends] = useState([]);
  const [praiseResultEffect, setPraiseResultEffect] = useState(false);
  const [praiseResultMsg, setPraiseResultMsg] = useState('');
  const [questToast, setQuestToast] = useState(false);
  const [prevQuestCount, setPrevQuestCount] = useState(0);
  const [showJarModal, setShowJarModal] = useState(false);
  const [showBoardModal, setShowBoardModal] = useState(false);
  const [boardCodeInput, setBoardCodeInput] = useState('');
  const [showShopModal, setShowShopModal] = useState(false);
  const [shopTab, setShopTab] = useState('deposit');
  const [depositReason, setDepositReason] = useState('');
  const [depositAmount, setDepositAmount] = useState('');
  const [depositSuccess, setDepositSuccess] = useState(false);
  const [buyQuantities, setBuyQuantities] = useState({});
  const [buyCustomAmount, setBuyCustomAmount] = useState('');
  const [buyError, setBuyError] = useState('');
  const [buySuccess, setBuySuccess] = useState('');
  const [depositError, setDepositError] = useState('');
  const [unreadAlarmCount, setUnreadAlarmCount] = useState(0);
  
  // ÏπúÍµ¨ Î©îÏãúÏßÄ Í¥ÄÎ†® ÏÉÅÌÉú
  const [showFriendMessageModal, setShowFriendMessageModal] = useState(false);
  const [friendMessageText, setFriendMessageText] = useState('');
  const [selectedFriendForMessage, setSelectedFriendForMessage] = useState(null);
  const [friendMessages, setFriendMessages] = useState([]);
  
  // Î©îÏãúÏßÄ ÌÜ†ÌÅ∞ Í¥ÄÎ†® ÏÉÅÌÉú
  const [dailyMessageTokens, setDailyMessageTokens] = useState(10);
  
  // ÌïôÏäµÏùºÏßÄ Î™®Îã¨ ÏÉÅÌÉú
  const [showLearningJournalModal, setShowLearningJournalModal] = useState(false);
  const [tokenResetDate, setTokenResetDate] = useState(null);
  const [isSendingMessage, setIsSendingMessage] = useState(false);
  
  // Ïó≠ÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Í¥ÄÎ†® ÏÉÅÌÉú
  const [showHistoryModal, setShowHistoryModal] = useState(false);
  const [historyEntryData, setHistoryEntryData] = useState({
    title: '',
    content: '',
    category: 'Í≥†ÎåÄÏÇ¨',
    period: 'Í≥†Ï°∞ÏÑ†',
    importance: 'Î≥¥ÌÜµ',
    tags: []
  });

  // Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Í¥ÄÎ†® ÏÉÅÌÉú
  const [showRecorderModal, setShowRecorderModal] = useState(false);
  const [recorderTab, setRecorderTab] = useState('progress');
  const [recorderMissions, setRecorderMissions] = useState({});
  
  // Ïã¨Ìôî Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Í¥ÄÎ†® ÏÉÅÌÉú
  const [showRecorderAdvancedModal, setShowRecorderAdvancedModal] = useState(false);
  const [recorderAdvancedTab, setRecorderAdvancedTab] = useState('progress');
  const [recorderMissionsAdvanced, setRecorderMissionsAdvanced] = useState({});
  const [showCelebrationModal, setShowCelebrationModal] = useState(false);
  const [celebrationLevel, setCelebrationLevel] = useState('');
  const [showAdvancedCelebrationModal, setShowAdvancedCelebrationModal] = useState(false);
  const [advancedCelebrationLevel, setAdvancedCelebrationLevel] = useState('');
  


  // Í≥µÏßÄÏÇ¨Ìï≠ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [notices, setNotices] = useState([]);
  const [broadcastNotice, setBroadcastNotice] = useState(null);
  const [showBroadcastModal, setShowBroadcastModal] = useState(false);
  const broadcastTimeoutRef = React.useRef(null);

  // ÏòàÏïΩ ÏïåÎûå Î™®Îã¨ ÏÉÅÌÉú
  const [activeAlarm, setActiveAlarm] = useState(null);
  const [currentDisplayedAlarmId, setCurrentDisplayedAlarmId] = useState(null); // ÌòÑÏû¨ ÌëúÏãú Ï§ëÏù∏ ÏïåÎ¶º ID Ï∂îÏ†Å
  const autoCloseTimerRef = useRef(null); // 1Î∂Ñ ÏûêÎèô Îã´Ìûò ÌÉÄÏù¥Î®∏ Ï∞∏Ï°∞
  const currentDisplayedAlarmIdRef = useRef(null); // ÌòÑÏû¨ ÌëúÏãú Ï§ëÏù∏ ÏïåÎ¶º IDÏùò ref Î≤ÑÏ†Ñ

  // ÏïåÎ¶º Î™®Îã¨ ÏÉÅÌÉú
  const [showNotificationModal, setShowNotificationModal] = useState(false);
  
  // ÌÄ¥Ï¶à Î™®Îã¨ ÏÉÅÌÉú
  const [showQuizModal, setShowQuizModal] = useState(false);
  const [currentQuiz, setCurrentQuiz] = useState(null);
  const [quizAnswer, setQuizAnswer] = useState('');
  const [selectedQuizOption, setSelectedQuizOption] = useState(-1);
  const [showQuizResultModal, setShowQuizResultModal] = useState(false);
  const [quizResultData, setQuizResultData] = useState(null);

  // Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä Î™®Îã¨ ÏÉÅÌÉú
  const [showEmotionAttendanceModal, setShowEmotionAttendanceModal] = useState(false);
  const [hasSubmittedToday, setHasSubmittedToday] = useState(false);

  // Ïò§Îäò Í∞êÏ†ïÏ∂úÏÑù Ï†úÏ∂ú Ïó¨Î∂Ä ÌôïÏù∏
  useEffect(() => {
    const checkTodayEmotionSubmission = async () => {
      if (!student?.id) {
        console.log('üîç Student Ï†ïÎ≥¥Í∞Ä ÏïÑÏßÅ Î°úÎìúÎêòÏßÄ ÏïäÏùå');
        return;
      }
      
      const now = new Date();
      // ÌïúÍµ≠ ÏãúÍ∞Ñ Í∏∞Ï§ÄÏúºÎ°ú ÎÇ†Ïßú Í≥ÑÏÇ∞ (UTC+9)
      const koreaTime = new Date(now.getTime() + (9 * 60 * 60 * 1000));
      const today = koreaTime.toISOString().split('T')[0];
      
      console.log('üåà Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä ÏÉÅÌÉú Ï≤¥ÌÅ¨ ÏãúÏûë', {
        studentId: student.id,
        studentName: student.name,
        currentTime: now.toLocaleString('ko-KR'),
        checkingDate: today
      });

      try {
        // 1. ÏÉàÎ°úÏö¥ Íµ¨Ï°∞ÏóêÏÑú Î®ºÏ†Ä ÌôïÏù∏ (students/{id}/emotions/{date})
        const emotionRef = doc(db, 'students', student.id, 'emotions', today);
        const newStructureSnapshot = await getDoc(emotionRef);
        let hasSubmitted = newStructureSnapshot.exists();
        let dataSource = 'new';
        
        // 2. ÏÉà Íµ¨Ï°∞Ïóê ÏóÜÏúºÎ©¥ Í∏∞Ï°¥ Íµ¨Ï°∞ÏóêÏÑú ÌôïÏù∏ (Ìò∏ÌôòÏÑ±)
        if (!hasSubmitted) {
          const emotionQuery = query(
            collection(db, 'emotionAttendance'),
            where('studentId', '==', student.id),
            where('date', '==', today)
          );
          const oldStructureSnapshot = await getDocs(emotionQuery);
          hasSubmitted = !oldStructureSnapshot.empty;
          dataSource = 'legacy';
        }
        
        console.log('üîç Í∞êÏ†ïÏ∂úÏÑù ÌôïÏù∏ Í≤∞Í≥º:', {
          hasSubmitted,
          status: hasSubmitted ? 'Ï†úÏ∂úÌï®' : 'ÎØ∏Ï†úÏ∂ú',
          dataSource: hasSubmitted ? dataSource : 'none',
          newStructurePath: `students/${student.id}/emotions/${today}`,
          checkTime: new Date().toLocaleString('ko-KR')
        });
        
        setHasSubmittedToday(hasSubmitted);
        
        if (hasSubmitted) {
          console.log(`‚ùå Ïò§ÎäòÏùÄ Ïù¥ÎØ∏ Í∞êÏ†ïÏ∂úÏÑùÏùÑ Ï†úÏ∂úÌñàÏäµÎãàÎã§. (Ï∂úÏ≤ò: ${dataSource === 'new' ? 'ÏÉà Íµ¨Ï°∞' : 'Í∏∞Ï°¥ Íµ¨Ï°∞'})`);
        } else {
          console.log('‚úÖ Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä Î≤ÑÌäºÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥Ïïº Ìï©ÎãàÎã§!');
        }
        
      } catch (error) {
        console.error('‚ùå Í∞êÏ†ïÏ∂úÏÑù ÌôïÏù∏ Ïò§Î•ò:', error);
        setHasSubmittedToday(false);
      }
    };

    // Ï¥àÍ∏∞ Ï≤¥ÌÅ¨
    console.log('üîÑ Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä Ï¥àÍ∏∞ Ï≤¥ÌÅ¨ ÏãúÏûë');
    checkTodayEmotionSubmission();
    
    // ÎÇ†ÏßúÍ∞Ä Î∞îÎÄî Ïàò ÏûàÏúºÎØÄÎ°ú Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Ï≤¥ÌÅ¨ (30Ï¥àÎßàÎã§Î°ú Îã®Ï∂ï)
    const emotionCheckInterval = setInterval(() => {
      console.log('üîÑ Ï†ïÍ∏∞ Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä Ï≤¥ÌÅ¨ (30Ï¥àÎßàÎã§)');
      checkTodayEmotionSubmission();
    }, 30000); // 30Ï¥àÎßàÎã§ Ï≤¥ÌÅ¨

    // ÏûêÏ†ï Ï≤¥ÌÅ¨ - Îã§Ïùå ÏûêÏ†ïÍπåÏßÄÏùò ÏãúÍ∞ÑÏùÑ Í≥ÑÏÇ∞ÌïòÏó¨ Ï†ïÌôïÌûà ÏûêÏ†ïÏóê Ï≤¥ÌÅ¨
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    const msUntilMidnight = tomorrow.getTime() - now.getTime();
    
    console.log('‚è∞ ÏûêÏ†ïÍπåÏßÄ ÎÇ®ÏùÄ ÏãúÍ∞Ñ:', Math.floor(msUntilMidnight / 1000 / 60), 'Î∂Ñ');
    
    const midnightTimeout = setTimeout(() => {
      console.log('üåÖ ÏûêÏ†ïÏù¥ ÎêòÏóàÏäµÎãàÎã§! Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä ÏÉÅÌÉúÎ•º Îã§Ïãú Ï≤¥ÌÅ¨Ìï©ÎãàÎã§.');
      checkTodayEmotionSubmission();
      
      // ÏûêÏ†ï Ïù¥ÌõÑ Îß§Ïùº ÏûêÏ†ïÎßàÎã§ Ï≤¥ÌÅ¨ÌïòÎèÑÎ°ù Ïù∏ÌÑ∞Î≤å ÏÑ§Ï†ï
      const dailyMidnightInterval = setInterval(() => {
        console.log('üåÖ ÏÉàÎ°úÏö¥ ÎÇ†Ïù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§! Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä ÏÉÅÌÉúÎ•º Îã§Ïãú Ï≤¥ÌÅ¨Ìï©ÎãàÎã§.');
        checkTodayEmotionSubmission();
      }, 24 * 60 * 60 * 1000); // 24ÏãúÍ∞ÑÎßàÎã§
      
      return () => {
        clearInterval(dailyMidnightInterval);
      };
    }, msUntilMidnight);

    return () => {
      console.log('üßπ Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä Ï≤¥ÌÅ¨ Ï†ïÎ¶¨');
      clearInterval(emotionCheckInterval);
      clearTimeout(midnightTimeout);
    };
  }, [student?.id]);

  // ÌÄ¥Ï¶à ÏïåÎ¶º ÏàòÏã† (Ïã§ÏãúÍ∞Ñ Î¶¨Ïä§ÎÑà)
  useEffect(() => {
    console.log('ÌÄ¥Ï¶à ÏïåÎ¶º Ïã§ÏãúÍ∞Ñ Î¶¨Ïä§ÎÑà ÏãúÏûë');
    
    const notificationsRef = collection(db, 'copy_notifications');
    const q = query(
      notificationsRef, 
      where('type', '==', 'quiz'),
      where('isActive', '==', true)
    );
    
    // Ïã§ÏãúÍ∞Ñ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
    const unsubscribe = onSnapshot(q, (snapshot) => {
      console.log('üöÄ ÌÄ¥Ï¶à ÏïåÎ¶º Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏:', snapshot.docs.length, 'Í∞ú');
      
      snapshot.docs.forEach(doc => {
        const notification = doc.data();
        const notificationTime = new Date(notification.createdAt).getTime();
        const now = Date.now();
        
        // ÏµúÍ∑º 5Î∂Ñ Ïù¥ÎÇ¥Ïóê ÏÉùÏÑ±Îêú ÏïåÎ¶ºÎßå Ï≤òÎ¶¨ (Ïã§ÏãúÍ∞ÑÏù¥ÎØÄÎ°ú Ïó¨Ïú† ÏãúÍ∞Ñ ÌôïÎåÄ)
        if ((now - notificationTime) < 300000) {
          // targetStudents ÌïÑÎìúÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ Ìï¥Îãπ ÌïôÏÉùÎßå ÎåÄÏÉÅÏù∏ÏßÄ ÌôïÏù∏
          const targetStudents = notification.targetStudents;
          const isTargetedToMe = !targetStudents || 
                                targetStudents.length === 0 || 
                                targetStudents.includes(studentId);
          
          console.log('üéØ ÌÄ¥Ï¶à ÏïåÎ¶º ÎåÄÏÉÅ ÌôïÏù∏:', {
            notificationId: doc.id,
            title: notification.title,
            targetStudents: targetStudents,
            currentStudentId: studentId,
            isTargetedToMe: isTargetedToMe,
            isResend: notification.isResend,
            timeFromCreation: Math.floor((now - notificationTime) / 1000) + 'Ï¥à Ï†Ñ'
          });
          
          if (isTargetedToMe) {
            const seenQuizzes = JSON.parse(localStorage.getItem('seenQuizzes') || '[]');
            
            if (!seenQuizzes.includes(doc.id)) {
              console.log('üéâ ÏÉàÎ°úÏö¥ ÌÄ¥Ï¶à Ï¶âÏãú ÏàòÏã†:', notification.title);
              setCurrentQuiz(notification.quizData);
              setShowQuizModal(true);
              setQuizAnswer('');
              setSelectedQuizOption(-1);
              
              // Î≥∏ ÌÄ¥Ï¶àÎ°ú ÌëúÏãú
              localStorage.setItem('seenQuizzes', JSON.stringify([...seenQuizzes, doc.id]));
              
              // ÏïåÎ¶º ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù (ÏûàÎã§Î©¥)
              try {
                playAlertSound();
              } catch (e) {
                console.log('ÏïåÎ¶º ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù Ïã§Ìå®:', e);
              }
            }
          } else {
            console.log('‚ùå ÌÄ¥Ï¶à ÏïåÎ¶ºÏù¥ ÎÇòÏóêÍ≤å Ìï¥ÎãπÎêòÏßÄ ÏïäÏùå - Î¨¥Ïãú');
          }
        }
      });
    }, (error) => {
      console.error('‚ùå ÌÄ¥Ï¶à ÏïåÎ¶º Î¶¨Ïä§ÎÑà Ïò§Î•ò:', error);
    });

    return () => {
      console.log('üßπ ÌÄ¥Ï¶à ÏïåÎ¶º Î¶¨Ïä§ÎÑà Ï†ïÎ¶¨');
      unsubscribe();
    };
  }, [studentId]);

  // Ï£ºÍ¥ÄÏãù Ï†ïÎãµ Ï≤¥ÌÅ¨ Ìï®Ïàò
  const checkTextAnswer = (studentAnswer, correctAnswers) => {
    if (!correctAnswers) return false;
    
    // #ÏúºÎ°ú Íµ¨Î∂ÑÎêú Ï†ïÎãµÎì§ÏùÑ Î∞∞Ïó¥Î°ú Î≥ÄÌôò
    const answers = correctAnswers.split('#').filter(ans => ans.trim());
    const studentAnswerTrimmed = studentAnswer.trim().toLowerCase();
    
    // Í∞Å Ï†ïÎãµÍ≥º ÎπÑÍµê (ÎåÄÏÜåÎ¨∏Ïûê Î¨¥Ïãú, Í≥µÎ∞± Ï†úÍ±∞)
    return answers.some(answer => 
      answer.trim().toLowerCase() === studentAnswerTrimmed
    );
  };

  // ÌÄ¥Ï¶à ÎãµÏïà Ï†úÏ∂ú
  const handleSubmitQuiz = async () => {
    if (!currentQuiz || !student) return;
    
    let answer = '';
    let isCorrect = false;
    
    if (currentQuiz.type === 'multiple') {
      if (selectedQuizOption === -1) return;
      answer = currentQuiz.options[selectedQuizOption];
      isCorrect = selectedQuizOption === currentQuiz.correctAnswer;
    } else if (currentQuiz.type === 'text') {
      if (!quizAnswer.trim()) return;
      answer = quizAnswer;
      isCorrect = checkTextAnswer(quizAnswer, currentQuiz.textAnswer);
    }

    try {
      await addDoc(collection(db, 'copy_quizResponses'), {
        quizId: currentQuiz.id,
        quizTitle: currentQuiz.title,
        studentName: student.name,
        studentId: studentId,
        answer,
        isCorrect,
        createdAt: new Date().toISOString()
      });

      // Ï†ïÎãµÏùº Í≤ΩÏö∞ Î≥¥ÏÉÅ ÏßÄÍ∏â (Í∞ùÍ¥ÄÏãùÍ≥º Ï£ºÍ¥ÄÏãù Î™®Îëê)
      if (isCorrect) {
        const expGain = currentQuiz.expReward || 0;  // Í∏∞Î≥∏Í∞íÏùÑ 0ÏúºÎ°ú Î≥ÄÍ≤Ω
        const moneyGain = currentQuiz.moneyReward || 0;
        
        const updateData = {};
        
        // Í≤ΩÌóòÏπò Î≥¥ÏÉÅÏù¥ ÏûàÏùÑ ÎïåÎßå ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Î†àÎ≤®ÏóÖ Ï≤òÎ¶¨
        if (expGain > 0) {
          let exp = (student.exp || 0) + expGain;
          let level = student.level || 0;
          let required = getRequiredExp(level);
          let levelUps = [];
          
          // Î†àÎ≤®ÏóÖ Ï≤òÎ¶¨
          while (exp >= required) {
            exp -= required;
            level += 1;
            levelUps.push({
              type: 'levelUp',
              fromLevel: level - 1,
              toLevel: level,
              candyEarned: level - 1,
              ts: Date.now()
            });
            required = getRequiredExp(level);
          }
          
          updateData.exp = exp;
          updateData.level = level;
          
          // Í≤ΩÌóòÏπò Ïù¥Î≤§Ìä∏ Í∏∞Î°ù
          const expEvents = [
            { type: 'exp', amount: expGain, reason: 'ÌÄ¥Ï¶à Ï†ïÎãµ', ts: Date.now() },
            ...levelUps
          ];
          updateData.expEvents = arrayUnion(...expEvents);
        }
        
        // Ïû¨ÏÇ∞ Î≥¥ÏÉÅÏù¥ ÏûàÏùÑ ÎïåÎßå ÏóÖÎç∞Ïù¥Ìä∏ Î∞è ÏûÖÍ∏à ÎÇ¥Ïó≠ Í∏∞Î°ù
        if (moneyGain > 0) {
          const currentBalance = student.balance || 0;
          updateData.balance = currentBalance + moneyGain;
          
          // ÏûÖÍ∏à ÎÇ¥Ïó≠ Í∏∞Î°ù
          const transactionHistory = student.transactionHistory || [];
          const newTransaction = {
            type: 'quiz_reward',
            amount: moneyGain,
            description: `ÌÄ¥Ï¶à Ï†ïÎãµ Î≥¥ÏÉÅ: ${currentQuiz.title}`,
            timestamp: new Date().toISOString(),
            balanceAfter: currentBalance + moneyGain
          };
          updateData.transactionHistory = [...transactionHistory, newTransaction];
        }
        
        // ÏóÖÎç∞Ïù¥Ìä∏Ìï† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏùÑ ÎïåÎßå DB ÏóÖÎç∞Ïù¥Ìä∏
        if (Object.keys(updateData).length > 0) {
          await updateDoc(doc(db, 'students', studentId), updateData);
        }
        
        setQuizResultData({
          isCorrect: true,
          expGain,
          moneyGain,
          message: 'üéâ Ï†ïÎãµÏûÖÎãàÎã§!'
        });
        setShowQuizResultModal(true);
      } else {
        // Ïò§Îãµ Ï≤òÎ¶¨ (Í∞ùÍ¥ÄÏãùÍ≥º Ï£ºÍ¥ÄÏãù Î™®Îëê)
        setQuizResultData({
          isCorrect: false,
          expGain: 0,
          moneyGain: 0,
          message: currentQuiz.type === 'text' 
            ? 'ÏïÑÏâΩÍ≤åÎèÑ ÌãÄÎ†∏ÎÑ§Ïöî.\nÏ†ïÎãµÏùÑ Îã§Ïãú ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî! üí™'
            : 'ÏïÑÏâΩÍ≤åÎèÑ ÌãÄÎ†∏ÎÑ§Ïöî.\nÎã§ÏùåÏóê Îçî Ïó¥Ïã¨Ìûà Ìï¥Î≥¥ÏÑ∏Ïöî! üí™'
        });
        setShowQuizResultModal(true);
      }

      setShowQuizModal(false);
      setCurrentQuiz(null);
      setQuizAnswer('');
      setSelectedQuizOption(-1);
    } catch (error) {
      console.error('ÌÄ¥Ï¶à ÎãµÏïà Ï†úÏ∂ú Ïò§Î•ò:', error);
      alert('ÎãµÏïà Ï†úÏ∂ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // Í¥ëÍ≥† Î™®Îã¨ ÌôïÏù∏ Ïó¨Î∂Ä Ï≤¥ÌÅ¨ Ìï®Ïàò (Í≥µÏßÄÏÇ¨Ìï≠ Í¥ëÍ≥†Ïö©)
  const hasSeenBroadcast = (noticeId, broadcastTime) => {
    try {
      const seen = JSON.parse(localStorage.getItem('seenBroadcastNotices') || '[]');
      return seen.includes(`${noticeId}_${broadcastTime}`);
    } catch {
      return false;
    }
  };
  const markBroadcastAsSeen = (noticeId, broadcastTime) => {
    try {
      const seen = JSON.parse(localStorage.getItem('seenBroadcastNotices') || '[]');
      const key = `${noticeId}_${broadcastTime}`;
      if (!seen.includes(key)) {
        localStorage.setItem('seenBroadcastNotices', JSON.stringify([...seen, key]));
      }
    } catch {}
  };
  // ÏòàÏïΩ ÏïåÎûå ÌôïÏù∏ Ïó¨Î∂Ä Ï≤¥ÌÅ¨ Ìï®Ïàò (Firestore + localStorage Î≥µÌï© ÏÇ¨Ïö©)
  const hasSeenAlarm = (alarmId) => {
    try {
      // 1. localStorageÏóêÏÑú Î®ºÏ†Ä ÌôïÏù∏ (Îπ†Î•∏ ÏùëÎãµ)
      const localSeen = JSON.parse(localStorage.getItem('seenAlarms') || '[]');
      if (localSeen.includes(alarmId)) {
        return true;
      }
      
      // 2. FirestoreÏóêÏÑú ÌôïÏù∏ (ÌïôÏÉù Î¨∏ÏÑúÏùò seenAlarms ÌïÑÎìú)
      if (student?.seenAlarms && student.seenAlarms.includes(alarmId)) {
        // FirestoreÏóê ÏûàÏúºÎ©¥ localStorageÏóêÎèÑ ÎèôÍ∏∞Ìôî
        localStorage.setItem('seenAlarms', JSON.stringify([...localSeen, alarmId]));
        return true;
      }
      
      return false;
    } catch {
      return false;
    }
  };
  
  const markAlarmAsSeen = useCallback(async (alarmId) => {
    try {
      console.log('ÏïåÎ¶º ÌôïÏù∏ ÏÉÅÌÉú Ï†ÄÏû• ÏãúÏûë:', alarmId);
      
      // 1. localStorageÏóê Ï†ÄÏû•
      const seen = JSON.parse(localStorage.getItem('seenAlarms') || '[]');
      if (!seen.includes(alarmId)) {
        localStorage.setItem('seenAlarms', JSON.stringify([...seen, alarmId]));
        console.log('localStorageÏóê ÏïåÎ¶º ÌôïÏù∏ ÏÉÅÌÉú Ï†ÄÏû•:', alarmId);
      }
      
      // 2. FirestoreÏóê Ï†ÄÏû• (ÌïôÏÉù Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏)
      if (studentId && student && (!student?.seenAlarms || !student.seenAlarms.includes(alarmId))) {
        const currentSeenAlarms = student?.seenAlarms || [];
        await updateDoc(doc(db, 'students', studentId), {
          seenAlarms: [...currentSeenAlarms, alarmId],
          lastAlarmSeenTime: Date.now()
        });
        console.log('FirestoreÏóê ÏïåÎ¶º ÌôïÏù∏ ÏÉÅÌÉú Ï†ÄÏû•:', alarmId);
      }
    } catch (error) {
      console.error('ÏïåÎ¶º ÏÉÅÌÉú Ï†ÄÏû• Ïã§Ìå®:', error);
    }
  }, [studentId, student]);

  // Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Í¥ÄÎ†® ÏÉÅÏàòÏôÄ Ìï®ÏàòÎì§
  const RECORDER_STEPS = [
    'tutorial', 'step1', 'step2', 'step3-1', 'step3-2', 
    'step4-1', 'step4-2', 'step5', 'step6-1', 'step6-2', 'step7'
  ];

  const RECORDER_STEP_NAMES = {
    'tutorial': 'ÌäúÌÜ†Î¶¨Ïñº',
    'step1': '1Îã®Í≥Ñ',
    'step2': '2Îã®Í≥Ñ',
    'step3-1': '3Îã®Í≥Ñ(1)',
    'step3-2': '3Îã®Í≥Ñ(2)',
    'step4-1': '4Îã®Í≥Ñ(1)',
    'step4-2': '4Îã®Í≥Ñ(2)',
    'step5': '5Îã®Í≥Ñ',
    'step6-1': '6Îã®Í≥Ñ(1)',
    'step6-2': '6Îã®Í≥Ñ(2)',
    'step7': '7Îã®Í≥Ñ'
  };

  // Ïã¨Ìôî Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Í¥ÄÎ†® ÏÉÅÏàò
  const RECORDER_STEPS_ADVANCED = [
    'advanced1', 'advanced2', 'advanced3', 'advanced4', 'advanced5', 'advanced6'
  ];

  const RECORDER_STEP_NAMES_ADVANCED = {
    'advanced1': 'Ïã¨Ìôî 1Îã®Í≥Ñ',
    'advanced2': 'Ïã¨Ìôî 2Îã®Í≥Ñ',
    'advanced3': 'Ïã¨Ìôî 3Îã®Í≥Ñ',
    'advanced4': 'Ïã¨Ìôî 4Îã®Í≥Ñ',
    'advanced5': 'Ïã¨Ìôî 5Îã®Í≥Ñ',
    'advanced6': 'Ïã¨Ìôî 6Îã®Í≥Ñ'
  };

  const SHEET_MUSIC = {
    'tutorial': `ÌäúÌÜ†Î¶¨Ïñº - Í∏∞Î≥∏ ÏûêÏÑ∏ÏôÄ Ìò∏Ìù°Î≤ïÏùÑ ÏùµÌòÄÎ≥¥ÏÑ∏Ïöî.

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'step1': `1Îã®Í≥Ñ - ÌÉú Ïó∞ÏäµÍ≥°

ÌÉú--- / ÌÉúÌÉú--
ÌÉúÌÉúÌÉúÌÉú / ÌÉú---

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'step2': `2Îã®Í≥Ñ - ÏùåÍ≥Ñ

ÌÉúÌô©Î¨¥ÏûÑÏ§ë / Ï§ëÏûÑÎ¨¥Ìô©ÌÉú
ÌÉúÌô©Î¨¥ÏûÑÏ§ë / Ï§ëÏûÑÎ¨¥Ìô©ÌÉú

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'step3-1': `3Îã®Í≥Ñ(1) - ÎπÑÌñâÍ∏∞

ÌÉúÌô©Î¨¥Ìô© ÌÉúÌÉúÌÉú / Ìô©Ìô©Ìô© ÌÉúÌÉúÌÉú
ÌÉúÌô©Î¨¥Ìô© ÌÉúÌÉúÌÉú/ Ìô©Ìô©ÌÉúÌô© Î¨¥

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'step3-2': `3Îã®Í≥Ñ(2) - ÌïôÍµêÏ¢Ö

_Ï§ëÏ§ëÏûÑÏûÑ Ï§ëÏ§ëÌÉú  
Ï§ëÏ§ëÌÉúÌÉúÌô©-
Ï§ëÏ§ëÏûÑÏûÑ Ï§ëÏ§ëÌÉú
Ï§ëÌÉúÌô©ÌÉú_Î¨¥- 

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'step4-1': `4Îã®Í≥Ñ(1) - ÏÉàÏïºÏÉàÏïº

Ìô©ÏûÑÌÉúÌô© / ÌÉúÌô©ÏûÑÏûÑ / ÌÉú_ÏûÑ_ÌÉúÌÉú / ÌÉúÌô©ÏûÑÏûÑ
Ìô©ÏûÑÌÉúÌô© / ÌÉúÌô©ÏûÑÏûÑ / ÌÉú_ÏûÑ_ÌÉúÌÉú / ÌÉúÌô©ÏûÑÏûÑ

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'step4-2': `4Îã®Í≥Ñ(2) - ÏïÑÎ¶¨Îûë

Ï§ë-ÏûÑÏ§ëÏûÑ / Î¨¥-Ìô©Î¨¥Ìô© / ÌÉú-Ìô©ÌÉúÌô©Î¨¥ÏûÑ / Ï§ë-ÏûÑÏ§ëÏûÑ
Î¨¥-Ìô©Î¨¥Ìô© / ÌÉúÌô©Î¨¥ÏûÑÏ§ëÏûÑ/ Î¨¥-Ìô© Î¨¥ Î¨¥-
_Ï§ë-Ï§ë Ï§ë_-ÌÉúÌô© / ÌÉú-Ìô©ÌÉúÌô©Î¨¥ÏûÑ / Ï§ë-ÏûÑÏ§ëÏûÑ
Î¨¥-Ìô©Î¨¥Ìô© / ÌÉúÌô©Î¨¥ÏûÑÏ§ëÏûÑ / Î¨¥-Ìô© Î¨¥ Î¨¥-

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'step5': `5Îã®Í≥Ñ - Ïò§ÎÇòÎùº

Ìô©ÌÉúÌÉú / ÌÉú-Ìô©Î¨¥ / ÏûÑÎ¨¥Î¨¥ / Î¨¥- -
Ìô©ÌÉúÌÉú / ÌÉú-Ï§ëÌÉú / ÌÉúÌô©ÌÉú / ÌÉú- -
_Ï§ëÏûÑÏûÑ_ / _ÏûÑ-Ï§ë_ÌÉú / ÌÉúÏ§ëÏûÑ/ Ï§ë- -
Ìô©ÌÉúÌÉú / Ìô©-ÌÉúÌÉú / Ìô©ÌÉúÏûÑ / Î¨¥ÏûÑ - -
Ìô©-Î¨¥ÏûÑ / Ìô©-Î¨¥ÏûÑ / Ìô©ÌÉúÎ¨¥ / Ìô©-ÌÉúÏ§ë
_ÏûÑ-Ï§ë_ÌÉú / Ìô©-Î¨¥ÏûÑ / ÏûÑÏ§ëÏûÑ / ÏûÑ- -

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'step6-1': `6Îã®Í≥Ñ(1) - Ï∞∏ÏÉàÎÖ∏Îûò

_ÏûÑ-ÏûÑ-_ÌÉú _ÏûÑ-Î¨¥ÏûÑ_ / _ÏûÑ-Î¨¥-Î¨¥ ÏûÑ-Ï§ë_ÌÉú
_ÏûÑ-ÏûÑ-_ÌÉú _ÏûÑ-Î¨¥ÏûÑ_ / _ÏûÑ-Î¨¥-Î¨¥ ÏûÑ-Ï§ë_ÌÉú

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'step6-2': `6Îã®Í≥Ñ(2) - ÎèÑÎùºÏßÄ

ÌÉúÌÉúÌÉú ÌÉú-Ìô©Î¨¥ / _Ï§ë-ÏûÑÏ§ë_ ÌÉú-Ìô©Î¨¥
Ìô©ÌÉúÌÉú- Ìô©ÌÉúÌô©Î¨¥ÏûÑÏ§ë / ÏûÑÎ¨¥ÏûÑÏ§ë-
ÏûÑ ÏûÑÎ¨¥Ï§ë / ÏûÑ ÏûÑÎ¨¥Ï§ë / Î¨¥Î¨¥Ìô©Î¨¥-Ìô©
ÌÉúÌÉúÌÉú ÌÉú-Ìô©Î¨¥ / _Ï§ë-ÏûÑÏ§ë_ ÌÉú-Ìô©Î¨¥
Ìô©ÌÉúÌÉú- Ìô©ÌÉúÌô©Î¨¥ÏûÑÏ§ë / ÏûÑÎ¨¥ÏûÑÏ§ë-

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'step7': `7Îã®Í≥Ñ - Î∞ÄÏñëÏïÑÎ¶¨Îûë

_ÏûÑÏûÑ- Ï§ëÏûÑÏ§ë_ÌÉú / _ÏûÑÏûÑ- Ï§ëÏûÑÏ§ë_ÌÉú
_ÏûÑ- Ï§ëÏûÑÏ§ë_ÌÉúÌô©ÌÉú _Ï§ë- ÏûÑ_ÌÉú
ÌÉúÌÉú Ìô©-Î¨¥ÏûÑÎ¨¥ / ÌÉúÌÉú- Ìô©-_Ï§ë_ÌÉúÌô©
Î¨¥- Î¨¥Ìô©Î¨¥ ÏûÑ-Ï§ëÏûÑ- Î¨¥ÏûÑ
ÏûÑ-Ï§ëÏûÑ-Î¨¥ÏûÑ / ÏûÑ-Ï§ëÏûÑ-Î¨¥ÏûÑ
_ÏûÑÏûÑ- Ï§ëÏûÑÏ§ë_ÌÉúÌô©ÌÉú _Ï§ë-ÏûÑ_ÌÉú
ÌÉú-Ìô©-Î¨¥ÏûÑÎ¨¥ ÌÉú-Ìô©-_Ï§ë_ÌÉú-Ìô©
Î¨¥- Î¨¥Ìô©Î¨¥ ÏûÑ-Ï§ëÏûÑ-Î¨¥ÏûÑ

Ï∂úÏ≤ò: ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`
  };

  // Ïã¨Ìôî Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò ÏïÖÎ≥¥
  const SHEET_MUSIC_ADVANCED = {
    'advanced1': `Ïã¨Ìôî 1Îã®Í≥Ñ - Í∞ÄÏùÑÏïÑÏπ®

ÌÉúÌÉú_Ï§ëÏ§ë_ / Ìô©-_Ï§ëÏ§ë_ / Ìô©-_Ï§ëÏ§ë_ / Î¨¥Î¨¥ÏûÑÎ¨¥-
ÏûÑÏûÑÎ¨¥Î¨¥ / Ï§ëÏ§ëÎ¨¥Î¨¥/ ÏûÑÏûÑÎ¨¥Ìô© / ÌÉúÌô©Î¨¥Ìô©
ÌÉúÌÉú_Ï§ëÏ§ë_ / Ìô©-_Ï§ëÏ§ë_ / Ìô©Ìô©_Ï§ëÏ§ë_ / Î¨¥Î¨¥ÏûÑÎ¨¥-
ÏûÑÏûÑÎ¨¥Î¨¥ / Ï§ëÏ§ëÎ¨¥Î¨¥/ ÏûÑÏûÑÎ¨¥Ìô© / ÌÉúÌô©Î¨¥Ìô© / Î¨¥-

Ï∂úÏ≤ò : ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'advanced2': `Ïã¨Ìôî 2Îã®Í≥Ñ - ÏÇ¨ÎûëÏùÑ ÌñàÎã§

ÌÉúÌô©Î¨¥ / ÌÉú_Ï§ë_ / ÌÉúÌô©Î¨¥ / ÌÉúÌô©
ÌÉúÌô©Î¨¥ / Ìô©Ìô© / Î¨¥Ìô©Î¨¥ / ÌÉúÎ¨¥
ÌÉúÌô©Î¨¥ / Ìô©Î¨¥ / ÌÉú_Ï§ë_ / ÌÉúÌô©Î¨¥ / ÌÉúÌô©
ÌÉúÌô©Î¨¥ / Ìô©Ìô© / Î¨¥Ìô©Î¨¥ / ÌÉúÎ¨¥
ÌÉúÌô©Î¨¥ / Î¨¥Î¨¥ / _ÏûÑ-Ï§ë_ÌÉú / Ìô©Î¨¥ / ÌÉúÌô©
Î¨¥Î¨¥Î¨¥ / _ÏûÑ-Ï§ë_ÌÉú / Ìô©Î¨¥Ìô©Î¨¥
Î¨¥Î¨¥Î¨¥ / _ÏûÑ-Î¨¥ÏûÑ_ / _ÏûÑÎ¨¥ÏûÑÏ§ë_
Î¨¥Î¨¥Î¨¥ / _ÏûÑ-Ï§ë_ÌÉú / Ìô©Î¨¥Ìô©Î¨¥

Ï∂úÏ≤ò : Ïú†ÌäúÎ∏å Ï±ÑÎÑê ÏãúÏö∞`,
    'advanced3': `Ïã¨Ìôî 3Îã®Í≥Ñ - Îä¥Î¶¨Î¶¨Ïïº

_ÏûÑÏûÑÏûÑÏ§ë_- / _ÏûÑÎ¨¥ÏûÑÏ§ë_-_ÏûÑÏ§ë_
ÌÉúÌÉú / ÌÉúÌÉú_Ï§ë_ÌÉúÌô©Î¨¥ / Ìô©ÌÉúÌô©Î¨¥ÏûÑ-Ï§ë
Î¨¥ / Ï§ëÎ¨¥ÌÉúÌô© / Î¨¥Ìô©Î¨¥ÏûÑÏ§ë-

Ï∂úÏ≤ò : ÌîºÎ¶¨ÌÜ†ÎÅº ÏÑ†ÏÉùÎãò`,
    'advanced4': `Ïã¨Ìôî 4Îã®Í≥Ñ - ÎΩÄÎ°±ÎΩÄÎ°± ÎΩÄÎ°úÎ°ú

‚Äî _Ï§ë_ -ÌÉú-Î¨¥ / Ìô© - ÏûÑ - Ï§ë‚Äì
‚Äî _Ï§ë_ -ÌÉú-Î¨¥ / Ìô© - _ÏûÑ_ - _Ï§ë_‚Äì
_ÏûÑ_-_ÏûÑ_-_ÎÇ®_-- / _Ï§ë_-_Ï§ë_-_ÏûÑ_--
ÌÉú-_ÏûÑ_-ÌÉú-Î¨¥- / ÌÉú-Ìô©-Ìô©‚Äì

Ï∂úÏ≤ò : Ïú†ÌäúÎ∏å Ï±ÑÎÑê ÎäêÎ£®`,
    'advanced5': `Ïã¨Ìôî 5Îã®Í≥Ñ - Ï≤®Î∞ÄÎ∞Ä

ÌÉú _Ï§ëÏûÑ_ÌÉú Î¨¥Ìô©-Î¨¥Ìô©_Ï§ëÏ§ë_ÌÉú
Ìô©Ìô©Ìô©ÌÉúÌô©Î¨¥ÏûÑÏ§ëÎ¨¥  Ìô©ÌÉú-Ìô©ÌÉú_Ï§ëÏ§ë_Ìô©
ÌÉú _Ï§ëÏûÑ_ÌÉú Î¨¥Ìô©-Î¨¥Ìô©_Ï§ëÏ§ë_ÌÉú 
Ìô©Ìô©Ìô©ÌÉúÌô©Î¨¥ÏûÑÏ§ëÎ¨¥  ÌÉúÌô©Î¨¥ÏûÑÏ§ëÎ¨¥
ÌÉú   Ï§ë ÏûÑÎ¨¥Ï§ëÏûÑÎ¨¥
ÌÉú   Ï§ë ÏûÑÎ¨¥Ï§ëÏûÑÎ¨¥ 

Ï∂úÏ≤ò : ÎëêÌÅ¥ÎûòÏä§ TOP40 Îã®ÏÜåÍ≥°Ïßë`,
    'advanced6': `Ïã¨Ìôî 6Îã®Í≥Ñ - ÎπÑÏùµÎ†®Î¶¨

ÌÉú_Ï§ëÏûÑ_ -_Ï§ëÏûÑ_ÌÉú_Ï§ë_
ÌÉú_Ï§ëÏûÑ_ -_Ï§ëÏûÑÎ¨¥Ìô©ÌÉúÎ¨¥_
_Î¨¥Ï§ëÏûÑ_ÌÉú_Ï§ë_Ìô©ÌÉú- Ìô©Î¨¥Ìô©---Ï§ëÌÉú
ÌÉú_Ï§ëÏûÑ_ -_Ï§ëÏûÑ_ÌÉú_Ï§ë_
ÌÉú_Ï§ëÏûÑ_ -_Ï§ëÏûÑÎ¨¥Ìô©ÌÉúÎ¨¥_
_Î¨¥Ï§ëÏûÑ_ÌÉú_Ï§ë_Ìô©ÌÉú- Ìô©Î¨¥Ìô©---Ï§ëÌÉú

Ï∂úÏ≤ò : ÎëêÌÅ¥ÎûòÏä§ TOP40 Îã®ÏÜåÍ≥°Ïßë`
  };

  const fetchRecorderMissions = async () => {
    try {
      const recorderDoc = await getDoc(doc(db, 'settings', 'recorderMissions'));
      if (recorderDoc.exists()) {
        setRecorderMissions(recorderDoc.data());
      }
    } catch (error) {
      console.error('Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
    }
  };

  // Ïã¨Ìôî Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const fetchRecorderMissionsAdvanced = async () => {
    try {
      const recorderAdvancedDoc = await getDoc(doc(db, 'settings', 'recorderMissionsAdvanced'));
      if (recorderAdvancedDoc.exists()) {
        setRecorderMissionsAdvanced(recorderAdvancedDoc.data());
      }
    } catch (error) {
      console.error('Ïã¨Ìôî Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
    }
  };

  const getCompletedSteps = () => {
    if (!recorderMissions[studentId]) return [];
    const completed = [];
    RECORDER_STEPS.forEach(step => {
      if (recorderMissions[studentId][step]) {
        completed.push(step);
      }
    });
    return completed;
  };

  const getHighestCompletedLevel = () => {
    const completed = getCompletedSteps();
    if (completed.length === 0) return null;
    
    // Í∞Å Îã®Í≥ÑÎ•º Î†àÎ≤®Î°ú Î≥ÄÌôòÌïòÍ≥† ÏµúÍ≥† Î†àÎ≤® Ï∞æÍ∏∞
    const levels = completed.map(step => {
      if (step === 'tutorial') return 0;
      if (step === 'step1') return 1;
      if (step === 'step2') return 2;
      if (step.startsWith('step3')) return 3;
      if (step.startsWith('step4')) return 4;
      if (step === 'step5') return 5;
      if (step.startsWith('step6')) return 6;
      if (step === 'step7') return 7;
      return 0;
    });
    
    return Math.max(...levels);
  };

  // Ïã¨Ìôî ÎØ∏ÏÖò Í¥ÄÎ†® Ìï®ÏàòÎì§
  const getCompletedStepsAdvanced = () => {
    if (!recorderMissionsAdvanced[studentId]) return [];
    const completed = [];
    RECORDER_STEPS_ADVANCED.forEach(step => {
      if (recorderMissionsAdvanced[studentId][step]) {
        completed.push(step);
      }
    });
    return completed;
  };

  const getHighestCompletedLevelAdvanced = () => {
    const completed = getCompletedStepsAdvanced();
    if (completed.length === 0) return null;
    
    // Ïã¨Ìôî Îã®Í≥ÑÎ•º Î†àÎ≤®Î°ú Î≥ÄÌôòÌïòÍ≥† ÏµúÍ≥† Î†àÎ≤® Ï∞æÍ∏∞
    const levels = completed.map(step => {
      const match = step.match(/advanced(\d+)/);
      return match ? parseInt(match[1]) : 0;
    });
    
    return Math.max(...levels);
  };

  // 7Îã®Í≥Ñ ÏôÑÎ£å Ïó¨Î∂Ä ÌôïÏù∏ (Ïã¨Ìôî ÎØ∏ÏÖò Ìï¥Í∏à Ï°∞Í±¥)
  const isAdvancedUnlocked = () => {
    return getHighestCompletedLevel() >= 7;
  };

    const handleCelebrationClick = () => {
    setShowCelebrationModal(true);
    setCelebrationLevel(getHighestCompletedLevel());
  };

  // Ïã¨Ìôî Ï∂ïÌïò Î™®Îã¨ ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleAdvancedCelebrationClick = () => {
    setShowAdvancedCelebrationModal(true);
    setAdvancedCelebrationLevel(getHighestCompletedLevelAdvanced());
  };

  // Î∞ëÏ§Ñ Í∑∏Ïñ¥ÏßÑ ÎÜíÏùÄ ÏùåÏùÑ Îπ®Í∞ÑÏÉâÏúºÎ°ú ÌëúÏãúÌïòÎäî Ìï®Ïàò
  const formatSheetMusic = (text) => {
    return text.split(/(_[^_]+_)/g).map((part, index) => {
      if (part.startsWith('_') && part.endsWith('_')) {
        const content = part.slice(1, -1); // ÏñëÏ™Ω _ Ï†úÍ±∞
        return (
          <span 
            key={index} 
            style={{ 
              color: '#ff4444', 
              fontWeight: 'bold' 
            }}
          >
            {content}
          </span>
        );
      }
      return part;
    });
  };
 

  // Ï∂ïÌïò Î™®Îã¨ ÌôïÏù∏ Ï≤òÎ¶¨ Ìï®Ïàò
  const handleCelebrationConfirm = () => {
    setShowCelebrationModal(false);
    // ÏÇ¨Ïö©ÏûêÍ∞Ä Ï∂ïÌïò Î©îÏãúÏßÄÎ•º ÌôïÏù∏ÌñàÏùåÏùÑ localStorageÏóê Ï†ÄÏû•
    localStorage.setItem(`lastCelebrated_${studentId}`, celebrationLevel.toString());
  };

  // Ïã¨Ìôî Ï∂ïÌïò Î™®Îã¨ ÌôïÏù∏ Ï≤òÎ¶¨ Ìï®Ïàò
  const handleAdvancedCelebrationConfirm = () => {
    setShowAdvancedCelebrationModal(false);
    // ÏÇ¨Ïö©ÏûêÍ∞Ä Ïã¨Ìôî Ï∂ïÌïò Î©îÏãúÏßÄÎ•º ÌôïÏù∏ÌñàÏùåÏùÑ localStorageÏóê Ï†ÄÏû•
    localStorage.setItem(`lastAdvancedCelebrated_${studentId}`, advancedCelebrationLevel.toString());
  };

  // ÏÉàÎ°úÏö¥ Îã®Í≥Ñ ÌÜµÍ≥º Ïãú ÏûêÎèô Ï∂ïÌïò Î™®Îã¨ ÌëúÏãú Ï†úÍ±∞ (Ïö∞Ï∏° ÏÉÅÎã® Î≤ÑÌäºÏúºÎ°ú ÌôïÏù∏ Í∞ÄÎä•)

  // Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ïã§ÏãúÍ∞Ñ Í∞êÏßÄ
  useEffect(() => {
    const unsubscribe = onSnapshot(doc(db, 'settings', 'recorderMissions'), (doc) => {
      if (doc.exists()) {
        setRecorderMissions(doc.data());
      }
    }, (error) => {
      console.error('Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Ïã§ÏãúÍ∞Ñ Í∞êÏßÄ Ïã§Ìå®:', error);
      fetchRecorderMissions(); // Ïã§Ìå® Ïãú ÏùºÎ∞ò Î°úÎìúÎ°ú ÎåÄÏ≤¥
    });

    return () => unsubscribe();
  }, []);

  // Ïã¨Ìôî Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Îç∞Ïù¥ÌÑ∞ Ïã§ÏãúÍ∞Ñ Í∞êÏßÄ
  useEffect(() => {
    const unsubscribe = onSnapshot(doc(db, 'settings', 'recorderMissionsAdvanced'), (doc) => {
      if (doc.exists()) {
        setRecorderMissionsAdvanced(doc.data());
      }
    }, (error) => {
      console.error('Ïã¨Ìôî Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Ïã§ÏãúÍ∞Ñ Í∞êÏßÄ Ïã§Ìå®:', error);
      fetchRecorderMissionsAdvanced(); // Ïã§Ìå® Ïãú ÏùºÎ∞ò Î°úÎìúÎ°ú ÎåÄÏ≤¥
    });

    return () => unsubscribe();
  }, []);

  // ÏÉàÎ°úÏö¥ Ïã¨Ìôî Îã®Í≥Ñ ÌÜµÍ≥º Ïãú ÏûêÎèô Ï∂ïÌïò Î™®Îã¨ ÌëúÏãú Ï†úÍ±∞ (Ïö∞Ï∏° ÏÉÅÎã® Î≤ÑÌäºÏúºÎ°ú ÌôïÏù∏ Í∞ÄÎä•)

  // ÏÉàÎ°úÏö¥ ÍµêÏÇ¨ Î©îÏãúÏßÄ Í∞úÏàò Í≥ÑÏÇ∞
  useEffect(() => {
    if (!student) return;
    // ÏùΩÏßÄ ÏïäÏùÄ ÏÑ†ÏÉùÎãò Î©îÏãúÏßÄ
    const teacherMsgs = (student.messages || []).filter(m => m.from === 'teacher');
    const lastRead = student.lastTeacherMsgRead || 0;
    const unreadMsg = teacherMsgs.filter(m => m.ts > lastRead).length;
    // ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎûå(notifications/announce)
    const alarms = ((student.announce||[]).concat(student.notifications||[]));
    // ÏπúÍµ¨ Ïπ≠Ï∞¨ ÏäπÏù∏ ÎÇ¥Ïó≠
    const praiseApproved = (student.praise || []).filter(p => p.checked && p.result === 'approved' && p.from && p.from !== 'student' && p.fromName);
    // expEventsÏùò ÏπúÍµ¨ Ïπ≠Ï∞¨ ÎÇ¥Ïó≠
    const expEventsPraise = (student.expEvents || []).filter(e => e.type === 'friendPraise' && e.from && e.result === 'approved');
    // Î™®Îì† ÏïåÎûåÏùÑ Ìï©Ï≥êÏÑú ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Í∏∞Ï§ÄÏúºÎ°ú Ï§ëÎ≥µ Ï†úÍ±∞
    const allAlarmsWithDuplicates = [...alarms, ...praiseApproved, ...expEventsPraise];
    const allAlarms = allAlarmsWithDuplicates.filter((alarm, index, array) => 
      array.findIndex(a => a.ts === alarm.ts) === index
    );
    const seenAlarms = JSON.parse(localStorage.getItem('seenStudentAlarms')||'[]');
    const unreadAlarms = allAlarms.filter(a => a.ts && !seenAlarms.includes(a.ts)).length;
    
    // ÏπúÍµ¨ Î©îÏãúÏßÄ ÏùΩÏßÄ ÏïäÏùÄ Í∞úÏàò Í≥ÑÏÇ∞
    const unreadFriendMessages = friendMessages.filter(msg => !msg.read).length;
    
    setUnreadCount(unreadMsg + unreadAlarms + unreadFriendMessages);
    setUnreadAlarmCount(unreadAlarms);
  }, [student, friendMessages]);

  // Í≥µÏßÄÏÇ¨Ìï≠ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    const fetchNotices = async () => {
      try {
        const q = query(collection(db, 'notices'), orderBy('updatedAt', 'desc'));
        const snapshot = await getDocs(q);
        const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setNotices(data);
        // Í¥ëÍ≥†Ï§ëÏù∏ Í≥µÏßÄ ÌôïÏù∏ (ÏïÑÏßÅ ÌôïÏù∏ÌïòÏßÄ ÏïäÏùÄ Í≤ÉÎßå, broadcastTimeÍπåÏßÄ Ï≤¥ÌÅ¨)
        const broadcast = data.find(n => n.broadcast && n.broadcastTime && !hasSeenBroadcast(n.id, n.broadcastTime));
        if (broadcast) {
          setBroadcastNotice(broadcast);
          setShowBroadcastModal(true);
          if (broadcastTimeoutRef.current) clearTimeout(broadcastTimeoutRef.current);
        } else {
          setBroadcastNotice(null);
          setShowBroadcastModal(false);
          if (broadcastTimeoutRef.current) clearTimeout(broadcastTimeoutRef.current);
        }
      } catch (e) {
        setNotices([]);
      }
    };
    fetchNotices();
    const interval = setInterval(fetchNotices, 5000); // 5Ï¥àÎßàÎã§ Í∞±Ïã†
    return () => {
      clearInterval(interval);
      if (broadcastTimeoutRef.current) clearTimeout(broadcastTimeoutRef.current);
    };
  }, []);

  // ÏπúÍµ¨ Î©îÏãúÏßÄ Ïã§ÏãúÍ∞Ñ ÏàòÏã†
  useEffect(() => {
    if (!studentId || !student) return;
    
    const actualStudentId = student.id || studentId;
    const q = query(
      collection(db, 'studentMessages'),
      where('toId', '==', actualStudentId),
      orderBy('timestamp', 'desc')
    );
    
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const messages = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      
      // Ï§ëÎ≥µ Î©îÏãúÏßÄ Ï†úÍ±∞ (id Í∏∞Ï§Ä)
      const uniqueMessages = messages.filter((message, index, self) => 
        index === self.findIndex((m) => m.id === message.id)
      );
      
      console.log('ÏπúÍµ¨ Î©îÏãúÏßÄ ÏàòÏã†:', uniqueMessages);
      console.log('ÌòÑÏû¨ studentId:', studentId);
      setFriendMessages(uniqueMessages);
    });
    
    return () => unsubscribe();
  }, [studentId, student]);

  // Î©îÏãúÏßÄ ÌÜ†ÌÅ∞ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Î∞è Í¥ÄÎ¶¨
  useEffect(() => {
    if (!student) return;

    const today = new Date().toDateString(); // Ïò§Îäò ÎÇ†Ïßú Î¨∏ÏûêÏó¥
    const studentTokens = student.dailyMessageTokens || 10;
    const studentResetDate = student.tokenResetDate;

    // ÎÇ†ÏßúÍ∞Ä Î∞îÎÄåÏóàÍ±∞ÎÇò Ï≤òÏùå ÏÑ§Ï†ïÌïòÎäî Í≤ΩÏö∞
    if (!studentResetDate || studentResetDate !== today) {
      // FirebaseÏóêÏÑú ÌÜ†ÌÅ∞ÏùÑ 10Í∞úÎ°ú Î¶¨ÏÖãÌïòÍ≥† ÎÇ†Ïßú ÏóÖÎç∞Ïù¥Ìä∏
      updateDoc(doc(db, 'students', studentId), {
        dailyMessageTokens: 10,
        tokenResetDate: today
      }).then(() => {
        setDailyMessageTokens(10);
        setTokenResetDate(today);
      }).catch(error => {
        console.error('ÌÜ†ÌÅ∞ Î¶¨ÏÖã Ïã§Ìå®:', error);
      });
    } else {
      // Í∞ôÏùÄ ÎÇ†ÏßúÎ©¥ Ï†ÄÏû•Îêú ÌÜ†ÌÅ∞ Ïàò ÏÇ¨Ïö©
      setDailyMessageTokens(studentTokens);
      setTokenResetDate(studentResetDate);
    }
  }, [student, studentId]);

  // Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞
  const handleSendMessage = async () => {
    if (!messageText.trim()) return;
    const studentRef = doc(db, 'students', studentId);
    const newMessages = [...(student.messages || []), {
      from: 'student',
      text: messageText,
      ts: Date.now(),
      replyTo: replyToMessage ? replyToMessage.text : null
    }];
    await updateDoc(studentRef, { messages: newMessages });
    setShowMsgModal(false); // Î©îÏãúÏßÄ Î™®Îã¨ Îã´Í∏∞
    setShowMessageModal(false); // ÎãµÏû• Î™®Îã¨ÎèÑ ÌòπÏãú Ïó¥Î†§ÏûàÏúºÎ©¥ Îã´Í∏∞
    setMessageText(''); // ÏûÖÎ†•Ï∞Ω Ï¥àÍ∏∞Ìôî
    setReplyToMessage(null);
  };

  // ÏπúÍµ¨ Ïπ≠Ï∞¨ÌïòÍ∏∞ (ÍµêÏÇ¨ÏóêÍ≤å ÏöîÏ≤≠)
  const handleSendPraise = async () => {
    if (selectedFriends.length === 0) return;

    setShowPraiseModal(false);
    setPraiseText('');
    setPraiseExp(10);
    setSelectedFriends([]);

    try {
      await Promise.all(selectedFriends.map(friendId => {
        const praiseObj = {
          from: studentId,
          fromName: student.name,
          text: praiseText,
          exp: praiseExp,
          ts: Date.now(),
          checked: false,
          type: 'friendPraise'
        };
        return updateDoc(doc(db, 'students', friendId), {
          praise: arrayUnion(praiseObj)
        });
      }));
      setPraiseResultMsg('ÏπúÍµ¨ÏóêÍ≤å Ïπ≠Ï∞¨ ÏöîÏ≤≠ÏùÑ Î≥¥ÎÉàÏäµÎãàÎã§!');
      setPraiseResultEffect(true);
      setTimeout(() => setPraiseResultEffect(false), 2000);
    } catch (e) {
      setPraiseResultMsg('Ïπ≠Ï∞¨ ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.');
      setPraiseResultEffect(true);
      setTimeout(() => setPraiseResultEffect(false), 2000);
    }
  };

  // ÎÇò Ïπ≠Ï∞¨ÌïòÍ∏∞ (ÍµêÏÇ¨ÏóêÍ≤å ÏöîÏ≤≠)
  const handleSendSelfPraise = async () => {
    await updateDoc(doc(db, 'students', studentId), {
      praise: arrayUnion({ from: 'student', text: selfPraiseText, exp: selfPraiseExp, self: true, ts: Date.now() })
    });
    setShowSelfPraiseModal(false);
    setSelfPraiseText('');
    setSelfPraiseExp(10);
  };

  // ÏπúÍµ¨ Î©îÏãúÏßÄ ÏùΩÏùå Ï≤òÎ¶¨
  const markFriendMessagesAsRead = async () => {
    try {
      const unreadMessages = friendMessages.filter(msg => !msg.read);
      if (unreadMessages.length > 0) {
        // Í∞Å Î©îÏãúÏßÄÎ•º ÏùΩÏùå Ï≤òÎ¶¨
        const batch = writeBatch(db);
        unreadMessages.forEach(msg => {
          const docRef = doc(db, 'studentMessages', msg.id);
          batch.update(docRef, { read: true });
        });
        await batch.commit();
      }
    } catch (error) {
      console.error('Î©îÏãúÏßÄ ÏùΩÏùå Ï≤òÎ¶¨ Ïã§Ìå®:', error);
    }
  };

  // ÏπúÍµ¨ÏóêÍ≤å Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞
  const handleSendFriendMessage = async () => {
    if (!selectedFriendForMessage || !friendMessageText.trim()) return;
    
    // ÌÜ†ÌÅ∞ ÌôïÏù∏
    if (dailyMessageTokens <= 0) {
      setPraiseResultMsg('Ïò§ÎäòÏùò Î©îÏãúÏßÄ ÌÜ†ÌÅ∞ÏùÑ Î™®Îëê ÏÇ¨Ïö©ÌñàÏäµÎãàÎã§! ÎÇ¥Ïùº Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî. üïí');
      setPraiseResultEffect(true);
      setTimeout(() => setPraiseResultEffect(false), 3000);
      return;
    }
    
    try {
      // studentMessages Ïª¨Î†âÏÖòÏóê Î©îÏãúÏßÄ Ï†ÄÏû•
      const actualStudentId = student.id || studentId;
      const messageData = {
        fromId: actualStudentId,
        fromName: student.name,
        toId: selectedFriendForMessage.id,
        toName: selectedFriendForMessage.name,
        message: friendMessageText.trim(),
        timestamp: Date.now(),
        read: false
      };
      
      console.log('Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏãúÏûë:', messageData);
      
      // Ï§ëÎ≥µ Ï†ÑÏÜ° Î∞©ÏßÄÎ•º ÏúÑÌïú Ï∂îÍ∞Ä Ï≤¥ÌÅ¨
      if (isSendingMessage) {
        console.log('Ïù¥ÎØ∏ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï§ë, Ï§ëÎ≥µ Ï†ÑÏÜ° Î∞©ÏßÄ');
        return;
      }
      setIsSendingMessage(true);
      
      const docRef = await addDoc(collection(db, 'studentMessages'), messageData);
      console.log('Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å, Î¨∏ÏÑú ID:', docRef.id);
      
      // ÌÜ†ÌÅ∞ Ï∞®Í∞ê
      const newTokenCount = dailyMessageTokens - 1;
      await updateDoc(doc(db, 'students', studentId), {
        dailyMessageTokens: newTokenCount
      });
      setDailyMessageTokens(newTokenCount);
      
      // ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌëúÏãú (Í∏∞Ï°¥ praiseResult ÏãúÏä§ÌÖú ÌôúÏö©)
      setPraiseResultMsg(`${selectedFriendForMessage.name}ÏóêÍ≤å Î©îÏãúÏßÄÎ•º Î≥¥ÎÉàÏäµÎãàÎã§! üíå (ÎÇ®ÏùÄ ÌÜ†ÌÅ∞: ${newTokenCount}Í∞ú)`);
      setPraiseResultEffect(true);
      setTimeout(() => setPraiseResultEffect(false), 2000);
      
      // Î™®Îã¨ Îã´Í∏∞
      setShowFriendMessageModal(false);
      setSelectedFriendForMessage(null);
      setFriendMessageText('');
      
    } catch (error) {
      console.error('Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®:', error);
      setPraiseResultMsg('Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.');
      setPraiseResultEffect(true);
      setTimeout(() => setPraiseResultEffect(false), 2000);
    } finally {
      setIsSendingMessage(false);
    }
  };

  // Ïó≠ÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
  const handleCreateHistoryEntry = async () => {
    if (!historyEntryData.title.trim() || !historyEntryData.content.trim()) {
      alert('Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      const entryData = {
        ...historyEntryData,
        timestamp: Date.now(),
        studentId: studentId,
        studentName: student.name,
        likes: 0,
        comments: []
      };

      await addDoc(collection(db, 'historyEntries'), entryData);
      setShowHistoryModal(false);
      setHistoryEntryData({
        title: '',
        content: '',
        category: 'Í≥†ÎåÄÏÇ¨',
        period: 'Í≥†Ï°∞ÏÑ†',
        importance: 'Î≥¥ÌÜµ',
        tags: []
      });
      
      // Í≤ΩÌóòÏπò Î≥¥ÏÉÅ
      const expReward = 15;
      await updateDoc(doc(db, 'students', studentId), {
        exp: (student.exp || 0) + expReward,
        expEvents: arrayUnion({
          type: 'historyEntry',
          exp: expReward,
          ts: Date.now(),
          description: 'Ïó≠ÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±'
        })
      });
      
      alert('Ïó≠ÏÇ¨ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§! +15 Í≤ΩÌóòÏπòÎ•º ÌöçÎìùÌñàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('Ïó≠ÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ïã§Ìå®:', error);
      alert('Ïó≠ÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    }
  };

  // ÌÉúÍ∑∏ Ï∂îÍ∞Ä/Ï†úÍ±∞
  const handleHistoryTagChange = (tag) => {
    const currentTags = historyEntryData.tags;
    if (currentTags.includes(tag)) {
      setHistoryEntryData({
        ...historyEntryData,
        tags: currentTags.filter(t => t !== tag)
      });
    } else {
      setHistoryEntryData({
        ...historyEntryData,
        tags: [...currentTags, tag]
      });
    }
  };

  // ÏïåÎûå(Ï¢Ö) ÌÅ¥Î¶≠ Ïãú ÍµêÏÇ¨ Î©îÏãúÏßÄ Î™®Îã¨ + ÏùΩÏùå Ï≤òÎ¶¨
  const handleAlarmClick = async () => {
    setShowNotificationModal(true);
    // ÏÑ†ÏÉùÎãò Î©îÏãúÏßÄ ÏùΩÏùå Ï≤òÎ¶¨
    if (student && (student.messages || []).some(m => m.from === 'teacher')) {
      const teacherMsgs = (student.messages || []).filter(m => m.from === 'teacher');
      const lastTs = teacherMsgs.length > 0 ? teacherMsgs[teacherMsgs.length - 1].ts : 0;
      await updateDoc(doc(db, 'students', studentId), { lastTeacherMsgRead: lastTs });
    }
    // Î™®Îì† ÏïåÎûå ÏùΩÏùå Ï≤òÎ¶¨ - Í∞úÏÑ†
    const alarms = ((student?.announce||[]).concat(student?.notifications||[]));
    alarms.forEach(a => { if (a.ts) markStudentAlarmAsSeen(a.ts); });
    // ÏπúÍµ¨ Ïπ≠Ï∞¨ ÏäπÏù∏ ÎÇ¥Ïó≠ÎèÑ ÏùΩÏùå Ï≤òÎ¶¨
    const praiseApproved = (student?.praise || []).filter(p => p.checked && p.result === 'approved' && p.from && p.from !== 'student' && p.fromName);
    praiseApproved.forEach(p => { if (p.ts) markStudentAlarmAsSeen(p.ts); });
    // expEventsÏùò ÏπúÍµ¨ Ïπ≠Ï∞¨ ÎÇ¥Ïó≠ÎèÑ ÏùΩÏùå Ï≤òÎ¶¨
    const expEventsPraise = (student?.expEvents || []).filter(e => e.type === 'friendPraise' && e.from && e.result === 'approved');
    expEventsPraise.forEach(e => { if (e.ts) markStudentAlarmAsSeen(e.ts); });
    setUnreadCount(0);
    setUnreadAlarmCount(0);
  };

  // Í≤ΩÌóòÏπò/Î†àÎ≤®ÏóÖ Ïù¥ÌéôÌä∏
  React.useEffect(() => {
    if (!student) return;
    let requiredExp = getRequiredExp(student.level - 1);
    if (student.exp === 0 && student.level > 0) {
      setLevelUpEffect(true);
      setTimeout(() => setLevelUpEffect(false), 1200);
    } else {
      setExpEffect(true);
      setTimeout(() => setExpEffect(false), 800);
    }
  }, [student?.exp, student?.level]);

  // Ïπ≠Ï∞¨ ÏäπÏù∏/Í±∞Ï†à Í≤∞Í≥º Ïù¥ÌéôÌä∏ Í∞êÏßÄ
  useEffect(() => {
    if (!student) return;
    // ÎÇ¥Í∞Ä Î≥¥ÎÇ∏ Ïπ≠Ï∞¨ Ï§ë ÏäπÏù∏/Í±∞Ï†àÎêú Í≤É Ï§ë ÏµúÍ∑º 1Í±¥
    const myPraise = (student.praise || []).filter(p => p.from === 'student' && p.checked && p.result && !p.resultNotified);
    if (myPraise.length > 0) {
      const last = myPraise[myPraise.length - 1];
      if (last.result === 'approved') {
        setPraiseResultMsg('Ïπ≠Ï∞¨Ïù¥ ÏäπÏù∏ÎêòÏñ¥ Í≤ΩÌóòÏπòÍ∞Ä ÏßÄÍ∏âÎêòÏóàÏäµÎãàÎã§! üéâ');
      } else if (last.result === 'rejected') {
        setPraiseResultMsg(`Ïπ≠Ï∞¨Ïù¥ Í±∞Ï†àÎêòÏóàÏäµÎãàÎã§. ÏÇ¨Ïú†: ${last.reason}`);
      }
      setPraiseResultEffect(true);
      // resultNotified ÌîåÎûòÍ∑∏ Ï∂îÍ∞Ä(Ï§ëÎ≥µ ÏïåÎ¶º Î∞©ÏßÄ)
      const praiseArr = (student.praise || []).map(p => p.ts === last.ts ? { ...p, resultNotified: true } : p);
      updateDoc(doc(db, 'students', studentId), { praise: praiseArr });
      setTimeout(() => setPraiseResultEffect(false), 2000);
    }
    // [ÌÄòÏä§Ìä∏ ÏäπÏù∏/Ïã§Ìå® Í≤∞Í≥º Ïù¥ÌéôÌä∏ Í∞êÏßÄ Ï∂îÍ∞Ä]
    const myQuest = (student.quests || []).filter(q => (q.status === 'approved' || q.status === 'rejected') && !q.resultNotified);
    if (myQuest.length > 0) {
      const lastQ = myQuest[myQuest.length - 1];
      if (lastQ.status === 'approved') {
        setPraiseResultMsg(`ÌÄòÏä§Ìä∏Í∞Ä ÏäπÏù∏ÎêòÏñ¥ Í≤ΩÌóòÏπò ${lastQ.exp}xpÍ∞Ä ÏßÄÍ∏âÎêòÏóàÏäµÎãàÎã§! üéâ`);
      } else if (lastQ.status === 'rejected') {
        setPraiseResultMsg(`ÌÄòÏä§Ìä∏Í∞Ä Í±∞Ï†àÎêòÏóàÏäµÎãàÎã§. ÏÇ¨Ïú†: ${lastQ.reason || 'ÏóÜÏùå'}`);
      }
      setPraiseResultEffect(true);
      // resultNotified ÌîåÎûòÍ∑∏ Ï∂îÍ∞Ä(Ï§ëÎ≥µ ÏïåÎ¶º Î∞©ÏßÄ)
      const questArr = (student.quests || []).map(q => q.ts === lastQ.ts ? { ...q, resultNotified: true } : q);
      updateDoc(doc(db, 'students', studentId), { quests: questArr });
      setTimeout(() => setPraiseResultEffect(false), 2000);
    }
  }, [student]);

  // Î∞úÌëú ÌöüÏàò Í≥ÑÏÇ∞ (expEventsÏùò type: 'exp'Îßå ÏßëÍ≥Ñ)
  let expEvents = student && Array.isArray(student.expEvents) ? student.expEvents : [];
  const expEventsExp = expEvents.filter(evt => evt.type === 'exp');
  const todayStr = new Date().toISOString().slice(0, 10);
  const todayPresentations = expEventsExp.filter(e => new Date(e.ts).toISOString().slice(0, 10) === todayStr).length;
  const totalPresentations = expEventsExp.length;

  // ÏÉà ÌÄòÏä§Ìä∏ ÎèÑÏ∞© Ïù¥ÌéôÌä∏
  useEffect(() => {
    if (!student) return;
    const questList = Array.isArray(student.quests) ? student.quests : [];
    if (questList.length === 0) return;
    // localStorageÏóêÏÑú Î≥∏ ÌÄòÏä§Ìä∏ ts Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
    let seenQuestTs = [];
    try {
      seenQuestTs = JSON.parse(localStorage.getItem(`seenQuestToast_${studentId}`) || '[]');
    } catch {}
    // ÏïÑÏßÅ Î≥∏ Ï†Å ÏóÜÎäî ÌÄòÏä§Ìä∏(ts) Ï∞æÍ∏∞ (status: ongoingÎßå)
    const newQuest = questList.find(q => q.status === 'ongoing' && !seenQuestTs.includes(q.ts));
    if (newQuest) {
      setQuestToast(true);
      setTimeout(() => setQuestToast(false), 1800);
      // Î≥∏ ÌÄòÏä§Ìä∏Î°ú Í∏∞Î°ù
      try {
        localStorage.setItem(`seenQuestToast_${studentId}`,
          JSON.stringify([...seenQuestTs, newQuest.ts])
        );
      } catch {}
    }
    setPrevQuestCount(questList.length);
  }, [student?.quests, studentId]);

  // ÏßÑÌñâ Ï§ëÏù∏ ÌÄòÏä§Ìä∏ Ï∞æÍ∏∞
  const ongoingQuest = student && Array.isArray(student.quests) ? student.quests.find(q => q.status === 'ongoing') : null;

  // ÌïôÍ∏â ÏÇ¨ÌÉï ÏßëÍ≥Ñ (teacherÏôÄ ÎèôÏùºÌïòÍ≤å level Í∏∞Ï§Ä)
  const candyCounts = [0,0,0,0,0,0];
  if (studentsSnapshot) {
    studentsSnapshot.docs.forEach(doc => {
      const s = doc.data();
      const currentLevel = s.level || 0;
      for (let i = 0; i < currentLevel && i < 6; i++) {
        candyCounts[i]++;
      }
    });
  }

  const handleEnterBoard = () => {
    if (boardCodeInput.trim().length > 0 && student) {
      navigate(`/board/${boardCodeInput.trim().toUpperCase()}?studentId=${studentId}&studentName=${encodeURIComponent(student.name)}`);
      setShowBoardModal(false);
      setBoardCodeInput('');
    }
  };

  // Ï†ÑÍ¥ëÌåê Ïä§ÌÉÄÏùº Í∞úÏÑ†
  const tickerStyle = {
    position: 'fixed',
    top: 0,
    left: 0,
    width: '100vw',
    height: 38,
    background: 'rgba(25, 118, 210, 0.08)',
    color: '#1976d2',
    fontWeight: 700,
    fontSize: 17,
    display: 'flex',
    alignItems: 'center',
    zIndex: 5000,
    overflow: 'hidden',
    pointerEvents: 'none',
    opacity: 0.80,
    backdropFilter: 'blur(2px)',
    borderBottom: '1.5px solid #e3f2fd',
  };
  const tickerTextStyle = {
    whiteSpace: 'nowrap',
    animation: 'ticker 40s linear infinite',
    fontWeight: 700,
    opacity: 0.85,
    letterSpacing: '0.5px',
    textShadow: '0 2px 8px #fff8',
  };

  // ÏûêÎèô Îã´Ìûò Ïã§Ìñâ Ìï®Ïàò (useCallback ÏóÜÏù¥ Îã®ÏàúÌïòÍ≤å)
  const executeAutoClose = async (alarmId) => {
    console.log('===== ÏûêÎèô Îã´Ìûò Ïã§Ìñâ ÏãúÏûë =====', alarmId);
    
    try {
      // 1. Î™®Îã¨ ÏÉÅÌÉúÎì§ Îã´Í∏∞
      console.log('1. Î™®Îã¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...');
      setShowAlarmModal(false);
      setActiveAlarm(null);
      setCurrentDisplayedAlarmId(null);
      currentDisplayedAlarmIdRef.current = null; // refÎèÑ Ìï®Íªò Ï¥àÍ∏∞Ìôî
      console.log('2. Î™®Îã¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
      
      // 2. ÏïåÎ¶º ÌôïÏù∏ ÏÉÅÌÉú Ï†ÄÏû•
      console.log('3. ÏïåÎ¶º ÌôïÏù∏ ÏÉÅÌÉú Ï†ÄÏû• Ï§ë...');
      await markAlarmAsSeen(alarmId);
      console.log('4. ÏïåÎ¶º ÌôïÏù∏ ÏÉÅÌÉú Ï†ÄÏû• ÏôÑÎ£å');
      
      console.log('===== ÏûêÎèô Îã´Ìûò Ïã§Ìñâ ÏôÑÎ£å =====', alarmId);
    } catch (error) {
      console.error('ÏûêÎèô Îã´Ìûò Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
    }
  };

  // 1Î∂Ñ ÏûêÎèô Îã´Ìûò ÌÉÄÏù¥Î®∏ ÏãúÏûë Ìï®Ïàò
  const startAutoCloseTimer = useCallback((alarmId) => {
    // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏Í∞Ä ÏûàÎã§Î©¥ ÌÅ¥Î¶¨Ïñ¥
    if (autoCloseTimerRef.current) {
      clearTimeout(autoCloseTimerRef.current);
    }
    
    console.log('1Î∂Ñ ÏûêÎèô Îã´Ìûò ÌÉÄÏù¥Î®∏ ÏãúÏûë:', alarmId);
    autoCloseTimerRef.current = setTimeout(() => {
      executeAutoClose(alarmId);
      autoCloseTimerRef.current = null;
    }, 60000); // 60Ï¥à = 1Î∂Ñ
  }, []);

  // ÏûêÎèô Îã´Ìûò ÌÉÄÏù¥Î®∏ Ï§ëÎã® Ìï®Ïàò
  const stopAutoCloseTimer = useCallback(() => {
    if (autoCloseTimerRef.current) {
      console.log('ÏûêÎèô Îã´Ìûò ÌÉÄÏù¥Î®∏ Ï§ëÎã®');
      clearTimeout(autoCloseTimerRef.current);
      autoCloseTimerRef.current = null;
    }
  }, []);

  // ÏòàÏïΩ ÏïåÎûå Í∞êÏßÄ useEffect (ÏùòÏ°¥ÏÑ± ÏµúÏÜåÌôîÌïòÏó¨ ÌÉÄÏù¥Î®∏ Ï§ëÎã® Î∞©ÏßÄ)
  useEffect(() => {
    let interval;
    
    const checkAlarms = async () => {
      try {
        const q = query(collection(db, 'alarms'), where('isActive', '==', true), orderBy('targetTime', 'desc'));
        const snap = await getDocs(q);
        const now = Date.now();
        const alarms = snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        
        // ÏòàÏïΩ ÏãúÍ∞ÑÏù¥ ÎèÑÎã¨ÌñàÍ≥† ÏïÑÏßÅ Î≥¥ÏßÄ ÏïäÏùÄ ÏïåÎ¶º Ï∞æÍ∏∞
        const active = alarms.find(alarm => !hasSeenAlarm(alarm.id) && now >= alarm.targetTime);
        
        // ÏÉàÎ°úÏö¥ ÏïåÎ¶ºÏù¥Í≥† ÌòÑÏû¨ ÌëúÏãú Ï§ëÏù∏ ÏïåÎ¶ºÍ≥º Îã§Î•∏ Í≤ΩÏö∞ÏóêÎßå ÌëúÏãú
        if (active && currentDisplayedAlarmIdRef.current !== active.id) {
          console.log('ÏòàÏïΩ ÏïåÎ¶º ÌëúÏãú:', active.id, active.content);
          setActiveAlarm(active);
          setShowAlarmModal(true);
          setCurrentDisplayedAlarmId(active.id);
          currentDisplayedAlarmIdRef.current = active.id; // refÎèÑ Ìï®Íªò ÏóÖÎç∞Ïù¥Ìä∏
          
          // 1Î∂Ñ ÌõÑ ÏûêÎèô Îã´Ìûò ÌÉÄÏù¥Î®∏ ÏãúÏûë
          startAutoCloseTimer(active.id);
        }
      } catch (error) {
        console.error('ÏïåÎ¶º ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error);
      }
    };
    
    checkAlarms();
    interval = setInterval(checkAlarms, 5000);
    
    // cleanup Ìï®ÏàòÏóêÏÑúÎäî intervalÎßå Ï†ïÎ¶¨ (ÌÉÄÏù¥Î®∏Îäî Í±¥ÎìúÎ¶¨ÏßÄ ÏïäÏùå)
    return () => {
      clearInterval(interval);
    };
  }, []); // ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ÏùÑ ÎπÑÏõåÏÑú Ìïú Î≤àÎßå Ïã§ÌñâÎêòÎèÑÎ°ù Ìï®

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ ÏãúÏóêÎßå ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      stopAutoCloseTimer();
    };
  }, [stopAutoCloseTimer]);

  // Ìö®Í≥ºÏùå Ïû¨ÏÉù Ìï®Ïàò
  const playAlertSound = () => {
    try {
      const audio = new window.Audio('/alert.mp3');
      // ÏÇ¨Ïö©Ïûê Ï†úÏä§Ï≤ò ÏóÜÏù¥Îäî Ïû¨ÏÉùÎêòÏßÄ ÏïäÏùÑ Ïàò ÏûàÏúºÎØÄÎ°ú PromiseÎ•º Ï≤òÎ¶¨
      const playPromise = audio.play();
      if (playPromise !== undefined) {
        playPromise.catch(() => {
          // ÏûêÎèô Ïû¨ÏÉùÏù¥ Ï∞®Îã®Îêú Í≤ΩÏö∞ Ï°∞Ïö©Ìûà Ï≤òÎ¶¨
        });
      }
    } catch (e) {
      // Ìö®Í≥ºÏùå Ïû¨ÏÉù Ïã§Ìå® Ïãú Ï°∞Ïö©Ìûà Ï≤òÎ¶¨
    }
  };

  // ÏòàÏïΩ ÏïåÎûå Î™®Îã¨ Ìö®Í≥ºÏùå/ÏßÑÎèô useEffect
  useEffect(() => {
    if (activeAlarm && showAlarmModal) {
      // ÏÇ¨Ïö©Ïûê Ï†úÏä§Ï≤ò ÌõÑÏóêÎßå ÏßÑÎèô/Ìö®Í≥ºÏùå Ïû¨ÏÉù
      const playEffects = () => {
        try {
          playAlertSound();
        } catch (e) {
          // Ïò§ÎîîÏò§ Ïû¨ÏÉù Ïã§Ìå® Ïãú Ï°∞Ïö©Ìûà Ï≤òÎ¶¨
        }
                 try {
           if (window.navigator && window.navigator.vibrate && typeof window.navigator.vibrate === 'function') {
             window.navigator.vibrate([120,80,120]);
           }
         } catch (e) {
           // ÏßÑÎèô Ïã§Ìå® Ïãú Ï°∞Ïö©Ìûà Ï≤òÎ¶¨
         }
      };
      
      // Ï¶âÏãú Ïã§ÌñâÌïòÎêò ÏóêÎü¨Îäî Ï°∞Ïö©Ìûà Ï≤òÎ¶¨
      playEffects();
    }
  }, [activeAlarm, showAlarmModal]);

  // Í¥ëÍ≥†(Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏) Î™®Îã¨ Ìö®Í≥ºÏùå/ÏßÑÎèô useEffect
  useEffect(() => {
    if (broadcastNotice && showBroadcastModal) {
      try {
        playAlertSound();
      } catch (e) {
        // Ïò§ÎîîÏò§ Ïû¨ÏÉù Ïã§Ìå® Ïãú Ï°∞Ïö©Ìûà Ï≤òÎ¶¨
      }
             try {
         if (window.navigator && window.navigator.vibrate && typeof window.navigator.vibrate === 'function') {
           window.navigator.vibrate([120, 80, 120]);
         }
       } catch (e) {
         // ÏßÑÎèô Ïã§Ìå® Ïãú Ï°∞Ïö©Ìûà Ï≤òÎ¶¨
       }
    }
  }, [broadcastNotice, showBroadcastModal]);

  // ÏòàÏïΩ ÏïåÎûå Î™®Îã¨ ÏßÑÎèô Î∞òÎ≥µ (ÎûúÎç§ Ìå®ÌÑ¥, ÎûúÎç§ Î∞òÎ≥µÏ£ºÍ∏∞)
  useEffect(() => {
    let vibrateTimeout;
    function randomVibrateLoop() {
      if (!(activeAlarm && showAlarmModal)) return;
      // ÏßÑÎèô Ìå®ÌÑ¥: 3~7Ìöå, Í∞Å ÏßÑÎèô 50~200ms, Í∞ÑÍ≤© 30~120ms
      const count = Math.floor(Math.random() * 5) + 3;
      const pattern = [];
      for (let i = 0; i < count; i++) {
        pattern.push(Math.floor(Math.random() * 150) + 50); // ÏßÑÎèô
        if (i < count - 1) pattern.push(Math.floor(Math.random() * 90) + 30); // Ïâº
      }
              try {
          if (window.navigator && window.navigator.vibrate && typeof window.navigator.vibrate === 'function') {
            window.navigator.vibrate(pattern);
          }
        } catch (e) {
          // ÏßÑÎèô Í∏∞Îä•Ïù¥ Ï∞®Îã®ÎêòÏñ¥ÎèÑ Î¨¥Ïãú
        }
      // Îã§Ïùå Î∞òÎ≥µÍπåÏßÄ ÎåÄÍ∏∞ÏãúÍ∞Ñ: 0.7~1.7Ï¥à ÎûúÎç§
      const next = Math.floor(Math.random() * 1000) + 700;
      vibrateTimeout = setTimeout(randomVibrateLoop, next);
    }
    if (activeAlarm && showAlarmModal) {
      randomVibrateLoop();
    }
    return () => {
      if (vibrateTimeout) clearTimeout(vibrateTimeout);
      try {
        if (window.navigator && window.navigator.vibrate && typeof window.navigator.vibrate === 'function') {
          window.navigator.vibrate(0);
        }
      } catch (e) {
        // ÏßÑÎèô Í∏∞Îä•Ïù¥ Ï∞®Îã®ÎêòÏñ¥ÎèÑ Î¨¥Ïãú
      }
    };
  }, [activeAlarm, showAlarmModal]);

  // ÏïåÎ¶º Î™®Îã¨ ÏÉÅÌÉú Í≥ÑÏÇ∞
  const unreadTeacherMessages = (student?.messages || []).filter(m => m.from === 'teacher' && (!student.lastTeacherMsgRead || m.ts > student.lastTeacherMsgRead));
  const unreadQuests = (student?.quests || []).filter(q => !q.read);

  const allNotifications = [
    // Î∞úÌëú Ïù¥Î≤§Ìä∏
    ...(student?.expEvents||[]).map(e => ({
      type: e.type === 'exp' ? 'presentation' : e.type === 'quest' ? 'quest-exp' : e.type,
      text: e.type === 'exp' ? `Î∞úÌëú Í≤ΩÌóòÏπò +${e.amount}` : e.type === 'quest' ? `ÌÄòÏä§Ìä∏ Î≥¥ÏÉÅ +${e.amount}xp (${e.text||''})` : '',
      ts: e.ts
    })),
    // ÍµêÏÇ¨ Î©îÏãúÏßÄ
    ...(student?.messages||[]).filter(m=>m.from==='teacher').map(m => ({
      type: 'teacher-message',
      text: m.text,
      ts: m.ts
    })),
    // ÌÄòÏä§Ìä∏ ÎÇ¥Ïó≠
    ...(student?.quests||[]).map(q => ({
      type: q.status === 'approved' ? 'quest-approved' : q.status === 'rejected' ? 'quest-rejected' : 'quest',
      text: q.status === 'approved' ? `ÌÄòÏä§Ìä∏ ÏäπÏù∏: ${q.text} (+${q.exp}xp)` : q.status === 'rejected' ? `ÌÄòÏä§Ìä∏ Ïã§Ìå®: ${q.text} (Î≥¥ÏÉÅ: 0xp${q.reason ? ', ÏÇ¨Ïú†: ' + q.reason : ''})` : `ÌÄòÏä§Ìä∏: ${q.text} (Î≥¥ÏÉÅ: ${q.exp}xp)` ,
      ts: q.ts
    })),
    // ÌÄòÏä§Ìä∏ ÏäπÏù∏/Í±∞Ï†à Í≤∞Í≥º Î©îÏãúÏßÄ(ÎÇ¥Í∞Ä Î≥¥ÎÇ∏ ÌÄòÏä§Ìä∏ ÏöîÏ≤≠ Í≤∞Í≥º)
    ...(student?.praise||[]).filter(p=>p.checked && p.result).map(p => ({
      type: p.result==='approved' ? 'praise-approved' : 'praise-rejected',
      text: p.result==='approved' ? `Ïπ≠Ï∞¨ ÏäπÏù∏: ${p.text} (+${p.exp}xp)` : `Ïπ≠Ï∞¨ Í±∞Ï†à: ${p.text} (ÏÇ¨Ïú†: ${p.reason||'ÏóÜÏùå'})`,
      ts: p.ts
    }))
  ].filter(n=>n.text).sort((a,b)=>b.ts-a.ts);

  const [lastNotificationRead, setLastNotificationRead] = useState(() => Number(localStorage.getItem('lastNotificationRead') || 0));

  // Ïπ¥ÎìúÎΩëÍ∏∞/Ïø†Ìè∞Ìï® ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [showCardModal, setShowCardModal] = useState(false);
  const [cardChoices, setCardChoices] = useState([]); // 3Ïû• Î≥¥ÏÉÅ ÌõÑÎ≥¥
  const [cardResult, setCardResult] = useState(null); // ÎΩëÏùÄ Î≥¥ÏÉÅ
  const [cardEffect, setCardEffect] = useState(false);
  const [selectedCardIndex, setSelectedCardIndex] = useState(null); // ÏÑ†ÌÉùÎêú Ïπ¥Îìú Ïù∏Îç±Ïä§
  const [couponBoxOpen, setCouponBoxOpen] = useState(false);
  const [coupons, setCoupons] = useState([]); // Firestore Ïø†Ìè∞Ìï® ÎÇ¥Ïó≠
  const [levelRewardDrawn, setLevelRewardDrawn] = useState({}); // FirestoreÏóêÏÑú Í¥ÄÎ¶¨

  // FirestoreÏóêÏÑú Ïø†Ìè∞Ìï®, Î†àÎ≤®ÏóÖ ÎΩëÍ∏∞ ÏôÑÎ£å Ïó¨Î∂Ä Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ
  useEffect(() => {
    if (!studentId) return;
    const unsub = onSnapshot(doc(db, 'students', studentId), (snap) => {
      const data = snap.data();
      setCoupons(data?.coupons || []);
      setLevelRewardDrawn(data?.levelRewardDrawn || {});
    });
    return () => unsub();
  }, [studentId]);

  // Ïø†Ìè∞ ÏÇ¨Ïö© Ï≤òÎ¶¨ Ìï®Ïàò (Firestore Î∞òÏòÅ)
  const handleUseCoupon = async (coupon) => {
    if (coupon.used) return;
    // Î≥¥ÏÉÅ ÏßÄÍ∏â Î°úÏßÅ (Í∏∞Ï°¥Í≥º ÎèôÏùº)
    if (coupon.key === '5money' || coupon.key === '10money') {
      const amount = coupon.key === '5money' ? 5 : 10;
      await updateDoc(doc(db, 'students', studentId), {
        balance: (student.balance || 0) + amount,
        transactions: arrayUnion({
          type: 'deposit',
          reason: 'Î†àÎ≤®ÏóÖ Î≥¥ÏÉÅ',
          amount: amount,
          ts: Date.now()
        })
      });
    } else if (coupon.key === 'bites' || coupon.key === 'chew2' || coupon.key === 'chupa') {
      const itemName = coupon.key === 'bites' ? 'ÏÇ¨ÏõåÎ∞îÏù¥Ï∏†' : coupon.key === 'chew2' ? 'ÎßàÏù¥ÏÆ∏' : 'Ï∏ÑÌååÏ∂•Ïä§';
      const quantity = coupon.key === 'chew2' ? 2 : 1;
      await updateDoc(doc(db, 'students', studentId), {
        items: arrayUnion({
          name: itemName,
          quantity: quantity,
          ts: Date.now()
        })
      });
    } else if (coupon.key === 'chupafr' || coupon.key === 'bottle') {
      await updateDoc(doc(db, 'students', studentId), {
        messages: arrayUnion({
          from: 'system',
          text: coupon.key === 'chupafr' ? 'ÏπúÍµ¨ÏóêÍ≤å Ï∏ÑÌååÏ∂•Ïä§ 1Í∞úÎ•º ÏÑ†Î¨ºÌñàÏäµÎãàÎã§!' : 'Î∞ò ÏπúÍµ¨ Î™®ÎëêÏóêÍ≤å ÏÉàÏΩ§Îã¨ÏΩ§ 1Í∞úÎ•º ÏÑ†Î¨ºÌñàÏäµÎãàÎã§!',
          ts: Date.now()
        })
      });
    }
    // Firestore Ïø†Ìè∞ used Ï≤òÎ¶¨
    const updatedCoupons = coupons.map(c => c.ts === coupon.ts ? { ...c, used: true } : c);
    await updateDoc(doc(db, 'students', studentId), { coupons: updatedCoupons });
  };

  // Firestore Í∏∞Î∞ò Î†àÎ≤®ÏóÖ Î≥¥ÏÉÅ ÎΩëÍ∏∞ ÏôÑÎ£å Ïó¨Î∂Ä
  const hasDrawnLevelReward = (level) => {
    return !!levelRewardDrawn[level];
  };
  const markLevelRewardAsDrawn = async (level) => {
    await updateDoc(doc(db, 'students', studentId), {
      levelRewardDrawn: { ...levelRewardDrawn, [level]: true }
    });
  };

  // 1. Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Ìï®Ïàò (studentId Í∏∞Î∞ò)
  const getLocalLevelRewardDrawn = (level) => {
    try {
      const drawn = JSON.parse(localStorage.getItem(`levelRewardDrawn_${studentId}`) || '{}');
      return !!drawn[level];
    } catch {
      return false;
    }
  };
  const setLocalLevelRewardDrawn = (level) => {
    try {
      const drawn = JSON.parse(localStorage.getItem(`levelRewardDrawn_${studentId}`) || '{}');
      drawn[level] = true;
      localStorage.setItem(`levelRewardDrawn_${studentId}`, JSON.stringify(drawn));
    } catch {}
  };
  // 2. Firestore + localStorage Îëò Îã§ ÌôïÏù∏
  const hasDrawnLevelRewardAll = (level) => {
    return hasDrawnLevelReward(level) || getLocalLevelRewardDrawn(level);
  };
  // 3. mark Ìï®ÏàòÎèÑ Îëò Îã§ ÏóÖÎç∞Ïù¥Ìä∏
  const markLevelRewardAsDrawnAll = async (level) => {
    setLocalLevelRewardDrawn(level);
    await updateDoc(doc(db, 'students', studentId), {
      levelRewardDrawn: { ...levelRewardDrawn, [level]: true }
    });
  };
  // 4. Î°úÎî© ÏÉÅÌÉú
  const [studentLoaded, setStudentLoaded] = useState(false);
  useEffect(() => {
    if (studentDoc) setStudentLoaded(true);
  }, [studentDoc]);

  // ÎèôÍ∏∞Ìôî useEffect (ÏµúÏ†ÅÌôî)
  useEffect(() => {
    if (!studentLoaded || !student) return;
    const local = getLocalLevelRewardDrawn(student.level);
    const remote = hasDrawnLevelReward(student.level);
    if (local === remote) return; // Îëò Îã§ Í∞ôÏúºÎ©¥ ÏïÑÎ¨¥Í≤ÉÎèÑ Ïïà Ìï®
    if (local && !remote) {
      markLevelRewardAsDrawn(student.level);
    } else if (!local && remote) {
      setLocalLevelRewardDrawn(student.level);
    }
  }, [student?.level, studentLoaded]);

  // Ïπ¥ÎìúÎΩëÍ∏∞ Î™®Îã¨ Ìä∏Î¶¨Í±∞ useEffect (ÏµúÏ†ÅÌôî)
  useEffect(() => {
    if (!studentLoaded || !student) return;
    if (hasDrawnLevelRewardAll(student.level)) return; // Ïù¥ÎØ∏ Î∞õÏïòÏúºÎ©¥ ÏïÑÎ¨¥Í≤ÉÎèÑ Ïïà Ìï®
    /*
    // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏ (ÌïÑÏöîÏãúÎßå Ï£ºÏÑù Ìï¥Ï†ú)
    console.log('[ÎîîÎ≤ÑÍ∑∏] Î†àÎ≤®ÏóÖ Î≥¥ÏÉÅ Ï≤¥ÌÅ¨:', {
      studentId,
      studentLevel: student.level,
      firestoreÎ≥¥ÏÉÅÎ∞õÏùå: hasDrawnLevelReward(student.level),
      Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÌÇ§: `levelRewardDrawn_${studentId}`,
      Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÎ≥¥ÏÉÅÎ∞õÏùå: getLocalLevelRewardDrawn(student.level),
      Ï¢ÖÌï©Î≥¥ÏÉÅÎ∞õÏùå: hasDrawnLevelRewardAll(student.level),
      showCardModal: showCardModal
    });
    */
      // Ïπ¥Îìú 3Ïû• Î≥¥ÏÉÅ ÌõÑÎ≥¥ ÏÉùÏÑ± (ÌôïÎ•† Í∏∞Î∞ò)
      const pick3 = () => {
        const weightedRandom = () => {
          const totalProb = REWARD_LIST.reduce((sum, item) => sum + item.prob, 0);
          let randomNum = Math.random() * totalProb;
          for (let item of REWARD_LIST) {
            randomNum -= item.prob;
            if (randomNum <= 0) return item;
          }
          return REWARD_LIST[0]; // fallback
        };
        
        const arr = [];
        for (let i = 0; i < 3; i++) {
          arr.push(weightedRandom());
        }
        return arr;
      };
      setCardChoices(pick3());
      setShowCardModal(true);
      setCardResult(null);
      setCardEffect(false);
      // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê Î®ºÏ†Ä Í∏∞Î°ù (Ï¶âÏãú Ï†ÅÏö©)
      setLocalLevelRewardDrawn(student.level);
      // FirestoreÏóêÎèÑ Í∏∞Î°ù (ÎπÑÎèôÍ∏∞)
      markLevelRewardAsDrawn(student.level)
      // .then(() => console.log('[ÎîîÎ≤ÑÍ∑∏] FirestoreÏóê Î†àÎ≤®ÏóÖ Î≥¥ÏÉÅ Í∏∞Î°ù ÏôÑÎ£å:', student.level))
      // .catch(err => console.error('[ÎîîÎ≤ÑÍ∑∏] Firestore ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', err));
      .catch(() => {});
  }, [student?.level, studentLoaded]);

  // Ïø†Ìè∞Ìï® ÌÉ≠ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [couponTab, setCouponTab] = useState('unused'); // 'unused' or 'used'

  // Ïπ¥ÎìúÎΩëÍ∏∞ Î™®Îã¨ Îã´Í∏∞ Ìï®Ïàò (ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî)
  const handleCloseCardModal = () => {
    setShowCardModal(false);
    setCardChoices([]);
    setCardResult(null);
    setCardEffect(false);
    setSelectedCardIndex(null);
  };

  // Ïπ¥Îìú ÏÑ†ÌÉù Ï≤òÎ¶¨ Ìï®Ïàò Ï∂îÍ∞Ä
  const handleCardSelect = async (selectedCard, cardIndex) => {
    try {
      // ÏÑ†ÌÉùÎêú Ïπ¥Îìú Ïù∏Îç±Ïä§ Ï†ÄÏû• (Ïπ¥Îìú Îí§ÏßëÍ∏∞ Ìö®Í≥º)
      setSelectedCardIndex(cardIndex);
      
      // 0.5Ï¥à ÌõÑ Ïπ¥Îìú Í≥µÍ∞ú Î∞è Ïø†Ìè∞ Ï∂îÍ∞Ä
      setTimeout(async () => {
        const newCoupon = {
          key: selectedCard.key,
          label: selectedCard.label,
          img: selectedCard.img,
          used: false,
          ts: Date.now()
        };
        
        await updateDoc(doc(db, 'students', studentId), {
          coupons: arrayUnion(newCoupon)
        });
        
        // Ïπ¥Îìú ÏÑ†ÌÉù Ìö®Í≥º ÌëúÏãú
        setCardResult(selectedCard);
        setCardEffect(true);
        
        // 2Ï¥à ÌõÑ Î™®Îã¨ Îã´Í∏∞
        setTimeout(() => {
          handleCloseCardModal();
        }, 2000);
      }, 500);
      
    } catch (error) {
      console.error('Ïπ¥Îìú ÏÑ†ÌÉù Ï≤òÎ¶¨ Ïã§Ìå®:', error);
      alert('Ïπ¥Îìú ÏÑ†ÌÉùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    }
  };

  // ÏïåÎ¶º Î™®Îã¨ ÌÉ≠ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [notificationTab, setNotificationTab] = useState('Î©îÏãúÏßÄ');

  // ÏïåÎûå Î¶¨Ïä§Ìä∏ map ÎÇ¥Î∂ÄÏóêÏÑú onClick Îì±ÏúºÎ°ú ÏïÑÎûò ÏΩîÎìú Ï∂îÍ∞Ä
  // localStorageÏóê ts Ï†ÄÏû•
  const markStudentAlarmAsSeen = (ts) => {
    try {
      const seen = JSON.parse(localStorage.getItem('seenStudentAlarms') || '[]');
      if (!seen.includes(ts)) {
        localStorage.setItem('seenStudentAlarms', JSON.stringify([...seen, ts]));
      }
    } catch {}
  };
  // ÏïåÎûå ÌÅ¥Î¶≠ Ïãú markStudentAlarmAsSeen(a.ts) Ìò∏Ï∂ú
  // ... existing code ...

  // ... feverTime ÏÉÅÌÉú useState ...
  const [feverActive, setFeverActive] = useState(false);
  // Firestore feverTime Íµ¨ÎèÖ useEffect ...
  useEffect(() => {
    const unsub = onSnapshot(doc(db, 'settings', 'feverTime'), (snap) => {
      const data = snap.data();
      setFeverActive(!!(data && data.active === true));
    });
    return () => unsub();
  }, []);
  // ... candy rain Ïï†ÎãàÎ©îÏù¥ÏÖò Ïª¥Ìè¨ÎÑåÌä∏ ...
  function CandyRain() {
    const [candies, setCandies] = useState([]);
    const requestRef = useRef();
    // Ìå°Ìå° Ìö®Í≥º ÌôïÎ•† Ï¶ùÍ∞Ä
    const POP_PROB = 0.45; // ÌôïÎ•† Îçî ÏÉÅÌñ• Ï°∞Ï†ï
    // Ï∫îÎîî ÏÉùÏÑ±
    useEffect(() => {
      let running = true;
      function addCandy() {
        if (!running || !feverActive) return;
        setCandies(candies => [
          ...candies,
          {
            id: Math.random().toString(36).slice(2),
            img: candyRainImages[Math.floor(Math.random()*candyRainImages.length)],
            left: Math.random()*85+5, // ÌôîÎ©¥ Í∞ÄÏû•ÏûêÎ¶¨ Ï†úÏô∏
            top: Math.random()*70+15, // 15~85vh ÏÇ¨Ïù¥ÏóêÏÑú ÎûúÎç§ÌïòÍ≤å ÏÉùÏÑ±
            size: Math.random()*50+20, // 20~70pxÎ°ú Îçî Îã§ÏñëÌïòÍ≤å
            angle: (Math.random() - 0.5) * 360, // 360ÎèÑ ÌöåÏ†Ñ
            pop: true, // Î™®Îì† Ï∫îÎîîÍ∞Ä Ìå°Ìå° Ìö®Í≥º
            fade: false
          }
        ]);
        if (running && feverActive) {
          setTimeout(addCandy, Math.random()*200+100); // 100~300msÎ°ú Îçî Îπ†Î•¥Í≤å ÏÉùÏÑ±
        }
      }
      if (feverActive) addCandy();
      return () => { running = false; };
    }, [feverActive]);
    // Ï∫îÎîî Ïï†ÎãàÎ©îÏù¥ÏÖò Î∞è Ï†úÍ±∞
    useEffect(() => {
      if (!feverActive) {
        setCandies(candies => candies.map(c => ({ ...c, fade: true })));
        const timeout = setTimeout(() => setCandies([]), 1400);
        return () => clearTimeout(timeout);
      }
    }, [feverActive]);
  return (
      <div style={{ pointerEvents:'none', position:'fixed', top:0, left:0, width:'100vw', height:'100vh', zIndex:9999 }}>
        {candies.map(candy => (
          <img key={candy.id} src={candy.img} alt="candy" style={{
            position:'absolute',
            left: `${candy.left}vw`,
            top: `${candy.top}vh`,
            width: candy.size,
            height: candy.size,
            opacity: candy.fade ? 0 : 0.92,
            pointerEvents:'none',
            filter: 'drop-shadow(0 0 16px #ffd600)',
            animation: 'popCandy 0.7s forwards',
            transform: `rotate(${candy.angle}deg)`,
            transition: 'opacity 1.1s'
          }} />
        ))}
          <style>{`
          @keyframes popCandy {
            0% { transform: scale(0.2) rotate(0deg); opacity: 0; }
            20% { transform: scale(1.8) rotate(-15deg); opacity: 1; }
            40% { transform: scale(1.2) rotate(10deg); opacity: 0.9; }
            60% { transform: scale(1.5) rotate(-10deg); opacity: 0.8; }
            80% { transform: scale(1.1) rotate(5deg); opacity: 0.6; }
            100% { transform: scale(0.2) rotate(20deg); opacity: 0; }
            }
          `}</style>
        </div>
    );
  }
  // ... existing code ...
  {feverActive && <CandyRain />}
  // ... Î∞úÌëú Í≤ΩÌóòÏπò ÏßÄÍ∏â Î°úÏßÅÏóêÏÑú feverActive Ï≤¥ÌÅ¨ÌïòÏó¨ 2Î∞∞ ÏßÄÍ∏â ...

  // 1. feverActive ÏïàÎÇ¥ Î™®Îã¨ ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [showFeverModal, setShowFeverModal] = useState(false);
  useEffect(() => {
    if (feverActive) {
      setShowFeverModal(true);
      const t = setTimeout(() => setShowFeverModal(false), 5000);
      return () => clearTimeout(t);
    } else {
      setShowFeverModal(false);
    }
  }, [feverActive]);

  // StudentPage Ïª¥Ìè¨ÎÑåÌä∏ ÎÇ¥ useState/useEffect ÏïÑÎûòÏóê Ï∂îÍ∞Ä
  const feverBgImages = [
    '/fv1.png','/fv2.png','/fv3.png','/fv4.png','/fv5.png','/fv6.png','/fv7.png','/fv8.png'
  ];
  const [feverBgIdx, setFeverBgIdx] = useState(0);
  const [feverBgActive, setFeverBgActive] = useState(false);

  useEffect(() => {
    let interval;
    if (feverActive) {
      setFeverBgActive(true);
      // ÌîºÎ≤ÑÌÉÄÏûÑ ÏãúÏûë Ïãú Î∞îÎ°ú ÎûúÎç§ Ïù¥ÎØ∏ÏßÄÎ°ú Î∞∞Í≤Ω ÏÑ§Ï†ï
      setFeverBgIdx(Math.floor(Math.random() * feverBgImages.length));
      interval = setInterval(() => {
        setFeverBgIdx(idx => (idx + 1) % feverBgImages.length);
      }, Math.random() * 200 + 300); // 0.3~0.5Ï¥à Í∞ÑÍ≤©
    } else {
      setFeverBgActive(false);
      setFeverBgIdx(0);
    }
    return () => interval && clearInterval(interval);
  }, [feverActive]);

  // Í∞êÏ†ï Ïù¥Î™®Ìã∞ÏΩò ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [selectedEmotion, setSelectedEmotion] = useState(null);
  const [showEmotionModal, setShowEmotionModal] = useState(false);

  // FirestoreÏóêÏÑú emotionIcon Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    if (student && student.emotionIcon) {
      setSelectedEmotion(student.emotionIcon);
    }
  }, [student]);

  // Í∞êÏ†ï Ïù¥Î™®Ìã∞ÏΩò Ï†ÄÏû• Ìï®Ïàò
  const handleSelectEmotion = async (icon) => {
    setSelectedEmotion(icon);
    setShowEmotionModal(false);
    await updateDoc(doc(db, 'students', studentId), { emotionIcon: icon });
  };

  const EMOTION_ICONS = Array.from({ length: 16 }, (_, i) => `/em${i + 1}.png`);

  const [showMessageModal, setShowMessageModal] = useState(false);
  const [messageText, setMessageText] = useState('');
  const [replyToMessage, setReplyToMessage] = useState(null);

  const handleReplyMessage = (message) => {
    setReplyToMessage(message);
    setShowMessageModal(true);
  };

  const [showQuestModal, setShowQuestModal] = useState(false);
  const [hasSeenQuestModal, setHasSeenQuestModal] = useState(false);

  // ÌÄòÏä§Ìä∏ Î™®Îã¨ ÌôïÏù∏ Ïó¨Î∂Ä Ï≤¥ÌÅ¨ Ìï®Ïàò
  const checkQuestModalSeen = () => {
    try {
      const seen = localStorage.getItem('questModalSeen');
      return seen === 'true';
    } catch {
      return false;
    }
  };

  // ÌÄòÏä§Ìä∏ Î™®Îã¨ÏùÑ Î≥∏ Í≤ÉÏúºÎ°ú ÌëúÏãú
  const markQuestModalAsSeen = () => {
    try {
      localStorage.setItem('questModalSeen', 'true');
      setHasSeenQuestModal(true);
    } catch {}
  };

  // ÌÄòÏä§Ìä∏ Î™®Îã¨ ÌëúÏãú Ïó¨Î∂Ä ÌôïÏù∏
  useEffect(() => {
    if (student && !checkQuestModalSeen()) {
      setShowQuestModal(true);
    }
  }, [student]);

  // ÌÄòÏä§Ìä∏ Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
  const QuestModal = () => (
    <Modal
      open={showQuestModal}
      onClose={() => {
        setShowQuestModal(false);
        markQuestModalAsSeen();
      }}
      aria-labelledby="quest-modal-title"
    >
            <Box sx={{
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        width: 400,
        bgcolor: 'background.paper',
        boxShadow: 24,
        p: 4,
        borderRadius: 2,
      }}>
        <Typography id="quest-modal-title" variant="h6" component="h2" gutterBottom>
          ÌôòÏòÅÌï©ÎãàÎã§! üéâ
        </Typography>
        <Typography variant="body1" paragraph>
          Ï∫îÎîîÏÉµÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§! Ïó¨Í∏∞ÏÑúÎäî Îã§ÏùåÍ≥º Í∞ôÏùÄ ÌôúÎèôÏùÑ Ìï† Ïàò ÏûàÏñ¥Ïöî:
        </Typography>
        <ul>
          <li>ÏÑ†ÏÉùÎãòÍ≥º Î©îÏãúÏßÄÎ•º Ï£ºÍ≥†Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî</li>
          <li>Ïπ≠Ï∞¨ÏùÑ Î∞õÍ≥† Í≤ΩÌóòÏπòÎ•º ÏñªÏùÑ Ïàò ÏûàÏñ¥Ïöî</li>
          <li>Î†àÎ≤®ÏóÖÌïòÎ©¥ Î≥¥ÏÉÅÏùÑ Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî</li>
          <li>ÏÉÅÏ†êÏóêÏÑú Îã§ÏñëÌïú ÏïÑÏù¥ÌÖúÏùÑ Íµ¨Îß§Ìï† Ïàò ÏûàÏñ¥Ïöî</li>
        </ul>
        <Button
          variant="contained"
          color="primary"
          fullWidth
          onClick={() => {
            setShowQuestModal(false);
            markQuestModalAsSeen();
          }}
          sx={{ mt: 2 }}
        >
          ÏãúÏûëÌïòÍ∏∞
        </Button>
            </Box>
    </Modal>
  );

  // Ï†ïÎ≥¥(i) ÏïÑÏù¥ÏΩò ÌÅ¥Î¶≠ Ïãú Î™®Îã¨ ÏÉÅÌÉú
  const [showInfoModal, setShowInfoModal] = useState(false);

  // InfoModal: i ÏïÑÏù¥ÏΩò ÌÅ¥Î¶≠ Ïãú ÏïàÎÇ¥ Î™®Îã¨ (Ïã§Ï†ú Ï°¥Ïû¨ÌïòÎäî Ïù¥ÎØ∏ÏßÄÎßå ÏÇ¨Ïö©)
  {showInfoModal && (
    <Modal
      open={showInfoModal}
      onClose={() => setShowInfoModal(false)}
      aria-labelledby="info-modal-title"
    >
      <Box sx={{
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        width: 400,
        bgcolor: 'background.paper',
        boxShadow: 24,
        p: 4,
        borderRadius: 2,
      }}>
        <Typography id="info-modal-title" variant="h6" component="h2" gutterBottom>
          Ï∫îÎîîÏÉµ ÏïàÎÇ¥ üìù
        </Typography>
        <Typography variant="body1" paragraph>
          <ul style={{ margin: 0, paddingLeft: 18 }}>
            <li>Ï∫îÎîîÏÉµÏùÄ ÌïôÏÉùÎì§Ïùò ÏÑ±Ïû•Í≥º ÏÜåÌÜµÏùÑ ÏúÑÌïú Í≥µÍ∞ÑÏûÖÎãàÎã§.</li>
            <li>ÏπúÍµ¨Î•º Ïπ≠Ï∞¨ÌïòÍ±∞ÎÇò, ÏÑ†ÏÉùÎãòÍ≥º Î©îÏãúÏßÄÎ•º Ï£ºÍ≥†Î∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§.</li>
            <li>Í≤ΩÌóòÏπòÎ•º ÏåìÏïÑ Î†àÎ≤®ÏóÖÌïòÍ≥†, Îã§ÏñëÌïú Î≥¥ÏÉÅÏùÑ Î∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§.</li>
            <li>ÏÉÅÏ†êÏóêÏÑú ÏïÑÏù¥ÌÖúÏùÑ Íµ¨ÏûÖÌïòÍ±∞ÎÇò, ÌÄòÏä§Ìä∏Ïóê ÎèÑÏ†ÑÌï† Ïàò ÏûàÏäµÎãàÎã§.</li>
            <li>ÌïôÏäµÏùºÏßÄ Î≤ÑÌäºÏùÑ ÌÜµÌï¥ ÎÇòÎßåÏùò ÏùºÏßÄÎ•º ÏûëÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.</li>
          </ul>
        </Typography>
                        <Button
                          variant="contained"
          color="primary"
          fullWidth
          onClick={() => setShowInfoModal(false)}
          sx={{ mt: 2 }}
        >
          Îã´Í∏∞
                        </Button>
                </Box>
    </Modal>
  )}

  // Î™®Îã¨ Ïò§Ìîà Ïó¨Î∂Ä(Î∞∞Í≤Ω ÍπúÎπ°ÏûÑ Î∞©ÏßÄ)
  const isModalOpen = showQuestModal || showInfoModal;

  // ÍµêÏÇ¨ Ìä∏Î¶¨Í±∞ Ïø†Ìè∞ Ïù¥Î≤§Ìä∏ Í∞êÏßÄ(useEffect)
  useEffect(() => {
    if (!student || !studentId) return;
    if (student.triggerCouponEvent && student.triggerCouponEvent.active) {
      // Ïπ¥ÎìúÎΩëÍ∏∞ Î™®Îã¨ ÌôúÏÑ±Ìôî (ÌôïÎ•† Í∏∞Î∞ò pick3 Î°úÏßÅ)
      const pick3 = () => {
        const weightedRandom = () => {
          const totalProb = REWARD_LIST.reduce((sum, item) => sum + item.prob, 0);
          let randomNum = Math.random() * totalProb;
          for (let item of REWARD_LIST) {
            randomNum -= item.prob;
            if (randomNum <= 0) return item;
          }
          return REWARD_LIST[0]; // fallback
        };
        
        const arr = [];
        for (let i = 0; i < 3; i++) {
          arr.push(weightedRandom());
        }
        return arr;
      };
      setCardChoices(pick3());
      setShowCardModal(true);
      setCardResult(null);
      setCardEffect(false);
      // Ìä∏Î¶¨Í±∞ ÌîåÎûòÍ∑∏ Ï†úÍ±∞(Ìïú Î≤àÎßå Ïã§Ìñâ)
      const clearTrigger = async () => {
        try {
          await updateDoc(doc(db, 'students', studentId), {
            triggerCouponEvent: { active: false, ts: Date.now() }
          });
        } catch (error) {
          console.error('[Ïø†Ìè∞Ïù¥Î≤§Ìä∏] Ìä∏Î¶¨Í±∞ ÌîåÎûòÍ∑∏ Ï†úÍ±∞ Ïã§Ìå®:', error);
        }
      };
      clearTrigger();
    }
  }, [student, studentId]);

  const [showLinkModal, setShowLinkModal] = useState(false);
  const [currentLink, setCurrentLink] = useState(null);
  const [linkCategory, setLinkCategory] = useState('all');
  const [showLinkHistoryModal, setShowLinkHistoryModal] = useState(false);
  const [showTransactionModal, setShowTransactionModal] = useState(false);
  // Îç∞Ïù¥ÌÑ∞ Ï†ÑÍ¥ëÌåê Î™®Îã¨ ÏÉÅÌÉú
  const [showDataBoardModal, setShowDataBoardModal] = useState(false);

  // ÎßÅÌÅ¨ Î∞©Î¨∏ Ï∂îÏ†Å Ìï®Ïàò
  const handleLinkVisit = async (link) => {
    try {
      const studentRef = doc(db, 'students', studentId);
      const updatedLinks = (student.links || []).map(l => {
        if (l.url === link.url && l.ts === link.ts) {
          return {
            ...l,
            visits: [...(l.visits || []), { ts: Date.now() }]
          };
        }
        return l;
      });
      await updateDoc(studentRef, { links: updatedLinks });
      console.log('Link visit tracked successfully:', link.title || link.url);
    } catch (error) {
      console.error('Error tracking link visit:', error);
    }
  };

  // ÏÉà ÎßÅÌÅ¨ ÌôïÏù∏
  useEffect(() => {
    if (!student) return;
    const links = student.links || [];
    const unreadLinks = links.filter(link => {
      const lastVisit = Math.max(...(link.visits || []).map(v => v.ts));
      return !lastVisit;
    });
    if (unreadLinks.length > 0) {
      const latestLink = unreadLinks.sort((a, b) => b.ts - a.ts)[0];
      setCurrentLink(latestLink);
      setShowLinkModal(true);
      try {
        if ('vibrate' in navigator) {
          navigator.vibrate([200, 100, 200]);
        }
      } catch (e) {
        // ÏßÑÎèô Í∏∞Îä•Ïù¥ Ï∞®Îã®ÎêòÏñ¥ÎèÑ Î¨¥Ïãú
      }
    }
  }, [student]);

  const [user, authLoading] = useAuthState(auth);

  const [showDiaryModal, setShowDiaryModal] = useState(false);
  
  // ÏùµÎ™Ö Î™®Îìú ÏÉÅÌÉú (Ï¥àÍ∏∞Í∞íÏùÑ ÌòÑÏû¨ Í∏ÄÎ°úÎ≤å ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï)
  const [anonymousMode, setAnonymousMode] = useState(() => getAnonymousMode());

  // ÏùµÎ™Ö Î™®Îìú ÏÉÅÌÉú Î≥ÄÍ≤Ω Î¶¨Ïä§ÎÑà Îì±Î°ù
  useEffect(() => {
    console.log('StudentPage: ÏùµÎ™Ö Î™®Îìú Î¶¨Ïä§ÎÑà Îì±Î°ù ÏãúÏûë');
    const setupListener = async () => {
      const removeListener = await addAnonymousModeListener((newMode) => {
        console.log('Student ÌéòÏù¥ÏßÄ ÏùµÎ™Ö Î™®Îìú Î≥ÄÍ≤Ω:', newMode);
        setAnonymousMode(newMode);
      });
      return removeListener;
    };
    
    let cleanupFunction;
    setupListener().then(cleanup => {
      cleanupFunction = cleanup;
    }).catch(error => {
      console.error('StudentPage ÏùµÎ™Ö Î™®Îìú Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï Ïã§Ìå®:', error);
    });
    
    return () => {
      if (cleanupFunction) {
        cleanupFunction();
      }
    };
  }, []);

  if (authLoading) return <div>Î°úÎî© Ï§ë...</div>;

  if (!user) {
    return (
      <div style={{ minHeight: '100vh', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
        <h2>Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§</h2>
        <button
          onClick={async () => {
            try {
              await signInWithPopup(auth, googleProvider);
            } catch (e) {
              alert('Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ' + e.message);
            }
          }}
          style={{
            padding: '12px 32px',
            fontSize: 18,
            borderRadius: 8,
            background: '#4285F4',
            color: '#fff',
            border: 'none',
            fontWeight: 700,
            cursor: 'pointer',
            marginTop: 16
          }}
        >
          Íµ¨Í∏Ä Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏
        </button>
      </div>
    );
  }
  if (!student) {
    return (
      <div style={{ minHeight: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center', fontSize: 22, color: '#d72660' }}>
        ÌïôÏÉù Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§...
      </div>
    );
  }

  // Î°úÍ∑∏Ïù∏Ìïú Í≤ΩÏö∞: Î°úÍ∑∏ÏïÑÏõÉ Î≤ÑÌäº + Í∏∞Ï°¥ ÌïôÏÉù ÌéòÏù¥ÏßÄ ÎÇ¥Ïö©
  return (
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #ffe4ec 0%, #f8bbd0 100%)', 
      backgroundImage: feverBgActive 
        ? `url(${feverBgImages[feverBgIdx]}), linear-gradient(135deg, #ffe4ec 0%, #f8bbd0 100%)`
        : 'url(/ST_bg.png), linear-gradient(135deg, #ffe4ec 0%, #f8bbd0 100%)', 
      backgroundBlendMode: feverBgActive ? 'multiply, soft-light' : 'soft-light', 
      backgroundRepeat: 'no-repeat', 
      backgroundSize: 'cover', 
      backgroundPosition: 'center', 
      paddingBottom: 80,
      transition: feverBgActive ? 'none' : 'background-image 0.3s ease'
    }}>
      <div style={{ position: 'fixed', top: 24, right: 32, zIndex: 2000, display: 'flex', flexDirection: 'row', gap: 18, alignItems: 'center' }}>
        {/* ÌîºÎ≤ÑÌÉÄÏûÑ ÏÉÅÌÉú ÌëúÏãú ÏïÑÏù¥ÏΩò */}
        {feverActive && (
          <div style={{
            background: 'linear-gradient(45deg, #FF6B35 30%, #FFD700 90%)',
            border: '3px solid #FFD700',
            borderRadius: 24,
            padding: '12px 18px',
            display: 'flex',
            alignItems: 'center',
            gap: 8,
            boxShadow: '0 4px 16px rgba(255, 107, 53, 0.6)',
            animation: 'feverPulse 2s infinite',
            cursor: 'pointer',
            userSelect: 'none'
          }}
          title="ÌîºÎ≤ÑÌÉÄÏûÑ ÏßÑÌñâ Ï§ë - Í≤ΩÌóòÏπò 2Î∞∞!"
          >
            <div style={{ fontSize: 28, animation: 'feverSpin 3s linear infinite' }}>üî•</div>
            <div style={{ 
              color: '#FFF', 
              fontWeight: 900, 
              fontSize: 16,
              textShadow: '1px 1px 2px rgba(0,0,0,0.3)',
              letterSpacing: '-0.5px'
            }}>
              ÌîºÎ≤ÑÌÉÄÏûÑ!
            </div>
          </div>
        )}
        {/* Ïú†Î¶¨Î≥ë ÏïÑÏù¥ÏΩò Î≤ÑÌäº */}
        <div style={{ width: 40, height: 40, display: 'flex', alignItems: 'center', justifyContent: 'center', cursor: 'pointer', position: 'relative' }} title="ÌïôÍ∏â Ï∫îÎîî Ïú†Î¶¨Î≥ë" onClick={() => setShowJarModal(true)}>
          <img src="/jar2.png" alt="Ïú†Î¶¨Î≥ë" style={{ width: 32, height: 32, objectFit: 'contain', filter: 'drop-shadow(0 2px 6px #b2ebf2a0)' }} />
        </div>
        {/* ÌïôÏäµÏùºÏßÄ Î≤ÑÌäº */}
        <button onClick={() => setShowLearningJournalModal(true)} style={{ background: '#fffde7', border: 'none', borderRadius: 999, padding: '8px 18px', boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>
          <span style={{ fontWeight: 700, color: '#1976d2', fontSize: 28, lineHeight: '1', display: 'flex', alignItems: 'center' }} role="img" aria-label="notebook">üìí</span>
          <span style={{ fontWeight: 700, color: '#1976d2', fontSize: 16, marginLeft: 2 }}>ÌïôÏäµÏùºÏßÄ</span>
        </button>
        {/* Ï∫îÎîîÏàç Î≤ÑÌäº (StorefrontIcon + ÌÖçÏä§Ìä∏) */}
        <button onClick={() => setShowShopModal(true)} style={{ background: '#fffde7', border: 'none', borderRadius: 999, padding: '8px 18px', boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>
          <StorefrontIcon style={{ color: '#d72660', fontSize: 28 }} />
          <span style={{ fontWeight: 700, color: '#d72660', fontSize: 16 }}>Ï∫îÎîîÏàç</span>
        </button>
        {/* Ïø†Ìè∞Ìï® Î≤ÑÌäº (SVG Ìã∞Ïºì ÏïÑÏù¥ÏΩò + ÌÖçÏä§Ìä∏) */}
        <button onClick={() => setCouponBoxOpen(true)} style={{ background: '#fffde7', border: 'none', borderRadius: 999, padding: '8px 18px', boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>
          <svg width="28" height="28" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: 4 }}>
            <rect x="3" y="8" width="26" height="12" rx="4" fill="#FFD700" stroke="#B8860B" strokeWidth="2"/>
            <rect x="7" y="12" width="18" height="4" rx="2" fill="#FFF8DC" />
            <circle cx="8.5" cy="14" r="1.5" fill="#B8860B" />
            <circle cx="23.5" cy="14" r="1.5" fill="#B8860B" />
            <path d="M3 12 Q1 14 3 16" stroke="#B8860B" strokeWidth="2" fill="none"/>
            <path d="M29 12 Q31 14 29 16" stroke="#B8860B" strokeWidth="2" fill="none"/>
          </svg>
          <span style={{ fontWeight: 700, color: '#d72660', fontSize: 16 }}>Ïø†Ìè∞Ìï®</span>
        </button>

        
        {/* Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Î≤ÑÌäº */}
        <button onClick={() => {setShowRecorderModal(true); fetchRecorderMissions();}} style={{ background: '#f3e5f5', border: 'none', borderRadius: 999, padding: '8px 18px', boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>
          <MusicNoteIcon style={{ color: '#7b1fa2', fontSize: 28 }} />
          <span style={{ fontWeight: 700, color: '#7b1fa2', fontSize: 16 }}>Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò</span>
        </button>
        
        {/* Ïã¨Ìôî Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Î≤ÑÌäº (7Îã®Í≥Ñ ÏôÑÎ£å Ïãú ÌëúÏãú) */}
        {/* Ïó≠ÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Î≤ÑÌäº */}
        <button onClick={() => setShowHistoryModal(true)} style={{ background: '#e8f5e8', border: 'none', borderRadius: 999, padding: '8px 18px', boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8, fontWeight: 700, color: '#2e7d32', fontSize: 16 }} title="Ïó≠ÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±">
          <HistoryIcon style={{ color: '#2e7d32', fontSize: 28 }} />
          <span style={{ fontWeight: 700, color: '#2e7d32', fontSize: 16 }}>Ïó≠ÏÇ¨Í∏∞Î°ù</span>
        </button>
        {isAdvancedUnlocked() && (
          <button onClick={() => {setShowRecorderAdvancedModal(true); fetchRecorderMissionsAdvanced();}} style={{ background: 'linear-gradient(135deg, #667eea, #764ba2)', border: 'none', borderRadius: 999, padding: '8px 18px', boxShadow: '0 4px 16px rgba(102, 126, 234, 0.4)', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>
            <MusicNoteIcon style={{ color: '#fff', fontSize: 28 }} />
            <span style={{ fontWeight: 700, color: '#fff', fontSize: 16 }}>Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò(Ïã¨Ìôî)</span>
          </button>
        )}
        
        {/* ÌòÑÏû¨ ÌÜµÍ≥º Îã®Í≥Ñ Î≤ÑÌäº */}
        {getHighestCompletedLevel() !== null && !isAdvancedUnlocked() && (
          <button onClick={handleCelebrationClick} style={{ background: '#e8f5e8', border: 'none', borderRadius: 999, padding: '8px 18px', boxShadow: '0 2px 8px rgba(76, 175, 80, 0.3)', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>
            <span style={{ fontSize: 24 }}>üèÜ</span>
            <span style={{ fontWeight: 700, color: '#43a047', fontSize: 16 }}>{getHighestCompletedLevel()}Îã®Í≥Ñ ÌÜµÍ≥º!</span>
          </button>
        )}
        
        {/* Ïã¨Ìôî ÎèÑÏ†Ñ Î≤ÑÌäº (7Îã®Í≥Ñ ÏôÑÎ£å Ïãú Î¨¥ÏßÄÍ∞úÏÉâ ÌÖåÎëêÎ¶¨) */}
        {isAdvancedUnlocked() && (
          <button onClick={handleAdvancedCelebrationClick} style={{ 
            background: 'linear-gradient(45deg, #ff6b6b, #feca57, #48dbfb, #ff9ff3, #54a0ff)', 
            border: 'none', 
            borderRadius: 999, 
            padding: '3px', 
            boxShadow: '0 4px 20px rgba(255, 107, 107, 0.4)', 
            cursor: 'pointer', 
            display: 'flex', 
            alignItems: 'center' 
          }}>
            <div style={{ 
              background: '#fff', 
              borderRadius: 999, 
              padding: '8px 18px', 
              display: 'flex', 
              alignItems: 'center', 
              gap: 8 
            }}>
              <span style={{ fontSize: 24 }}>üåà</span>
              <span style={{ fontWeight: 700, color: '#ff6b6b', fontSize: 16 }}>Ïã¨Ìôî ÎèÑÏ†Ñ!</span>
            </div>
          </button>
        )}
      </div>
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginBottom: 32, marginTop: 8 }}>
        <img src="/candyshop_banner.png" alt="JAMMANBO CANDY SHOP Î∞∞ÎÑà" style={{ maxWidth: 480, width: '90vw', height: 'auto', borderRadius: 18, boxShadow: '0 4px 24px #b2ebf240', display: 'block' }} />
      </div>
      <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 16 }}>
        <button onClick={() => setShowBoardModal(true)} style={{ fontWeight: 700, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '10px 32px', fontSize: 17, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', transition: 'all 0.2s' }}>Í≤åÏãúÌåê ÏûÖÏû•</button>
      </div>
      <div>
        <Card sx={{
          maxWidth: 480,
          width: 'min(95vw, 480px)',
          minHeight: 340,
          mx: 'auto',
          my: 4,
          borderRadius: 6,
          border: '3px solid #a7d7c5',
          boxShadow: '0 2px 16px #a7d7c540',
          background: '#fff',
          position: 'relative',
          p: 0,
          overflow: 'visible',
        }}>
          {/* Í∞êÏ†ï Ïù¥Î™®Ìã∞ÏΩò: Ïπ¥Îìú Ïò§Î•∏Ï™Ω ÏÉÅÎã® */}

          <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'stretch', width: '100%', p: 0 }}>
            <Box sx={{
              width: 140, minWidth: 120, maxWidth: 160, background: '#e3f2fd', borderRadius: '18px 0 0 18px', display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', py: 4, px: 2, boxShadow: '2px 0 12px #b2ebf220',
            }}>
              <img src={levelImages[student.level] || levelImages[0]} alt={LEVELS[student.level] || 'ÏÇ¨ÌÉï'} style={{ width: 115, height: 115, objectFit: 'contain', display: 'block', marginBottom: 16 }} />
              <span style={{ 
                color: '#1976d2', 
                fontWeight: 700, 
                fontSize: (() => {
                  const levelName = LEVELS[student.level] || LEVELS[0];
                  const nameLength = levelName.length;
                  // Î†àÎ≤®Î™Ö Í∏∏Ïù¥Ïóê Îî∞Î•∏ Ìè∞Ìä∏ ÌÅ¨Í∏∞ Ï°∞Ï†à
                  if (nameLength <= 10) {
                    return 22; // Í∏∞Î≥∏ ÌÅ¨Í∏∞
                  } else if (nameLength <= 15) {
                    return 18; // Ï°∞Í∏à ÏûëÍ≤å
                  } else {
                    return 16; // Îçî ÏûëÍ≤å
                  }
                })(),
                letterSpacing: '-1px', 
                marginTop: 4,
                textAlign: 'center',
                lineHeight: '1.2',
                wordBreak: 'keep-all' // ÌïúÍ∏Ä Îã®Ïñ¥ Îã®ÏúÑÎ°ú Ï§ÑÎ∞îÍøà
              }}>{LEVELS[student.level] || LEVELS[0]}</span>
            </Box>
            <Box sx={{ flex: 1, p: '24px 18px 18px 18px', display: 'flex', flexDirection: 'column', justifyContent: 'space-between', minHeight: 180 }}>
              <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'flex-start', justifyContent: 'space-between', mb: 1 }}>
                <Box>
                  <Typography variant="h5" fontWeight="bold" sx={{ fontSize: '1.35rem', mb: 0.5 }}>{(() => {
                    const displayName = getPokemonName(student.name, anonymousMode);
                    console.log('StudentPage Ïù¥Î¶Ñ ÌëúÏãú:', { 
                      originalName: student.name, 
                      anonymousMode, 
                      displayName 
                    });
                    return displayName;
                  })()}</Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5, flexWrap: 'nowrap' }}>
                    <span style={{ color: '#1976d2', fontWeight: 600, fontSize: 16, whiteSpace: 'nowrap' }}>Lv.{student.level}</span>
                    <span style={{ fontSize: 13, color: '#bbb', margin: '0 4px' }}>|</span>
                    <span style={{ color: '#43a047', fontWeight: 600, fontSize: 16, whiteSpace: 'nowrap' }}>XP {student.exp}</span>
                    <>
                      <span style={{ fontSize: 13, color: '#bbb', margin: '0 4px' }}>|</span>
                      <span 
                        style={{ 
                          color: '#FF9800', 
                          fontWeight: 600, 
                          fontSize: 16, 
                          cursor: 'pointer',
                          textDecoration: 'underline',
                          textDecorationStyle: 'dotted',
                          whiteSpace: 'nowrap'
                        }}
                        onClick={() => setShowTransactionModal(true)}
                        title="ÌÅ¥Î¶≠ÌïòÏó¨ Í±∞Îûò ÎÇ¥Ïó≠ Î≥¥Í∏∞"
                      >
                        üí∞ {student.balance || 0}Ïõê
                      </span>
                    </>
                  </Box>
                </Box>
                {/* Ïù¥Î™®Ìã∞ÏΩò ÏÑ†ÌÉù Î≤ÑÌäº */}
                <IconButton 
                  onClick={() => setShowEmotionModal(true)}
                  sx={{ 
                    mt: 0.5,
                    border: '2px solid #ffe4ec',
                    borderRadius: '50%',
                    width: 40,
                    height: 40,
                    background: '#fff',
                    '&:hover': { background: '#ffd6e0' }
                  }}
                >
                  {selectedEmotion ? (
                    <img 
                      src={selectedEmotion} 
                      alt="Í∞êÏ†ï" 
                      style={{ width: 24, height: 24, objectFit: 'contain' }}
                      onError={(e) => {
                        // Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå® Ïãú Í∏∞Î≥∏ Í∞êÏ†ï Ïù¥Î™®ÏßÄÎ°ú ÎåÄÏ≤¥
                        e.target.src = '/em1.png';
                      }}
                    />
                  ) : (
                    // ÏÑ†ÌÉù Ï†Ñ: Î†àÌçºÎü∞Ïä§ Ïù¥ÎØ∏ÏßÄ ÌòïÌÉúÏùò Ïù¥Î™®ÏßÄ (ÏÑ†ÌÉù ÏïàÌï®ÏùÑ Î™ÖÌôïÌûà ÌëúÏãú)
                    <div style={{
                      width: 48,
                      height: 48,
                      borderRadius: '50%',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      color: '#999',
                      fontSize: 28,
                      fontWeight: 'normal'
                    }}>
                      üòê
                    </div>
                  )}
                </IconButton>
                <Badge badgeContent={unreadCount} color="error">
                  <IconButton color="primary" onClick={handleAlarmClick} sx={{ mt: 0.5 }}>
                    <NotificationsActiveIcon fontSize="medium" />
                  </IconButton>
                </Badge>
              </Box>
              {/* Ïù¥Î™®Ìã∞ÏΩò ÏÑ†ÌÉù Î™®Îã¨ */}
              {showEmotionModal && (
                <Modal
                  open={showEmotionModal}
                  onClose={() => setShowEmotionModal(false)}
                  aria-labelledby="emotion-modal-title"
                >
                  <Box sx={{
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: 'translate(-50%, -50%)',
                    width: 400,
                    bgcolor: 'background.paper',
                    boxShadow: 24,
                    p: 4,
                    borderRadius: 3,
                    border: '3px solid #ffd6e0'
                  }}>
                    <Typography id="emotion-modal-title" variant="h6" component="h2" gutterBottom sx={{ textAlign: 'center', color: '#d72660', fontWeight: 700 }}>
                      Í∏∞Î∂ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî üòä
                    </Typography>
                    <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: 2, mt: 3 }}>
                      {EMOTION_ICONS.map((icon, idx) => (
                        <button
                          key={icon}
                          onClick={() => handleSelectEmotion(icon)}
                          style={{
                            border: selectedEmotion === icon ? '3px solid #d72660' : '2px solid #eee',
                            borderRadius: '50%',
                            padding: 8,
                            background: selectedEmotion === icon ? '#ffd6e0' : '#fff',
                            cursor: 'pointer',
                            width: 60,
                            height: 60,
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            boxShadow: selectedEmotion === icon ? '0 4px 12px #ffd6e0a0' : '0 2px 6px #eee',
                            transition: 'all 0.2s',
                            transform: selectedEmotion === icon ? 'scale(1.1)' : 'scale(1)',
                          }}
                          onMouseOver={e => {
                            if (selectedEmotion !== icon) {
                              e.currentTarget.style.transform = 'scale(1.05)';
                              e.currentTarget.style.boxShadow = '0 4px 12px #d7d7d7';
                            }
                          }}
                          onMouseOut={e => {
                            if (selectedEmotion !== icon) {
                              e.currentTarget.style.transform = 'scale(1)';
                              e.currentTarget.style.boxShadow = '0 2px 6px #eee';
                            }
                          }}
                        >
                          <img 
                            src={icon} 
                            alt={`Í∞êÏ†ï${idx + 1}`} 
                            style={{ width: 36, height: 36, objectFit: 'contain' }}
                            onError={(e) => {
                              // Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå® Ïãú Í∏∞Î≥∏ Í∞êÏ†ï Ïù¥Î™®ÏßÄÎ°ú ÎåÄÏ≤¥
                              e.target.src = '/em1.png';
                            }}
                          />
                        </button>
                      ))}
                    </Box>
                    <Button
                      variant="contained"
                      fullWidth
                      onClick={() => setShowEmotionModal(false)}
                      sx={{ 
                        mt: 3, 
                        backgroundColor: '#d72660', 
                        '&:hover': { backgroundColor: '#c2185b' },
                        borderRadius: 999,
                        fontWeight: 700
                      }}
                    >
                      Îã´Í∏∞
                    </Button>
                  </Box>
                </Modal>
              )}
              <Box sx={{ width: '100%', mb: 1.5 }}>
                <div style={{ width: '100%', height: 16, background: '#e3f2fd', borderRadius: 10, position: 'relative', overflow: 'hidden', boxShadow: '0 1px 4px #b2ebf240' }}>
                  <div style={{ width: `${Math.min(100, Math.round((student.exp / getRequiredExp(student.level)) * 100))}%`, height: '100%', background: '#90caf9', borderRadius: 10, transition: 'width 0.4s' }} />
                  <div style={{ position: 'absolute', left: 0, top: 0, width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center', fontWeight: 600, fontSize: 13, color: '#1976d2', letterSpacing: '-0.5px' }}>
                    XP {student.exp} / {getRequiredExp(student.level)}
                  </div>
                </div>
              </Box>
              <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                <Chip label={`Ïò§Îäò Î∞úÌëú: ${todayPresentations}`} color="info" size="small" />
                <Chip label={`ÎàÑÏ†Å Î∞úÌëú: ${totalPresentations}`} color="success" size="small" />
              </Box>
              {Array.isArray(student.quests) && student.quests.filter(q => q.status === 'ongoing').length > 0 && (
                <Box mb={2} textAlign="center">
                  {student.quests.filter(q => q.status === 'ongoing').map((quest, idx) => (
                    <div key={idx} style={{ 
                      background: '#fff8e1', 
                      borderRadius: 16, 
                      padding: '16px 20px', 
                      marginBottom: 12,
                      border: '2px solid #ffd54f',
                      boxShadow: '0 2px 8px #ffd54f40'
                    }}>
                      <div style={{ 
                        fontWeight: 700, 
                        color: '#ff9800', 
                        fontSize: 16,
                        marginBottom: 8,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        gap: 6
                      }}>
                        <span role="img" aria-label="quest">üéØ</span> ÌÄòÏä§Ìä∏
                      </div>
                      <div style={{ 
                        color: '#222', 
                        fontWeight: 600, 
                        fontSize: 15, 
                        marginBottom: 8,
                        lineHeight: 1.4
                      }}>
                        {quest.text}
                      </div>
                      <div style={{ 
                        color: '#1976d2', 
                        fontWeight: 600, 
                        fontSize: 15, 
                        marginBottom: 12
                      }}>
                        Î≥¥ÏÉÅ: <span style={{ color: '#43a047' }}>{quest.exp}xp</span>
                      </div>
                      {quest.requestPending ? (
                        <div style={{ 
                          color: '#1976d2', 
                          fontWeight: 600, 
                          fontSize: 14,
                          background: '#e3f2fd',
                          padding: '8px 16px',
                          borderRadius: 999,
                          display: 'inline-block'
                        }}>
                          ÏäπÏù∏ ÏöîÏ≤≠ ÎåÄÍ∏∞ Ï§ë...
                        </div>
                      ) : (
                        <Button
                          variant="contained"
                          sx={{ 
                            background: '#e0f7fa', 
                            color: '#1976d2', 
                            borderRadius: 999, 
                            fontWeight: 600, 
                            boxShadow: '0 2px 8px #b2ebf240',
                            '&:hover': { background: '#b2ebf2' },
                            padding: '8px 24px'
                          }}
                          onClick={async () => {
                            const newQuests = (student.quests || []).map(q => q.ts === quest.ts ? { ...q, requestPending: true } : q);
                            await updateDoc(doc(db, 'students', studentId), { quests: newQuests });
                          }}
                        >
                          ÌÄòÏä§Ìä∏ ÏäπÏù∏ ÏöîÏ≤≠ÌïòÍ∏∞
                        </Button>
                      )}
                    </div>
                  ))}
                </Box>
              )}
              <Box mt={1.5}>
                <Button fullWidth sx={{ mb: 1, borderRadius: 999, fontWeight: 'bold', background: '#ffe4ec', border: '2px solid #ffb6b9', color: '#d72660', boxShadow: '0 2px 8px #f8bbd0a0', fontSize: 16, letterSpacing: '-0.5px', py: 1.2, '&:hover': { background: '#ffd6e0' } }} onClick={() => { console.log('Î©îÏãúÏßÄ Î≤ÑÌäº ÌÅ¥Î¶≠'); setShowMsgModal(true); }} startIcon={<EmojiEventsIcon />}>Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞</Button>
                <div style={{ position: 'relative', display: 'inline-block', width: '100%' }}>
                  <Button fullWidth sx={{ mb: 1, borderRadius: 999, fontWeight: 'bold', background: '#e0f7fa', border: '2px solid #b2ebf2', color: '#1976d2', boxShadow: '0 2px 8px #b2ebf240', fontSize: 16, letterSpacing: '-0.5px', py: 1.2, '&:hover': { background: '#b2ebf2' } }} onClick={() => { console.log('ÏπúÍµ¨ Î©îÏãúÏßÄ Î≤ÑÌäº ÌÅ¥Î¶≠'); setShowFriendMessageModal(true); }} startIcon={<EmojiEventsIcon />}>ÏπúÍµ¨ÏóêÍ≤å Î©îÏãúÏßÄ</Button>
                  <div style={{
                    position: 'absolute',
                    top: '-8px',
                    right: '8px',
                    background: '#ff4444',
                    color: '#fff',
                    fontSize: '11px',
                    fontWeight: 'bold',
                    padding: '3px 8px',
                    borderRadius: '12px',
                    boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
                    zIndex: 10,
                    fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif'
                  }}>
                    ÏóÖÎç∞Ïù¥Ìä∏
                  </div>
                </div>
                <Button fullWidth sx={{ mb: 1, borderRadius: 999, fontWeight: 'bold', background: '#ffe4ec', border: '2px solid #ffb6b9', color: '#d72660', boxShadow: '0 2px 8px #f8bbd0a0', fontSize: 16, letterSpacing: '-0.5px', py: 1.2, '&:hover': { background: '#ffd6e0' } }} onClick={() => { console.log('ÏπúÍµ¨ Ïπ≠Ï∞¨ Î≤ÑÌäº ÌÅ¥Î¶≠'); setShowPraiseModal(true); }} startIcon={<CelebrationIcon />}>ÏπúÍµ¨ Ïπ≠Ï∞¨ÌïòÍ∏∞</Button>
                <Button fullWidth sx={{ borderRadius: 999, fontWeight: 'bold', background: '#ffe4ec', border: '2px solid #ffb6b9', color: '#d72660', boxShadow: '0 2px 8px #f8bbd0a0', fontSize: 16, letterSpacing: '-0.5px', py: 1.2, '&:hover': { background: '#ffd6e0' } }} onClick={() => { console.log('ÎÇò Ïπ≠Ï∞¨ Î≤ÑÌäº ÌÅ¥Î¶≠'); setShowSelfPraiseModal(true); }} startIcon={<CelebrationIcon />}>ÎÇò Ïπ≠Ï∞¨ÌïòÍ∏∞</Button>
              </Box>
            </Box>
          </Box>
        </Card>
      </div>
      {notices.length > 0 && (
        <div style={{ ...tickerStyle, top: 0, position: 'fixed', left: 0, width: '100vw', zIndex: 5000 }}>
          <span style={{ fontSize: 24, marginRight: 18 }} role="img" aria-label="siren">üì£</span>
          <div style={tickerTextStyle}>
            {notices.map((n, i) => (
              <span key={n.id} style={{ marginRight: 48 }}>{n.content}</span>
            ))}
          </div>
          <style>{`@keyframes ticker { 0% { transform: translateX(100vw); } 100% { transform: translateX(-100vw); } }`}</style>
        </div>
      )}
      {feverActive && <CandyRain />}
      {showFeverModal && <Modal
        open={showFeverModal}
        onClose={() => setShowFeverModal(false)}
        aria-labelledby="fever-modal-title"
      >
        <Box sx={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: 480,
          bgcolor: 'background.paper',
          boxShadow: '0 8px 48px rgba(255, 193, 7, 0.4)',
          p: 5,
          borderRadius: 4,
          border: '4px solid #FFD700',
          textAlign: 'center',
          background: 'linear-gradient(135deg, #fff3e0 0%, #fff8e1 100%)'
        }}>
          <div style={{
            fontSize: 48,
            marginBottom: 16,
            animation: 'pulse 1.5s infinite'
          }}>
            üî•‚ú®üéâ
          </div>
          <Typography 
            id="fever-modal-title" 
            variant="h4" 
            component="h2" 
            gutterBottom
            sx={{ 
              fontWeight: 900, 
              color: '#FF6B35',
              fontSize: '2.2rem',
              letterSpacing: '-1px',
              textShadow: '2px 2px 4px rgba(255, 107, 53, 0.3)'
            }}
          >
            üî• ÌîºÎ≤ÑÌÉÄÏûÑ ÏãúÏûë! üî•
          </Typography>
          <Typography 
            variant="h6" 
            paragraph
            sx={{ 
              color: '#E65100',
              fontWeight: 700,
              fontSize: '1.3rem',
              lineHeight: 1.5,
              mb: 3
            }}
          >
            Í≤ΩÌóòÏπòÎ•º <span style={{ color: '#FF6B35', fontSize: '1.5rem' }}>2Î∞∞</span>Î°ú Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî!<br/>
            ÏßÄÍ∏àÏù¥ Î∞úÌëúÌï† Í∏∞ÌöåÏûÖÎãàÎã§! üöÄ
          </Typography>
          <Button
            variant="contained"
            fullWidth
            onClick={() => setShowFeverModal(false)}
            sx={{ 
              mt: 2,
              py: 2,
              fontSize: '1.2rem',
              fontWeight: 800,
              background: 'linear-gradient(45deg, #FF6B35 30%, #FFD700 90%)',
              boxShadow: '0 4px 16px rgba(255, 107, 53, 0.4)',
              borderRadius: 999,
              '&:hover': {
                background: 'linear-gradient(45deg, #E65100 30%, #FFC107 90%)',
              }
            }}
          >
            ÏãúÏûëÌïòÍ∏∞! üí™
          </Button>
          <style jsx>{`
            @keyframes pulse {
              0% { transform: scale(1); }
              50% { transform: scale(1.1); }
              100% { transform: scale(1); }
            }
          `}</style>
        </Box>
      </Modal>}
      {showMsgModal && (
        <div style={{ position: 'fixed', top: 60, left: 0, width: '100vw', height: 'calc(100vh - 60px)', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'flex-start', justifyContent: 'center', zIndex: 1000, paddingTop: 40 }}>
          <div style={{ background: '#fff', padding: '36px 32px 28px 32px', borderRadius: 24, minWidth: 340, maxWidth: 400, boxShadow: '0 4px 32px #b2ebf240', width: '90vw', marginTop: 0 }}>
            <div style={{ fontWeight: 700, fontSize: '1.18rem', marginBottom: 18, color: '#1976d2', letterSpacing: '-0.5px', textAlign: 'center' }}>ÏÑ†ÏÉùÎãòÍªò Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞</div>
            <textarea value={messageText} onChange={e => setMessageText(e.target.value)} style={{ width: '100%', minHeight: 80, borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 10, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box' }} placeholder="Î©îÏãúÏßÄ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" />
            <div style={{ marginTop: 0, textAlign: 'right', display: 'flex', gap: 10, justifyContent: 'flex-end' }}>
              <button onClick={() => { setShowMsgModal(false); setMessageText(''); }} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', transition: 'all 0.2s' }}>Ï∑®ÏÜå</button>
              <button onClick={handleSendMessage} disabled={!messageText.trim()} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', opacity: messageText.trim() ? 1 : 0.5, cursor: messageText.trim() ? 'pointer' : 'not-allowed', transition: 'all 0.2s' }}>Î≥¥ÎÇ¥Í∏∞</button>
            </div>
          </div>
        </div>
      )}
      {showPraiseModal && (
        <div style={{ position: 'fixed', top: 60, left: 0, width: '100vw', height: 'calc(100vh - 60px)', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'flex-start', justifyContent: 'center', zIndex: 1000, paddingTop: 40 }}>
          <div style={{ background: '#fff', padding: '36px 32px 28px 32px', borderRadius: 24, minWidth: 340, maxWidth: 400, boxShadow: '0 4px 32px #b2ebf240', width: '90vw', marginTop: 0 }}>
            <div style={{ fontWeight: 700, fontSize: '1.18rem', marginBottom: 18, color: '#1976d2', letterSpacing: '-0.5px', textAlign: 'center' }}>ÏπúÍµ¨ Ïπ≠Ï∞¨ÌïòÍ∏∞</div>
            <input value={praiseText} onChange={e => setPraiseText(e.target.value)} style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 10, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box' }} placeholder="Ïπ≠Ï∞¨ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" />
            <input type="number" value={praiseExp} onChange={e => setPraiseExp(Number(e.target.value))} min={1} max={100} style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 14, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box' }} placeholder="Ìù¨Îßù Í≤ΩÌóòÏπò" />
            {/* ÏπúÍµ¨ ÏÑ†ÌÉù UI Ï∂îÍ∞Ä */}
            <div style={{ marginBottom: 14 }}>
              <div style={{ fontWeight: 600, fontSize: 16, marginBottom: 8, color: '#1976d2' }}>Ïπ≠Ï∞¨Ìï† ÏπúÍµ¨ ÏÑ†ÌÉù</div>
              {studentsSnapshot && studentsSnapshot.docs.map(doc => {
                const friend = doc.data();
                const friendId = friend.id ? friend.id : doc.id;
                if (friendId === studentId) return null; // ÏûêÍ∏∞ ÏûêÏã† Ï†úÏô∏
                return (
                  <FormControlLabel
                    key={friendId}
                    control={
                      <Checkbox
                        checked={selectedFriends.includes(friendId)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedFriends([...selectedFriends, friendId]);
                          } else {
                            setSelectedFriends(selectedFriends.filter(id => id !== friendId));
                          }
                        }}
                      />
                    }
                    label={getPokemonName(friend.name, anonymousMode)}
                  />
                );
              })}
            </div>
            <div style={{ marginTop: 0, textAlign: 'right', display: 'flex', gap: 10, justifyContent: 'flex-end' }}>
              <button onClick={() => setShowPraiseModal(false)} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', transition: 'all 0.2s' }}>Ï∑®ÏÜå</button>
              <button onClick={handleSendPraise} disabled={!praiseText || selectedFriends.length === 0} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', opacity: praiseText && selectedFriends.length ? 1 : 0.5, cursor: praiseText && selectedFriends.length ? 'pointer' : 'not-allowed', transition: 'all 0.2s' }}>Î≥¥ÎÇ¥Í∏∞</button>
            </div>
          </div>
        </div>
      )}
      {showSelfPraiseModal && (
        <div style={{ position: 'fixed', top: 60, left: 0, width: '100vw', height: 'calc(100vh - 60px)', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'flex-start', justifyContent: 'center', zIndex: 1000, paddingTop: 40 }}>
          <div style={{ background: '#fff', padding: '36px 32px 28px 32px', borderRadius: 24, minWidth: 340, maxWidth: 400, boxShadow: '0 4px 32px #b2ebf240', width: '90vw', marginTop: 0 }}>
            <div style={{ fontWeight: 700, fontSize: '1.18rem', marginBottom: 18, color: '#1976d2', letterSpacing: '-0.5px', textAlign: 'center' }}>ÎÇò Ïπ≠Ï∞¨ÌïòÍ∏∞</div>
            <input value={selfPraiseText} onChange={e => setSelfPraiseText(e.target.value)} style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 10, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box' }} placeholder="Ïπ≠Ï∞¨ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" />
            <input type="number" value={selfPraiseExp} onChange={e => setSelfPraiseExp(Number(e.target.value))} min={1} max={100} style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 14, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box' }} placeholder="Ìù¨Îßù Í≤ΩÌóòÏπò" />
            <div style={{ marginTop: 0, textAlign: 'right', display: 'flex', gap: 10, justifyContent: 'flex-end' }}>
              <button onClick={() => setShowSelfPraiseModal(false)} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', transition: 'all 0.2s' }}>Ï∑®ÏÜå</button>
              <button onClick={handleSendSelfPraise} disabled={!selfPraiseText} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', opacity: selfPraiseText ? 1 : 0.5, cursor: selfPraiseText ? 'pointer' : 'not-allowed', transition: 'all 0.2s' }}>Î≥¥ÎÇ¥Í∏∞</button>
            </div>
          </div>
        </div>
      )}
      {/* Ïú†Î¶¨Î≥ë Î™®Îã¨ */}
      {showJarModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 4000 }}>
          <div style={{ background: '#fff', padding: 32, borderRadius: 48, minWidth: 340, boxShadow: '0 4px 32px #b2ebf240', maxWidth: '90vw', position: 'relative', border: '6px solid #b2ebf2' }}>
            <div style={{ fontWeight: 700, fontSize: '1.5rem', marginBottom: 18, color: '#1976d2', letterSpacing: '-0.5px', textAlign: 'center' }}>ÌïôÍ∏â Ï∫îÎîî Ïú†Î¶¨Î≥ë</div>
            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginBottom: 12 }}>
              {/* ÏÇ¨ÌÉï Í∑∏Î¶¨ÎìúÌòï Î∞∞Ïπò */}
              {(() => {
                const allCandies = [];
                candyCounts.forEach((count, idx) => {
                  for (let i = 0; i < count; i++) {
                    allCandies.push({ img: candyImages[idx], idx });
                  }
                });
                const perRow = 10;
                const numRows = Math.ceil(allCandies.length / perRow);
                return (
                  <div style={{ width: 320, height: 380, marginBottom: 8, display: 'flex', flexDirection: 'column-reverse', justifyContent: 'flex-start', alignItems: 'center', gap: 4 }}>
                    {Array.from({ length: numRows }).map((_, rowIdx) => (
                      <div key={rowIdx} style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-start', alignItems: 'flex-end', gap: 4, minHeight: 36 }}>
                        {Array.from({ length: perRow }).map((_, colIdx) => {
                          const candy = allCandies[rowIdx * perRow + colIdx];
                          return candy ? (
                            <img key={colIdx} src={candy.img} alt={`candy${candy.idx+1}`} style={{ width: 32, height: 32, filter: 'drop-shadow(0 2px 6px #b2ebf2a0)' }} />
                          ) : <div key={colIdx} style={{ width: 32, height: 32 }} />;
                        })}
                      </div>
                    ))}
                  </div>
                );
              })()}
              <div style={{ display: 'flex', gap: 12, marginTop: 2 }}>
                {candyCounts.map((count, idx) => (
                  <div key={idx} style={{ display: 'flex', alignItems: 'center', gap: 4, fontWeight: 600, color: '#1976d2', fontSize: 15 }}>
                    <img src={candyImages[idx]} alt={`candy${idx+1}`} style={{ width: 22, height: 22, marginRight: 2 }} />
                    x{count}
                  </div>
                ))}
              </div>
              <div style={{ color: '#888', fontSize: 13, marginTop: 4 }}>ÌïôÏÉùÎì§Ïù¥ Î†àÎ≤®ÏóÖÌï† ÎïåÎßàÎã§ ÏÇ¨ÌÉïÏù¥ Ïú†Î¶¨Î≥ëÏóê ÏåìÏó¨Ïöî!</div>
            </div>
            <div style={{ textAlign: 'center', marginTop: 18 }}>
              <button onClick={() => setShowJarModal(false)} style={{ fontWeight: 600, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', transition: 'all 0.2s' }}>Îã´Í∏∞</button>
            </div>
          </div>
        </div>
      )}
      {/* Í≤åÏãúÌåê ÏûÖÏû• Î™®Îã¨ */}
      {showBoardModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 3000 }}>
          <div style={{ background: '#fff', padding: 32, borderRadius: 20, minWidth: 320, maxWidth: 400, boxShadow: '0 4px 32px #b2ebf240', textAlign: 'center' }}>
            <div style={{ fontWeight: 700, fontSize: '1.15rem', marginBottom: 18, color: '#1976d2' }}>Í≤åÏãúÌåê ÏΩîÎìú ÏûÖÎ†•</div>
            <input value={boardCodeInput} onChange={e => setBoardCodeInput(e.target.value)} maxLength={8} style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 18, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box', textAlign: 'center', letterSpacing: 2, fontWeight: 600 }} placeholder="ÏΩîÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî" />
            <div style={{ display: 'flex', gap: 10, justifyContent: 'center', marginTop: 8 }}>
              <button onClick={() => setShowBoardModal(false)} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', transition: 'all 0.2s' }}>Ï∑®ÏÜå</button>
              <button onClick={handleEnterBoard} disabled={!boardCodeInput.trim()} style={{ fontWeight: 600, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #b2ebf240', opacity: boardCodeInput.trim() ? 1 : 0.5, cursor: boardCodeInput.trim() ? 'pointer' : 'not-allowed', transition: 'all 0.2s' }}>ÏûÖÏû•</button>
            </div>
          </div>
        </div>
      )}
      {/* Ï∫îÎîîÏàç Î™®Îã¨ */}
      {showShopModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 4000 }}>
          <div style={{ background: '#fff', padding: 40, borderRadius: 32, minWidth: 420, maxWidth: 520, boxShadow: '0 8px 48px #b2ebf240', textAlign: 'center', position: 'relative' }}>
            <button onClick={() => setShowShopModal(false)} style={{ position: 'absolute', top: 18, right: 18, background: 'none', border: 'none', fontSize: 28, color: '#bbb', cursor: 'pointer', fontWeight: 700 }}>√ó</button>
            <div style={{ display: 'flex', justifyContent: 'center', gap: 24, marginBottom: 18 }}>
              <button onClick={() => setShopTab('deposit')} style={{ fontWeight: 700, fontSize: 18, color: shopTab==='deposit' ? '#d72660' : '#888', background: 'none', border: 'none', borderBottom: shopTab==='deposit' ? '3px solid #d72660' : '3px solid #eee', padding: '8px 24px', cursor: 'pointer', transition: 'all 0.2s' }}>ÏûÖÍ∏à</button>
              <button onClick={() => setShopTab('buy')} style={{ fontWeight: 700, fontSize: 18, color: shopTab==='buy' ? '#d72660' : '#888', background: 'none', border: 'none', borderBottom: shopTab==='buy' ? '3px solid #d72660' : '3px solid #eee', padding: '8px 24px', cursor: 'pointer', transition: 'all 0.2s' }}>Íµ¨ÏûÖ</button>
            </div>
            {/* ÎÇ¥ ÏûîÏï° ÌëúÏãú */}
            <div style={{ fontWeight: 800, fontSize: 22, color: '#1976d2', marginBottom: 18, letterSpacing: '-1px' }}>
              ÎÇ¥ ÏûîÏï°: {student?.balance ?? 0}Ïõê
            </div>
            {shopTab === 'deposit' && (
              <div style={{ minHeight: 180, padding: 20 }}>
                <div style={{ fontWeight: 700, fontSize: 20, color: '#1976d2', marginBottom: 18 }}>ÏûÖÍ∏à</div>
                <input type="text" value={depositReason} onChange={e => setDepositReason(e.target.value)} placeholder="ÏûÖÍ∏à ÏÇ¨Ïú†" style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 12, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box', textAlign: 'center', fontWeight: 600 }} />
                <input type="number" value={depositAmount} onChange={e => setDepositAmount(e.target.value)} placeholder="Í∏àÏï°" style={{ width: '100%', borderRadius: 14, border: '2px solid #e0f7fa', padding: 12, fontSize: 16, outline: 'none', marginBottom: 8, background: '#f7faf7', color: '#222', transition: 'border 0.2s', boxSizing: 'border-box', textAlign: 'center', fontWeight: 600 }} />
                {depositError && <div style={{ color: '#d72660', fontWeight: 700, marginTop: 4 }}>{depositError}</div>}
                <button onClick={async () => {
                  if (!depositReason.trim()) {
                    setDepositError('ÏûÖÍ∏à ÏÇ¨Ïú†Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.');
                    return;
                  }
                  if (!depositAmount || isNaN(Number(depositAmount)) || Number(depositAmount) <= 0) return;
                  await updateDoc(doc(db, 'students', studentId), {
                    balance: (student.balance || 0) + Number(depositAmount),
                    transactions: arrayUnion({
                      type: 'deposit',
                      reason: depositReason,
                      amount: Number(depositAmount),
                      ts: Date.now()
                    })
                  });
                  setDepositSuccess(true);
                  setTimeout(() => setDepositSuccess(false), 1200);
                  setDepositReason('');
                  setDepositAmount('');
                  setDepositError('');
                }} disabled={!depositReason.trim() || !depositAmount || isNaN(Number(depositAmount)) || Number(depositAmount) <= 0} style={{ fontWeight: 600, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '10px 32px', fontSize: 17, boxShadow: '0 2px 8px #b2ebf240', cursor: (!depositReason.trim() || !depositAmount || isNaN(Number(depositAmount)) || Number(depositAmount) <= 0) ? 'not-allowed' : 'pointer', opacity: (!depositReason.trim() || !depositAmount || isNaN(Number(depositAmount)) || Number(depositAmount) <= 0) ? 0.5 : 1, marginTop: 8 }}>ÏûÖÍ∏à ÏôÑÎ£å</button>
                {depositSuccess && <div style={{ color: '#43a047', fontWeight: 700, marginTop: 16 }}>ÏûÖÍ∏àÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!</div>}
              </div>
            )}
            {shopTab === 'buy' && (
              <div style={{ minHeight: 180, maxHeight: 540, padding: 0, display: 'flex', flexDirection: 'column', height: '60vh', minWidth: 320 }}>
                <div style={{ fontWeight: 700, fontSize: 20, color: '#1976d2', margin: '18px 0 12px 0', textAlign: 'center' }}>ÏÉÅÌíà Íµ¨ÏûÖ</div>
                <div style={{ flex: 1, overflowY: 'auto', padding: '0 18px', marginBottom: 8, display: 'flex', flexWrap: 'wrap', gap: 18, justifyContent: 'center' }}>
                  {itemsSnapshot && itemsSnapshot.docs.map(doc => {
                    const item = doc.data();
                    const qty = buyQuantities[item.name] || 0;
                    const canBuy = (student?.balance ?? 0) >= item.price;
                    return (
                      <div key={item.name} style={{
                        border: `2px solid ${canBuy ? '#90caf9' : '#ffb6b9'}`,
                        borderRadius: 18,
                        background: canBuy ? '#f7faf7' : '#fff0f0',
                        minWidth: 120,
                        maxWidth: 150,
                        padding: 18,
                        textAlign: 'center',
                        boxShadow: canBuy ? '0 2px 8px #b2ebf240' : '0 2px 8px #ffb6b930',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                      }}>
                        <div style={{ fontWeight: 700, fontSize: 18, color: canBuy ? '#1976d2' : '#d72660', marginBottom: 6 }}>{item.name}</div>
                        <div style={{ color: canBuy ? '#43a047' : '#d72660', fontWeight: 600, fontSize: 16, marginBottom: 10 }}>{item.price}Ïõê</div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginBottom: 8 }}>
                          <button onClick={() => setBuyQuantities(q => ({ ...q, [item.name]: Math.max(0, (q[item.name]||0)-1) }))} style={{ borderRadius: 999, background: canBuy ? '#e0f7fa' : '#ffe4ec', color: canBuy ? '#1976d2' : '#d72660', border: 'none', width: 28, height: 28, fontWeight: 700, fontSize: 18, cursor: 'pointer' }}>-</button>
                          <span style={{ fontWeight: 700, fontSize: 17, minWidth: 18, display: 'inline-block', textAlign: 'center' }}>{qty}</span>
                          <button onClick={() => setBuyQuantities(q => ({ ...q, [item.name]: (q[item.name]||0)+1 }))} style={{ borderRadius: 999, background: canBuy ? '#e0f7fa' : '#ffe4ec', color: canBuy ? '#1976d2' : '#d72660', border: 'none', width: 28, height: 28, fontWeight: 700, fontSize: 18, cursor: 'pointer' }}>+</button>
                        </div>
                        <div style={{ color: canBuy ? '#888' : '#d72660', fontSize: 14, marginBottom: 8 }}>Ìï©Í≥Ñ: {item.price * qty}Ïõê</div>
                      </div>
                    );
                  })}
                  {/* ÏßÅÏ†ëÏûÖÎ†• Ïπ¥Îìú */}
                  <div style={{ border: '2px solid #ffe4ec', borderRadius: 18, background: '#fffde7', minWidth: 120, maxWidth: 150, padding: 18, textAlign: 'center', boxShadow: '0 2px 8px #f8bbd0a0', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: 140 }}>
                    <div style={{ fontWeight: 700, fontSize: 18, color: '#d72660', marginBottom: 10 }}>ÏßÅÏ†ë ÏûÖÎ†•</div>
                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 6, flex: 1 }}>
                      <input type="number" value={buyCustomAmount} onChange={e => setBuyCustomAmount(e.target.value)} placeholder="Í∏àÏï°" style={{ width: 60, borderRadius: 10, border: '1.5px solid #e0f7fa', padding: '6px 10px', fontSize: 15, background: '#fff', color: '#222', textAlign: 'center', fontWeight: 600 }} />
                      <span style={{ color: '#888', fontSize: 15, fontWeight: 600 }}>Ïõê</span>
                    </div>
                  </div>
                </div>
                {/* Ï¥ùÌï©/Íµ¨ÏûÖ Î≤ÑÌäº - ÌïòÎã® Í≥†Ï†ï */}
                <div style={{ position: 'sticky', bottom: 0, left: 0, right: 0, background: '#fff', padding: '18px 0 10px 0', borderTop: '1.5px solid #e0f7fa', zIndex: 10, boxShadow: '0 -2px 8px #b2ebf220', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                  <div style={{ fontWeight: 600, color: '#1976d2', fontSize: 17, marginBottom: 6 }}>
                    Ï¥ùÌï©: {
                      (() => {
                        let sum = 0;
                        if (itemsSnapshot) itemsSnapshot.docs.forEach(doc => {
                          const item = doc.data();
                          sum += (buyQuantities[item.name]||0) * item.price;
                        });
                        sum += Number(buyCustomAmount)||0;
                        return sum;
                      })()
                    } Ïõê
                  </div>
                  <button onClick={async () => {
                    let sum = 0;
                    let itemsObj = {};
                    if (itemsSnapshot) itemsSnapshot.docs.forEach(doc => {
                      const item = doc.data();
                      const qty = buyQuantities[item.name]||0;
                      sum += qty * item.price;
                      if (qty > 0) itemsObj[item.name] = qty;
                    });
                    const custom = Number(buyCustomAmount)||0;
                    sum += custom;
                    if (sum <= 0) {
                      setBuyError('Íµ¨ÏûÖÌï† ÏÉÅÌíàÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.');
                      setBuySuccess('');
                      return;
                    }
                    if ((student.balance||0) < sum) {
                      setBuyError('ÏûîÏï°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§.');
                      setBuySuccess('');
                      return;
                    }
                    await updateDoc(doc(db, 'students', studentId), {
                      balance: (student.balance||0) - sum,
                      transactions: arrayUnion({
                        type: 'spend',
                        items: itemsObj,
                        customAmount: custom,
                        amount: sum,
                        ts: Date.now()
                      })
                    });
                    setBuyError('');
                    setBuySuccess('Íµ¨ÏûÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
                    setBuyQuantities({});
                    setBuyCustomAmount('');
                    setTimeout(() => setBuySuccess(''), 1500);
                  }} style={{ fontWeight: 600, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '10px 32px', fontSize: 17, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', marginTop: 4 }}>Íµ¨ÏûÖ</button>
                  {buyError && <div style={{ color: '#d72660', fontWeight: 700, marginTop: 10 }}>{buyError}</div>}
                  {buySuccess && <div style={{ color: '#43a047', fontWeight: 700, marginTop: 10 }}>{buySuccess}</div>}
                </div>
              </div>
            )}
          </div>
        </div>
      )}
      {/* ÏïåÎ¶º Î™®Îã¨ */}
      {showNotificationModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.32)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 6000 }}>
          <div style={{ background: '#fff', borderRadius: 32, padding: 36, minWidth: 340, maxWidth: 420, boxShadow: '0 12px 64px #1976d220', textAlign: 'center', opacity: 0.99, border: '4px solid #1976d2', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <div style={{ fontSize: 28, color: '#1976d2', marginBottom: 18, fontWeight: 900, letterSpacing: '-1.5px', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 10 }}>
              <span role="img" aria-label="bell">üîî</span> ÏïåÎ¶ºÌï®
            </div>
            {/* ÌÉ≠ UI */}
            <div style={{ display: 'flex', gap: 8, marginBottom: 18, flexWrap: 'wrap', justifyContent: 'center' }}>
              {['Î©îÏãúÏßÄ', 'ÏπúÍµ¨ Î©îÏãúÏßÄ', 'ÌÄòÏä§Ìä∏ ÏäπÏù∏Ïó¨Î∂Ä', 'ÏïåÎûå'].map(tab => (
                <button
                  key={tab}
                  onClick={() => {
                    setNotificationTab(tab);
                    if (tab === 'ÏπúÍµ¨ Î©îÏãúÏßÄ') {
                      markFriendMessagesAsRead();
                    }
                  }}
                  style={{
                    fontWeight: notificationTab === tab ? 700 : 500,
                    borderRadius: 999,
                    background: notificationTab === tab ? '#e0f7fa' : '#f7faf7',
                    color: '#1976d2',
                    border: 'none',
                    padding: '7px 22px',
                    fontSize: 15,
                    boxShadow: '0 2px 8px #b2ebf240',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                  }}
                >
                  {tab}
                </button>
              ))}
            </div>
            {/* ÏïåÎ¶º Î¶¨Ïä§Ìä∏ ÌïÑÌÑ∞ÎßÅ */}
            <div style={{ maxHeight: 320, overflowY: 'auto', width: '100%' }}>
              {(() => {
                if (notificationTab === 'Î©îÏãúÏßÄ') {
                  // Ïò§ÏßÅ ÏÑ†ÏÉùÎãòÏù¥ Î≥¥ÎÇ∏ ÏùºÎ∞ò Î©îÏãúÏßÄÎßå (ÌÄòÏä§Ìä∏/Ïπ≠Ï∞¨ Îì± ÏãúÏä§ÌÖú Î©îÏãúÏßÄ Ï†úÏô∏)
                  const messageList = (student?.messages||[])
                    .filter(m => m.from === 'teacher' && !m.text?.startsWith('ÌÄòÏä§Ìä∏ Ïã§Ìå®') && !m.text?.startsWith('ÌÄòÏä§Ìä∏ ÏÑ±Í≥µ'))
                    .sort((a, b) => b.ts - a.ts);
                  if (messageList.length === 0) return <div style={{ color: '#888', fontSize: 16, margin: '32px 0' }}>ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.</div>;
                  return messageList.map((m, i) => (
                    <div key={i} style={{ background: '#fffde7', borderRadius: 12, padding: '10px 14px', marginBottom: 8, color: '#ff9800', fontWeight: 600, textAlign: 'left', fontSize: 15 }}>{m.text}</div>
                  ));
                } else if (notificationTab === 'ÏπúÍµ¨ Î©îÏãúÏßÄ') {
                  // ÏπúÍµ¨Îì§Î°úÎ∂ÄÌÑ∞ Î∞õÏùÄ Î©îÏãúÏßÄÎì§
                  if (friendMessages.length === 0) return <div style={{ color: '#888', fontSize: 16, margin: '32px 0' }}>Î∞õÏùÄ Î©îÏãúÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.</div>;
                  return friendMessages.map((msg, i) => (
                    <div key={`friend-msg-${msg.id || msg.timestamp}-${i}`} style={{ 
                      background: '#e8f5e8', 
                      borderRadius: 12, 
                      padding: '12px 16px', 
                      marginBottom: 8, 
                      textAlign: 'left', 
                      fontSize: 15,
                      border: '2px solid #c8e6c9'
                    }}>
                      <div style={{ 
                        fontWeight: 700, 
                        color: '#2e7d32', 
                        fontSize: 14, 
                        marginBottom: 4, 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: 6 
                      }}>
                        <span role="img" aria-label="friend">üë•</span>
                        {getPokemonName(msg.fromName, anonymousMode)}ÎãòÏúºÎ°úÎ∂ÄÌÑ∞
                        <span style={{ fontSize: 12, color: '#666', fontWeight: 400 }}>
                          {new Date(msg.timestamp).toLocaleString('ko-KR', { 
                            month: 'short', 
                            day: 'numeric', 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </span>
                      </div>
                      <div style={{ color: '#1b5e20', fontWeight: 500, lineHeight: '1.4' }}>
                        {msg.message}
                      </div>
                    </div>
                  ));
                } else if (notificationTab === 'ÌÄòÏä§Ìä∏ ÏäπÏù∏Ïó¨Î∂Ä') {
                  // Îã§ÏñëÌïú ÏÑ±Í≥µ/Ïã§Ìå® statusÎ•º Î™®Îëê Ìè¨Ìï®
                  const questList = (student?.quests||[])
                    .filter(q => ['success','done','fail','failed','rejected','reject'].includes((q.status||'').toLowerCase()))
                    .sort((a, b) => b.ts - a.ts);
                  if (questList.length === 0) return <div style={{ color: '#888', fontSize: 16, margin: '32px 0' }}>ÏôÑÎ£åÎêú ÌÄòÏä§Ìä∏ ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.</div>;
                  return questList.map((q, i) => {
                    const isSuccess = ['success','done'].includes((q.status||'').toLowerCase());
                    const isFail = ['fail','failed','rejected','reject'].includes((q.status||'').toLowerCase());
                    return (
                      <div key={i} style={{ background: isSuccess ? '#e0f7fa' : '#ffe4ec', borderRadius: 12, padding: '10px 14px', marginBottom: 8, color: isSuccess ? '#1976d2' : '#d72660', fontWeight: 600, textAlign: 'left', fontSize: 15 }}>
                        {isSuccess ? (
                          <>ÌÄòÏä§Ìä∏ ÏÑ±Í≥µ! <span style={{ color: '#43a047', fontWeight: 700 }}>+{q.exp}xp</span></>
                        ) : (
                          <>ÌÄòÏä§Ìä∏ Ïã§Ìå®: <span style={{ color: '#d72660', fontWeight: 700 }}>{q.failReason || q.reason || 'ÏÇ¨Ïú† ÎØ∏ÏûÖÎ†•'}</span></>
                        )}
                      </div>
                    );
                  });
                } else if (notificationTab === 'ÏïåÎûå') {
                  // announce, notifications, ÏπúÍµ¨ Ïπ≠Ï∞¨(praise), Ïπ≠Ï∞¨ Í≤ΩÌóòÏπò(expEvents) Î™®Îëê Ìï©Ïπ®
                  const praiseAlarms = (student?.praise||[])
                    .filter(p => p.checked && p.result === 'approved' && p.from && p.fromName)
                    .map(p => ({
                      ts: p.ts,
                      text: `üíñ ${p.fromName}ÎãòÏù¥ ÎÇòÎ•º Ïπ≠Ï∞¨ÌñàÏñ¥Ïöî! (${p.text || 'Ïπ≠Ï∞¨'}) +${p.exp||p.amount||0}xp üíñ`
                    }));
                  const expEventsPraise = (student?.expEvents||[])
                    .filter(e => e.type === 'friendPraise' && e.from && e.result === 'approved')
                    .map(e => ({
                      ts: e.ts,
                      text: `üíñ ${e.fromName||e.from||'ÏπúÍµ¨'}ÎãòÏù¥ ÎÇòÎ•º Ïπ≠Ï∞¨ÌñàÏñ¥Ïöî! (${e.text||'Ïπ≠Ï∞¨'}) +${e.exp||e.amount||0}xp üíñ`
                    }));
                  const alarms = [
                    ...(student?.announce||[]),
                    ...(student?.notifications||[]),
                    ...praiseAlarms,
                    ...expEventsPraise
                  ].sort((a, b) => (b.ts||0) - (a.ts||0));
                  if (!alarms || alarms.length === 0) return <div style={{ color: '#888', fontSize: 16, margin: '32px 0' }}>ÏïåÎûå ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.</div>;
                  return alarms.map((a, i) => (
                    <div key={i} style={{ background: '#e3f2fd', borderRadius: 12, padding: '10px 14px', marginBottom: 8, color: '#1976d2', fontWeight: 600, textAlign: 'left', fontSize: 15 }}>{a.text || a.message}</div>
                  ));
                }
                return null;
              })()}
            </div>
            <button onClick={() => setShowNotificationModal(false)} style={{ fontWeight: 700, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '10px 32px', fontSize: 17, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer', marginTop: 18 }}>Îã´Í∏∞</button>
          </div>
        </div>
      )}
      {/* Ïπ¥Îìú ÏÑ†ÌÉù Î™®Îã¨ */}
      {showCardModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.5)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 10000 }}>
          <div style={{ background: '#fff', borderRadius: 32, padding: 44, minWidth: 340, maxWidth: 480, boxShadow: '0 12px 64px #f57f1720', textAlign: 'center', border: '4px solid #FFD700', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <div style={{ fontSize: 26, color: '#FFD700', marginBottom: 18, fontWeight: 900, letterSpacing: '-1.5px', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 10 }}>
              Ïπ¥ÎìúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî!
            </div>
            {!cardResult ? (
              <>
                <div style={{ display: 'flex', gap: 16, marginBottom: 24, justifyContent: 'center', flexWrap: 'wrap' }}>
                  {cardChoices.map((card, idx) => (
                    <div
                      key={idx}
                      onClick={() => selectedCardIndex === null && handleCardSelect(card, idx)}
                      style={{
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        background: '#f7faf7',
                        borderRadius: 16,
                        padding: '16px 12px',
                        cursor: selectedCardIndex === null ? 'pointer' : 'default',
                        boxShadow: '0 4px 12px #b2ebf240',
                        transition: 'transform 0.3s, box-shadow 0.3s, opacity 0.3s',
                        border: selectedCardIndex === idx ? '3px solid #FFD700' : '2px solid #e0e0e0',
                        minWidth: 100,
                        maxWidth: 120,
                        opacity: selectedCardIndex !== null && selectedCardIndex !== idx ? 0.3 : 1,
                        transform: selectedCardIndex === idx ? 'scale(1.1)' : 'scale(1)'
                      }}
                      onMouseOver={e => {
                        if (selectedCardIndex === null) {
                          e.currentTarget.style.transform = 'translateY(-4px)';
                          e.currentTarget.style.boxShadow = '0 8px 24px #b2ebf260';
                          e.currentTarget.style.borderColor = '#FFD700';
                        }
                      }}
                      onMouseOut={e => {
                        if (selectedCardIndex === null) {
                          e.currentTarget.style.transform = 'translateY(0)';
                          e.currentTarget.style.boxShadow = '0 4px 12px #b2ebf240';
                          e.currentTarget.style.borderColor = '#e0e0e0';
                        }
                      }}
                    >
                      {selectedCardIndex === idx && cardResult ? (
                        // ÏÑ†ÌÉùÎêú Ïπ¥Îìú: Ïã§Ï†ú Ïù¥ÎØ∏ÏßÄÏôÄ ÎùºÎ≤® ÌëúÏãú
                        <>
                          <img src={card.img} alt={card.label} style={{ width: 48, height: 48, marginBottom: 8 }} />
                          <span style={{ fontWeight: 700, color: '#FFD700', fontSize: 14, textAlign: 'center', lineHeight: '1.2' }}>
                            {card.label}
                          </span>
                        </>
                      ) : (
                        // ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÍ±∞ÎÇò ÏïÑÏßÅ Í≥µÍ∞úÎêòÏßÄ ÏïäÏùÄ Ïπ¥Îìú: Ïπ¥ÎìúÎ∞± Ïù¥ÎØ∏ÏßÄ
                        <>
                          <img src={CARD_BACK_IMAGE} alt="Ïπ¥Îìú Îí∑Î©¥" style={{ width: 48, height: 48, marginBottom: 8 }} />
                          <span style={{ fontWeight: 700, color: '#888', fontSize: 14, textAlign: 'center', lineHeight: '1.2' }}>
                            ???
                          </span>
                        </>
                      )}
                    </div>
                  ))}
                </div>
                <div style={{ color: '#888', fontSize: 14, marginBottom: 18 }}>
                  ÏõêÌïòÎäî Ïπ¥ÎìúÎ•º ÌÅ¥Î¶≠Ìï¥ÏÑú Ïø†Ìè∞ÏùÑ Î∞õÏúºÏÑ∏Ïöî!
                </div>
              </>
            ) : (
              <div style={{ textAlign: 'center', marginBottom: 24 }}>
                <div style={{ fontSize: 20, color: '#43a047', fontWeight: 700, marginBottom: 16 }}>
                  üéâ Ïπ¥Îìú ÏÑ†ÌÉù ÏôÑÎ£å! üéâ
                </div>
                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', background: '#e8f5e8', borderRadius: 16, padding: 24, border: '2px solid #43a047' }}>
                  <img src={cardResult.img} alt={cardResult.label} style={{ width: 64, height: 64, marginBottom: 12 }} />
                  <span style={{ fontWeight: 700, color: '#43a047', fontSize: 18 }}>
                    {cardResult.label}
                  </span>
                  <div style={{ color: '#43a047', fontSize: 14, marginTop: 8 }}>
                    Ïø†Ìè∞Ìï®Ïóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!
                  </div>
                </div>
              </div>
            )}
            {!cardResult && (
              <button onClick={handleCloseCardModal} style={{ fontWeight: 700, borderRadius: 999, background: '#ffe4ec', color: '#d72660', border: 'none', padding: '10px 32px', fontSize: 17, boxShadow: '0 2px 8px #f8bbd0a0', cursor: 'pointer' }}>
                ÎÇòÏ§ëÏóê
              </button>
            )}
          </div>
        </div>
      )}
      {/* Ïø†Ìè∞Ìï® Î™®Îã¨ */}
      {couponBoxOpen && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.32)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 8000 }}>
          <div style={{ background: '#fff', borderRadius: 32, padding: 44, minWidth: 340, maxWidth: 480, boxShadow: '0 12px 64px #f57f1720', textAlign: 'center', opacity: 0.99, border: '4px solid #d72660', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <div style={{ fontSize: 26, color: '#d72660', marginBottom: 18, fontWeight: 900, letterSpacing: '-1.5px', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 10 }}>
              <span role="img" aria-label="coupon">üéüÔ∏è</span> ÎÇ¥ Ïø†Ìè∞Ìï®
            </div>
            {/* ÌÉ≠ UI */}
            <div style={{ display: 'flex', gap: 12, marginBottom: 18 }}>
              <button onClick={() => setCouponTab('unused')} style={{ fontWeight: couponTab === 'unused' ? 700 : 500, borderRadius: 999, background: couponTab === 'unused' ? '#e0f7fa' : '#f7faf7', color: '#1976d2', border: 'none', padding: '7px 22px', fontSize: 15, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', transition: 'all 0.2s' }}>ÏÇ¨Ïö© Ï†Ñ</button>
              <button onClick={() => setCouponTab('used')} style={{ fontWeight: couponTab === 'used' ? 700 : 500, borderRadius: 999, background: couponTab === 'used' ? '#e0f7fa' : '#f7faf7', color: '#1976d2', border: 'none', padding: '7px 22px', fontSize: 15, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', transition: 'all 0.2s' }}>ÏÇ¨Ïö©ÏôÑÎ£å</button>
            </div>
            {/* Ïø†Ìè∞ Î¶¨Ïä§Ìä∏ */}
            {coupons.filter(c => couponTab === 'unused' ? !c.used : c.used).length === 0 ? (
              <div style={{ color: '#888', fontSize: 16, margin: '32px 0' }}>Ìï¥Îãπ Ïø†Ìè∞Ïù¥ ÏóÜÏäµÎãàÎã§.</div>
            ) : (
              <div style={{ display: 'flex', flexDirection: 'column', gap: 12, width: '100%', maxHeight: 320, overflowY: 'auto' }}>
                {coupons.filter(c => couponTab === 'unused' ? !c.used : c.used).sort((a, b) => (b.ts || 0) - (a.ts || 0)).map((c, i) => (
                  <div key={i} style={{ display: 'flex', alignItems: 'center', gap: 14, background: '#f7faf7', borderRadius: 12, padding: '10px 18px', boxShadow: '0 2px 8px #b2ebf240', justifyContent: 'space-between' }}>
                    <img src={c.img} alt={c.label} style={{ width: 38, height: 38 }} />
                    <div style={{ flex: 1, textAlign: 'left', fontWeight: 700, color: '#1976d2', fontSize: 16 }}>{c.label}</div>
                    <span style={{ fontWeight: 700, borderRadius: 999, padding: '6px 18px', fontSize: 15, boxShadow: '0 2px 8px #f8bbd0a0', background: c.used ? '#eee' : '#e0f7fa', color: c.used ? '#888' : '#1976d2', border: 'none', display: 'inline-block' }}>{c.used ? 'ÏÇ¨Ïö©ÏôÑÎ£å' : 'ÎØ∏ÏÇ¨Ïö©'}</span>
                  </div>
                ))}
              </div>
            )}
            <button onClick={() => setCouponBoxOpen(false)} style={{ fontWeight: 600, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '8px 32px', fontSize: 15, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', marginTop: 24 }}>Îã´Í∏∞</button>
          </div>
        </div>
      )}
      {/* Ïö∞Ï∏° ÌïòÎã®: ÎßÅÌÅ¨ ÌûàÏä§ÌÜ†Î¶¨ & ÏóÖÎç∞Ïù¥Ìä∏ Ï†ïÎ≥¥ & Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä Î≤ÑÌäº */}
      <div style={{ position: 'fixed', right: 32, bottom: 32, zIndex: 3000, display: 'flex', gap: 18 }}>


        {/* Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä Î≤ÑÌäº - Ï†úÏ∂ú Ï†ÑÍπåÏßÄ Î¨¥ÏßÄÍ∞úÏÉâ ÌÖåÎëêÎ¶¨Î°ú Í∞ïÏ°∞ */}
        {student && !hasSubmittedToday && (
          <button
            onClick={() => setShowEmotionAttendanceModal(true)}
            style={{
              border: '3px solid transparent',
              background: hasSubmittedToday 
                ? '#fff' 
                : 'linear-gradient(white, white) padding-box, linear-gradient(45deg, #ff0000, #ff8000, #ffff00, #80ff00, #00ff00, #00ff80, #00ffff, #0080ff, #0000ff, #8000ff, #ff00ff, #ff0080) border-box',
              color: '#3b5998',
              borderRadius: 999,
              padding: '12px 32px',
              fontWeight: 700,
              fontSize: 18,
              display: 'flex',
              alignItems: 'center',
              gap: 10,
              boxShadow: hasSubmittedToday 
                ? '0 2px 12px #b2ebf240' 
                : '0 4px 20px rgba(255, 107, 53, 0.4), 0 0 20px rgba(255, 107, 53, 0.3)',
              cursor: 'pointer',
              letterSpacing: '-0.5px',
              transition: 'all 0.3s ease',
              animation: hasSubmittedToday ? 'none' : 'pulse 2s infinite',
            }}
            onMouseOver={e => {
              if (!hasSubmittedToday) {
                e.currentTarget.style.transform = 'scale(1.05)';
                e.currentTarget.style.boxShadow = '0 6px 25px rgba(255, 107, 53, 0.5), 0 0 25px rgba(255, 107, 53, 0.4)';
              }
            }}
            onMouseOut={e => {
              if (!hasSubmittedToday) {
                e.currentTarget.style.transform = 'scale(1)';
                e.currentTarget.style.boxShadow = '0 4px 20px rgba(255, 107, 53, 0.4), 0 0 20px rgba(255, 107, 53, 0.3)';
              }
            }}
          >
            <span style={{ fontSize: '22px' }}>üåà</span>
            <span style={{ fontWeight: 700, fontSize: 17, color: '#3b5998' }}>Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä</span>
          </button>
        )}




        
        <button
          onClick={() => setShowLinkHistoryModal(true)}
          style={{
            border: '2.5px solid #1976d2',
            background: '#fff',
            color: '#1976d2',
            borderRadius: 999,
            padding: '12px 32px',
            fontWeight: 700,
            fontSize: 18,
            display: 'flex',
            alignItems: 'center',
            gap: 10,
            boxShadow: '0 2px 12px #b2ebf240',
            cursor: 'pointer',
            letterSpacing: '-0.5px',
            transition: 'background 0.18s, color 0.18s',
          }}
          onMouseOver={e => e.currentTarget.style.background = '#e3f2fd'}
          onMouseOut={e => e.currentTarget.style.background = '#fff'}
        >
          <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="#1976d2" strokeWidth="2.2" strokeLinecap="round" strokeLinejoin="round"><path d="M10 13a5 5 0 0 1 7 7l-1.5 1.5a5 5 0 0 1-7-7"/><path d="M14 11a5 5 0 0 0-7-7L5.5 5.5a5 5 0 0 0 7 7"/></svg>
          <span style={{ fontWeight: 700, fontSize: 17, color: '#1976d2' }}>Ï∫îÎîî ÎßÅÌÅ¨</span>
        </button>
        <button
          onClick={() => setShowDataBoardModal(true)}
          style={{
            border: '2.5px solid #1976d2',
            background: '#fff',
            color: '#1976d2',
            borderRadius: 999,
            padding: '12px 32px',
            fontWeight: 700,
            fontSize: 18,
            display: 'flex',
            alignItems: 'center',
            gap: 10,
            boxShadow: '0 2px 12px #b2ebf240',
            cursor: 'pointer',
            letterSpacing: '-0.5px',
            transition: 'background 0.18s, color 0.18s',
          }}
          onMouseOver={e => e.currentTarget.style.background = '#e3f2fd'}
          onMouseOut={e => e.currentTarget.style.background = '#fff'}
        >
          <span style={{ fontWeight: 700, color: '#1976d2', fontSize: 20, lineHeight: '1', display: 'flex', alignItems: 'center' }}>üìä</span>
          <span style={{ fontWeight: 700, fontSize: 17, color: '#1976d2' }}>Îç∞Ïù¥ÌÑ∞ Ï†ÑÍ¥ëÌåê</span>
        </button>
      </div>
      {/* Ï∫îÎîî ÎßÅÌÅ¨(Íµ¨ ÎßÅÌÅ¨ ÌûàÏä§ÌÜ†Î¶¨) Î™®Îã¨ */}
      {showLinkHistoryModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.32)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 9000 }}>
          <div style={{ background: '#fff', borderRadius: 28, padding: 36, minWidth: 340, maxWidth: 420, boxShadow: '0 12px 64px #1976d220', textAlign: 'center', border: '4px solid #1976d2', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <div style={{ fontSize: 24, color: '#1976d2', marginBottom: 18, fontWeight: 900, letterSpacing: '-1px', display: 'flex', alignItems: 'center', gap: 10 }}>
              <span role="img" aria-label="link">üîó</span> <span>Ï∫îÎîî ÎßÅÌÅ¨</span>
            </div>
            <div style={{ maxHeight: 320, overflowY: 'auto', width: '100%', marginBottom: 18 }}>
              {Array.isArray(student?.links) && student.links.length > 0 ? (
                student.links.slice().sort((a, b) => (b.ts||0)-(a.ts||0)).map((link, i) => (
                  <div key={i} style={{ 
                    display: 'flex', 
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    gap: 16, 
                    marginBottom: 12, 
                    background: '#f7faf7', 
                    borderRadius: 12, 
                    padding: '16px 20px', 
                    boxShadow: '0 4px 12px #b2ebf240',
                    border: '2px solid #e0f7fa'
                  }}>
                    {/* Ï†úÎ™© */}
                    <div style={{ 
                      color: '#1976d2', 
                      fontWeight: 700, 
                      fontSize: 16, 
                      lineHeight: 1.3,
                      wordBreak: 'break-word',
                      flex: 1
                    }}>
                      {link.title || link.label || 'ÎßÅÌÅ¨'}
                    </div>
                    {/* Ïù¥Îèô Î≤ÑÌäº */}
                    <button 
                      onClick={() => {
                        handleLinkVisit(link);
                        window.open(link.url, '_blank');
                      }} 
                      style={{ 
                        background: '#e0f7fa', 
                        color: '#1976d2', 
                        border: '2px solid #b2ebf2',
                        borderRadius: 999, 
                        padding: '10px 24px', 
                        fontWeight: 700, 
                        fontSize: 14, 
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                        boxShadow: '0 2px 6px #b2ebf240',
                        whiteSpace: 'nowrap'
                      }}
                      onMouseOver={e => {
                        e.currentTarget.style.background = '#b2ebf2';
                        e.currentTarget.style.transform = 'translateY(-1px)';
                      }}
                      onMouseOut={e => {
                        e.currentTarget.style.background = '#e0f7fa';
                        e.currentTarget.style.transform = 'translateY(0)';
                      }}
                    >
                      Ïù¥Îèô
                    </button>
                  </div>
                ))
              ) : (
                <div style={{ color: '#888', fontSize: 16, margin: '32px 0' }}>Îì±Î°ùÎêú ÎßÅÌÅ¨Í∞Ä ÏóÜÏäµÎãàÎã§.</div>
              )}
            </div>
            <button onClick={() => setShowLinkHistoryModal(false)} style={{ fontWeight: 700, borderRadius: 999, background: '#e0f7fa', color: '#1976d2', border: 'none', padding: '10px 32px', fontSize: 17, boxShadow: '0 2px 8px #b2ebf240', cursor: 'pointer', marginTop: 8 }}>Îã´Í∏∞</button>
          </div>
        </div>
      )}
      {/* Îç∞Ïù¥ÌÑ∞ Ï†ÑÍ¥ëÌåê Î™®Îã¨ */}
      <DataBoardModal 
        isOpen={showDataBoardModal} 
        onClose={() => setShowDataBoardModal(false)}
        defaultPeriod="1ÍµêÏãú"
      />
      {/* ÏòàÏïΩ ÏïåÎûå Î™®Îã¨ */}
      {activeAlarm && showAlarmModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.48)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 9999 }}>
          <div style={{ background: '#fff', borderRadius: 32, padding: 44, minWidth: 340, maxWidth: 480, boxShadow: '0 12px 64px #ff570020', textAlign: 'center', border: '4px solid #ff5700', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <div style={{ fontSize: 26, color: '#ff5700', marginBottom: 18, fontWeight: 900, letterSpacing: '-1.5px', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 10 }}>
              <span role="img" aria-label="alarm">‚è∞</span> ÏòàÏïΩ ÏïåÎûå
            </div>
            <div style={{ color: '#ff5700', fontWeight: 700, fontSize: 18, marginBottom: 24, lineHeight: 1.4 }}>
              {activeAlarm.content}
            </div>
            <button 
              onClick={async () => { 
                console.log('ÏòàÏïΩ ÏïåÎ¶º ÌôïÏù∏ Î≤ÑÌäº ÌÅ¥Î¶≠:', activeAlarm.id);
                stopAutoCloseTimer(); // ÏûêÎèô Îã´Ìûò ÌÉÄÏù¥Î®∏ Ï§ëÎã®
                setShowAlarmModal(false); 
                await markAlarmAsSeen(activeAlarm.id); 
                if (activeAlarm.ts) {
                  markStudentAlarmAsSeen(activeAlarm.ts); 
                }
                setActiveAlarm(null);
                setCurrentDisplayedAlarmId(null);
                currentDisplayedAlarmIdRef.current = null; // refÎèÑ Ìï®Íªò Ï¥àÍ∏∞Ìôî
              }} 
              style={{ 
                fontWeight: 700, 
                borderRadius: 999, 
                background: '#ffe4ec', 
                color: '#d72660', 
                border: 'none', 
                padding: '12px 32px', 
                fontSize: 17, 
                boxShadow: '0 4px 16px #ff570020', 
                cursor: 'pointer',
                transition: 'all 0.2s'
              }}
              onMouseOver={e => {
                e.currentTarget.style.background = '#ffd6e0';
                e.currentTarget.style.transform = 'translateY(-2px)';
              }}
              onMouseOut={e => {
                e.currentTarget.style.background = '#ffe4ec';
                e.currentTarget.style.transform = 'translateY(0)';
              }}
            >
              ÌôïÏù∏
            </button>
          </div>
        </div>
      )}

      {/* Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Î™®Îã¨ */}
      {showRecorderModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.3)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 5000 }}>
          <div style={{ background: '#fff', padding: '32px 28px 24px 28px', borderRadius: 28, minWidth: 600, maxWidth: '90vw', maxHeight: '80vh', overflowY: 'auto', boxShadow: '0 4px 32px #b2ebf240' }}>
            <div style={{ fontWeight: 700, fontSize: '1.25rem', marginBottom: 18, color: '#7b1fa2', letterSpacing: '-0.5px', textAlign: 'center' }}>üéµ Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò</div>
            
            {/* ÌÉ≠ Î©îÎâ¥ */}
            <div style={{ display: 'flex', gap: 8, marginBottom: 20, flexWrap: 'wrap', justifyContent: 'center' }}>
              <button 
                onClick={() => setRecorderTab('progress')} 
                style={{ 
                  fontWeight: recorderTab === 'progress' ? 700 : 500, 
                  borderRadius: 999, 
                  background: recorderTab === 'progress' ? '#f3e5f5' : '#f7faf7', 
                  color: '#7b1fa2', 
                  border: 'none', 
                  padding: '7px 14px', 
                  fontSize: 14, 
                  boxShadow: '0 2px 8px #b2ebf240', 
                  cursor: 'pointer', 
                  transition: 'all 0.2s' 
                }}
              >ÏßÑÌñâÎèÑ</button>
              {RECORDER_STEPS.map(step => (
                <button 
                  key={step}
                  onClick={() => setRecorderTab(step)} 
                  style={{ 
                    fontWeight: recorderTab === step ? 700 : 500, 
                    borderRadius: 999, 
                    background: recorderTab === step ? '#f3e5f5' : '#f7faf7', 
                    color: '#7b1fa2', 
                    border: 'none', 
                    padding: '7px 14px', 
                    fontSize: 14, 
                    boxShadow: '0 2px 8px #b2ebf240', 
                    cursor: 'pointer', 
                    transition: 'all 0.2s' 
                  }}
                >{RECORDER_STEP_NAMES[step]}</button>
              ))}
            </div>

            {/* ÏßÑÌñâÎèÑ ÌÉ≠ */}
            {recorderTab === 'progress' && (
              <div style={{ minHeight: 300 }}>
                <div style={{ fontWeight: 700, fontSize: 18, color: '#7b1fa2', marginBottom: 16, textAlign: 'center' }}>ÎÇ¥ ÏßÑÌñâ ÌòÑÌô©</div>
                <div style={{ overflowX: 'auto' }}>
                  <table style={{ width: '100%', borderCollapse: 'collapse', background: '#f7faf7', borderRadius: 16, overflow: 'hidden', fontSize: 14 }}>
                    <thead>
                      <tr style={{ background: '#f3e5f5', color: '#7b1fa2', fontWeight: 700 }}>
                        {RECORDER_STEPS.map(step => (
                          <th key={step} style={{ padding: '12px 6px', fontSize: 12, minWidth: 60 }}>{RECORDER_STEP_NAMES[step]}</th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      <tr style={{ borderBottom: '1px solid #f3e5f5' }}>
                        {RECORDER_STEPS.map(step => (
                          <td key={step} style={{ padding: '12px 6px', textAlign: 'center' }}>
                            <span style={{
                              fontWeight: '900',
                              fontSize: '18px',
                              color: recorderMissions[studentId]?.[step] ? '#4caf50' : '#f44336'
                            }}>
                              {recorderMissions[studentId]?.[step] ? 'O' : 'X'}
                            </span>
                          </td>
                        ))}
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {/* Í∞Å Îã®Í≥Ñ ÌÉ≠ */}
            {RECORDER_STEPS.includes(recorderTab) && (
              <div style={{ minHeight: 300 }}>
                <div style={{ fontWeight: 700, fontSize: 18, color: '#7b1fa2', marginBottom: 16, textAlign: 'center' }}>
                  {RECORDER_STEP_NAMES[recorderTab]} Ïó∞ÏäµÍ≥°
                </div>
                
                {/* ÏôÑÎ£å ÏÉÅÌÉú ÌëúÏãú */}
                <div style={{ 
                  display: 'flex', 
                  justifyContent: 'center', 
                  alignItems: 'center', 
                  padding: '16px 20px', 
                  background: '#f7faf7', 
                  borderRadius: 16, 
                  border: '2px solid #f3e5f5',
                  boxShadow: '0 2px 8px #b2ebf240',
                  marginBottom: 20
                }}>
                  <span style={{ display: 'flex', alignItems: 'center', gap: 6 }}>
                    <span style={{
                      fontWeight: '900',
                      fontSize: '16px',
                      color: recorderMissions[studentId]?.[recorderTab] ? '#4caf50' : '#f44336'
                    }}>
                      {recorderMissions[studentId]?.[recorderTab] ? 'O' : 'X'}
                    </span>
                    <span style={{ fontWeight: 600, color: '#7b1fa2', fontSize: 16 }}>
                      {recorderMissions[studentId]?.[recorderTab] ? 'ÏôÑÎ£å' : 'ÎØ∏ÏôÑÎ£å'}
                    </span>
                  </span>
                </div>

                {/* ÏïÖÎ≥¥ ÌÖçÏä§Ìä∏ */}
                <div style={{ 
                  padding: '20px', 
                  background: '#f7faf7', 
                  borderRadius: 12, 
                  border: '2px solid #f3e5f5',
                  boxShadow: '0 4px 16px #b2ebf240',
                  marginBottom: 20,
                  fontFamily: 'monospace',
                  fontSize: '16px',
                  lineHeight: '1.8',
                  color: '#7b1fa2',
                  whiteSpace: 'pre-line',
                  textAlign: 'left'
                }}>
                  {formatSheetMusic(SHEET_MUSIC[recorderTab])}
                </div>
              </div>
            )}

            {/* Îã´Í∏∞ Î≤ÑÌäº */}
            <div style={{ display: 'flex', justifyContent: 'center', marginTop: 24 }}>
              <button 
                onClick={() => setShowRecorderModal(false)} 
                style={{ 
                  fontWeight: 600, 
                  borderRadius: 999, 
                  background: '#f7faf7', 
                  color: '#888', 
                  border: 'none', 
                  padding: '12px 32px', 
                  fontSize: 16, 
                  boxShadow: '0 2px 8px #b2ebf240', 
                  cursor: 'pointer', 
                  transition: 'all 0.2s' 
                }}
              >
                Îã´Í∏∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Ïã¨Ìôî Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò Î™®Îã¨ */}
      {showRecorderAdvancedModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.5)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 5000 }}>
          <div style={{ background: '#fff', borderRadius: 32, maxWidth: 600, width: '90vw', maxHeight: '80vh', overflow: 'auto', boxShadow: '0 8px 48px rgba(102, 126, 234, 0.3)', border: '4px solid #667eea' }}>
            <div style={{ padding: '32px 24px 24px 24px' }}>
              <div style={{ fontWeight: 900, fontSize: 24, color: '#667eea', marginBottom: 24, textAlign: 'center', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 12 }}>
                <span style={{ fontSize: 32 }}>üéµ</span>
                Îã®ÏÜåÍ∏âÏàòÎØ∏ÏÖò (Ïã¨Ìôî)
              </div>

              {/* ÌÉ≠ Î≤ÑÌäºÎì§ */}
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, marginBottom: 24, justifyContent: 'center' }}>
                <button 
                  onClick={() => setRecorderAdvancedTab('progress')} 
                  style={{ 
                    fontWeight: 600, 
                    borderRadius: 999, 
                    background: recorderAdvancedTab === 'progress' ? '#667eea' : '#f0f4ff', 
                    color: recorderAdvancedTab === 'progress' ? '#fff' : '#667eea', 
                    border: 'none', 
                    padding: '7px 14px', 
                    fontSize: 14, 
                    boxShadow: '0 2px 8px rgba(102, 126, 234, 0.2)', 
                    cursor: 'pointer', 
                    transition: 'all 0.2s' 
                  }}
                >ÏßÑÌñâÎèÑ</button>
                {RECORDER_STEPS_ADVANCED.map(step => (
                  <button 
                    key={step} 
                    onClick={() => setRecorderAdvancedTab(step)} 
                    style={{ 
                      fontWeight: 600, 
                      borderRadius: 999, 
                      background: recorderAdvancedTab === step ? '#667eea' : '#f0f4ff', 
                      color: recorderAdvancedTab === step ? '#fff' : '#667eea', 
                      border: 'none', 
                      padding: '7px 14px', 
                      fontSize: 14, 
                      boxShadow: '0 2px 8px rgba(102, 126, 234, 0.2)', 
                      cursor: 'pointer', 
                      transition: 'all 0.2s' 
                    }}
                  >{RECORDER_STEP_NAMES_ADVANCED[step]}</button>
                ))}
              </div>

              {/* ÏßÑÌñâÎèÑ ÌÉ≠ */}
              {recorderAdvancedTab === 'progress' && (
                <div style={{ minHeight: 300 }}>
                  <div style={{ fontWeight: 700, fontSize: 18, color: '#667eea', marginBottom: 16, textAlign: 'center' }}>Ïã¨Ìôî ÏßÑÌñâ ÌòÑÌô©</div>
                  <div style={{ overflowX: 'auto' }}>
                    <table style={{ width: '100%', borderCollapse: 'collapse', background: '#f0f4ff', borderRadius: 16, overflow: 'hidden', fontSize: 14 }}>
                      <thead>
                        <tr style={{ background: '#667eea', color: '#fff', fontWeight: 700 }}>
                          {RECORDER_STEPS_ADVANCED.map(step => (
                            <th key={step} style={{ padding: '12px 6px', fontSize: 12, minWidth: 80 }}>{RECORDER_STEP_NAMES_ADVANCED[step]}</th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        <tr style={{ borderBottom: '1px solid #667eea' }}>
                          {RECORDER_STEPS_ADVANCED.map(step => (
                            <td key={step} style={{ padding: '12px 6px', textAlign: 'center' }}>
                              <span style={{
                                fontWeight: '900',
                                fontSize: '18px',
                                color: recorderMissionsAdvanced[studentId]?.[step] ? '#4caf50' : '#f44336'
                              }}>
                                {recorderMissionsAdvanced[studentId]?.[step] ? 'O' : 'X'}
                              </span>
                            </td>
                          ))}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              )}

              {/* Í∞Å Îã®Í≥Ñ ÌÉ≠ */}
              {RECORDER_STEPS_ADVANCED.includes(recorderAdvancedTab) && (
                <div style={{ minHeight: 300 }}>
                  <div style={{ fontWeight: 700, fontSize: 18, color: '#667eea', marginBottom: 16, textAlign: 'center' }}>
                    {RECORDER_STEP_NAMES_ADVANCED[recorderAdvancedTab]} Ïó∞ÏäµÍ≥°
                  </div>
                  
                  {/* ÏôÑÎ£å ÏÉÅÌÉú ÌëúÏãú */}
                  <div style={{ 
                    display: 'flex', 
                    justifyContent: 'center', 
                    alignItems: 'center', 
                    padding: '16px 20px', 
                    background: '#f0f4ff', 
                    borderRadius: 16, 
                    border: '2px solid #667eea',
                    boxShadow: '0 2px 8px rgba(102, 126, 234, 0.2)',
                    marginBottom: 20
                  }}>
                    <span style={{ display: 'flex', alignItems: 'center', gap: 6 }}>
                      <span style={{
                        fontWeight: '900',
                        fontSize: '16px',
                        color: recorderMissionsAdvanced[studentId]?.[recorderAdvancedTab] ? '#4caf50' : '#f44336'
                      }}>
                        {recorderMissionsAdvanced[studentId]?.[recorderAdvancedTab] ? 'O' : 'X'}
                      </span>
                      <span style={{ fontWeight: 600, color: '#667eea', fontSize: 16 }}>
                        {recorderMissionsAdvanced[studentId]?.[recorderAdvancedTab] ? 'ÏôÑÎ£å' : 'ÎØ∏ÏôÑÎ£å'}
                      </span>
                    </span>
                  </div>

                  {/* ÏïÖÎ≥¥ ÌÖçÏä§Ìä∏ */}
                  <div style={{ 
                    padding: '20px', 
                    background: '#f0f4ff', 
                    borderRadius: 12, 
                    border: '2px solid #667eea',
                    boxShadow: '0 4px 16px rgba(102, 126, 234, 0.2)',
                    marginBottom: 20,
                    fontFamily: 'monospace',
                    fontSize: '16px',
                    lineHeight: '1.8',
                    color: '#667eea',
                    whiteSpace: 'pre-line',
                    textAlign: 'left'
                  }}>
                    {formatSheetMusic(SHEET_MUSIC_ADVANCED[recorderAdvancedTab])}
                  </div>
                </div>
              )}

              {/* Îã´Í∏∞ Î≤ÑÌäº */}
              <div style={{ display: 'flex', justifyContent: 'center', marginTop: 24 }}>
                <button 
                  onClick={() => setShowRecorderAdvancedModal(false)} 
                  style={{ 
                    fontWeight: 600, 
                    borderRadius: 999, 
                    background: '#f0f4ff', 
                    color: '#888', 
                    border: 'none', 
                    padding: '12px 32px', 
                    fontSize: 16, 
                    boxShadow: '0 2px 8px rgba(102, 126, 234, 0.2)', 
                    cursor: 'pointer', 
                    transition: 'all 0.2s' 
                  }}
                >
                  Îã´Í∏∞
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Ï∂ïÌïò Î™®Îã¨ (Ìè≠Ï£Ω Ìö®Í≥º) */}
      {showCelebrationModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.5)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 6000 }}>
          <div style={{ background: 'linear-gradient(45deg, #FFD700, #FFA500)', padding: '40px 32px', borderRadius: 28, minWidth: 400, textAlign: 'center', boxShadow: '0 8px 32px rgba(255, 215, 0, 0.4)', border: '4px solid #FFD700', position: 'relative', overflow: 'hidden' }}>
            {/* Ìè≠Ï£Ω Ìö®Í≥º */}
            <div style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', pointerEvents: 'none' }}>
              {Array.from({length: 20}).map((_, i) => (
                <div
                  key={i}
                  style={{
                    position: 'absolute',
                    width: '6px',
                    height: '6px',
                    background: ['#FFD700', '#FF6B35', '#4CAF50', '#2196F3', '#9C27B0'][i % 5],
                    borderRadius: '50%',
                    animation: `firework-${i % 3} 2s infinite`,
                    left: `${20 + (i % 6) * 10}%`,
                    top: `${20 + (i % 4) * 15}%`
                  }}
                />
              ))}
            </div>
            
            <div style={{ fontSize: 64, marginBottom: 16, animation: 'pulse 1s infinite' }}>üèÜ</div>
            <div style={{ fontWeight: 900, fontSize: 28, color: '#FFF', marginBottom: 12, textShadow: '2px 2px 4px rgba(0,0,0,0.3)' }}>
              Ï∂ïÌïòÌï©ÎãàÎã§!
            </div>
            <div style={{ fontWeight: 700, fontSize: 20, color: '#FFF', marginBottom: 20, textShadow: '1px 1px 2px rgba(0,0,0,0.3)' }}>
              {celebrationLevel}Îã®Í≥Ñ ÌÜµÍ≥º! üéâ
            </div>
            <div style={{ fontWeight: 600, fontSize: 16, color: '#FFF', marginBottom: 24, textShadow: '1px 1px 2px rgba(0,0,0,0.3)' }}>
              Í≥ÑÏÜçÌï¥ÏÑú Îçî ÎÜíÏùÄ Îã®Í≥ÑÏóê ÎèÑÏ†ÑÌï¥Î≥¥ÏÑ∏Ïöî!<br/>
              Ïó¨Îü¨Î∂ÑÏùò Ïã§Î†•Ïù¥ Ï†ïÎßê ÎåÄÎã®Ìï¥Ïöî! üí™
            </div>
            <button 
              onClick={handleCelebrationConfirm} 
              style={{ 
                fontWeight: 700, 
                borderRadius: 999, 
                background: '#FFF', 
                color: '#FFA500', 
                border: 'none', 
                padding: '12px 32px', 
                fontSize: 18, 
                boxShadow: '0 4px 16px rgba(0,0,0,0.2)', 
                cursor: 'pointer', 
                transition: 'all 0.2s' 
              }}
            >
              ÌôïÏù∏
            </button>
          </div>
        </div>
      )}

      {/* Ïã¨Ìôî Ï∂ïÌïò Î™®Îã¨ (Î¨¥ÏßÄÍ∞úÏÉâ ÌÖåÎëêÎ¶¨) */}
      {showAdvancedCelebrationModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.5)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 6000 }}>
          <div style={{ 
            background: 'linear-gradient(45deg, #ff6b6b, #feca57, #48dbfb, #ff9ff3, #54a0ff)', 
            padding: '4px', 
            borderRadius: 32, 
            minWidth: 400, 
            textAlign: 'center', 
            boxShadow: '0 8px 32px rgba(255, 107, 107, 0.4)', 
            position: 'relative', 
            overflow: 'hidden' 
          }}>
            <div style={{ 
              background: '#fff', 
              padding: '40px 32px', 
              borderRadius: 28, 
              position: 'relative', 
              overflow: 'hidden' 
            }}>
              {/* Î¨¥ÏßÄÍ∞ú ÌååÌã∞ÌÅ¥ Ìö®Í≥º */}
              <div style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', pointerEvents: 'none' }}>
                {Array.from({length: 25}).map((_, i) => (
                  <div
                    key={i}
                    style={{
                      position: 'absolute',
                      width: '8px',
                      height: '8px',
                      background: ['#ff6b6b', '#feca57', '#48dbfb', '#ff9ff3', '#54a0ff', '#5f27cd', '#00d2d3'][i % 7],
                      borderRadius: '50%',
                      animation: `rainbow-particle-${i % 4} 3s infinite`,
                      left: `${10 + (i % 8) * 10}%`,
                      top: `${10 + (i % 5) * 15}%`,
                      animationDelay: `${i * 0.1}s`
                    }}
                  />
                ))}
              </div>
              
              <div style={{ fontSize: 64, marginBottom: 16, animation: 'rainbow-pulse 2s infinite' }}>üåà</div>
              <div style={{ fontWeight: 900, fontSize: 28, color: '#ff6b6b', marginBottom: 20, textShadow: '2px 2px 4px rgba(255, 107, 107, 0.3)' }}>
                Ïã¨Ìôî {advancedCelebrationLevel}Îã®Í≥Ñ ÌÜµÍ≥º!
              </div>
              <div style={{ fontWeight: 600, fontSize: 16, color: '#888', marginBottom: 24, lineHeight: 1.5 }}>
                Ï†ïÎßê ÎåÄÎã®Ìï¥Ïöî! Ïã¨Ìôî Í≥ºÏ†ïÏùÑ ÏôÑÎ£åÌïòÏÖ®ÎÑ§Ïöî!<br/>
                ÎçîÏö± Î∞úÏ†ÑÎêú Ïã§Î†•ÏùÑ Î≥¥Ïó¨Ï£ºÏÖ®ÏäµÎãàÎã§! üéµ
              </div>
              <button 
                onClick={handleAdvancedCelebrationConfirm} 
                style={{ 
                  fontWeight: 700, 
                  borderRadius: 999, 
                  background: 'linear-gradient(45deg, #ff6b6b, #feca57)', 
                  color: '#fff', 
                  border: 'none', 
                  padding: '12px 32px', 
                  fontSize: 18, 
                  boxShadow: '0 4px 16px rgba(255, 107, 107, 0.3)', 
                  cursor: 'pointer', 
                  transition: 'all 0.2s' 
                }}
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ÌÄ¥Ï¶à Î™®Îã¨ */}
      {showQuizModal && currentQuiz && (
        <div 
          style={{ 
            position: 'fixed', 
            top: 0, 
            left: 0, 
            width: '100vw', 
            height: '100vh', 
            background: 'rgba(0,0,0,0.7)', 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'center', 
            zIndex: 10000 
          }}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowQuizModal(false);
              setCurrentQuiz(null);
              setQuizAnswer('');
              setSelectedQuizOption(-1);
            }
          }}
        >
                     <div 
             style={{ 
               background: '#f5f5f7', 
               borderRadius: 20, 
               width: '90%', 
               maxWidth: 600, 
               maxHeight: '80vh',
               overflow: 'auto',
               padding: 32, 
               boxShadow: '0 20px 60px rgba(0,0,0,0.3)',
               border: '2px solid #e5e5e7',
               position: 'relative'
             }}
             onClick={(e) => e.stopPropagation()}
           >
            {/* Ìó§Îçî */}
            <div style={{ textAlign: 'center', marginBottom: 32 }}>
              <div style={{ fontSize: 48, marginBottom: 16 }}>üç≠</div>
              <h2 style={{ 
                fontSize: 28, 
                fontWeight: 800, 
                color: '#1d1d1f', 
                margin: 0, 
                marginBottom: 8 
              }}>
                Ï∫îÎîî ÌÄ¥Ï¶àÌÉÄÏûÑ
              </h2>
              <p style={{ 
                fontSize: 16, 
                color: '#86868b', 
                margin: 0 
              }}>
                Î¨∏Ï†úÎ•º ÌíÄÍ≥† Ï∫îÎîîÎ•º ÌöçÎìùÌïòÏÑ∏Ïöî!
              </p>
            </div>

            {/* ÌÄ¥Ï¶à ÎÇ¥Ïö© */}
            <div style={{ 
              background: 'white', 
              borderRadius: 16, 
              padding: 24, 
              marginBottom: 24,
              boxShadow: '0 4px 16px rgba(0,0,0,0.1)'
            }}>
                             <h3 style={{ 
                 fontSize: 20, 
                 fontWeight: 700, 
                 color: '#1d1d1f', 
                 marginBottom: 8,
                 lineHeight: 1.4
               }}>
                 {currentQuiz.title}
               </h3>
               
               {currentQuiz.question && (
                 <p style={{
                   fontSize: 16,
                   color: '#424245',
                   marginBottom: 20,
                   lineHeight: 1.5,
                   whiteSpace: 'pre-wrap'
                 }}>
                   {currentQuiz.question}
                 </p>
               )}

              {currentQuiz.type === 'multiple' ? (
                <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>
                  {currentQuiz.options.map((option, index) => (
                    <div
                      key={index}
                      onClick={() => setSelectedQuizOption(index)}
                      style={{
                        padding: 16,
                        borderRadius: 12,
                        border: selectedQuizOption === index ? '2px solid #007aff' : '2px solid #e5e5e7',
                        background: selectedQuizOption === index ? '#f0f8ff' : 'white',
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                        display: 'flex',
                        alignItems: 'center',
                        gap: 12
                      }}
                    >
                      <div style={{
                        width: 20,
                        height: 20,
                        borderRadius: '50%',
                        border: selectedQuizOption === index ? '2px solid #007aff' : '2px solid #d1d1d6',
                        background: selectedQuizOption === index ? '#007aff' : 'white',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        {selectedQuizOption === index && (
                          <div style={{
                            width: 8,
                            height: 8,
                            borderRadius: '50%',
                            background: 'white'
                          }} />
                        )}
                      </div>
                      <span style={{ 
                        fontSize: 16, 
                        color: '#1d1d1f',
                        fontWeight: selectedQuizOption === index ? 600 : 400
                      }}>
                        {option}
                      </span>
                    </div>
                  ))}
                </div>
              ) : (
                <textarea
                  value={quizAnswer}
                  onChange={(e) => setQuizAnswer(e.target.value)}
                  placeholder="ÎãµÏïàÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                  style={{
                    width: '100%',
                    minHeight: 120,
                    padding: 16,
                    borderRadius: 12,
                    border: '2px solid #e5e5e7',
                    fontSize: 16,
                    fontFamily: 'inherit',
                    resize: 'vertical',
                    outline: 'none',
                    transition: 'border-color 0.2s'
                  }}
                  onFocus={(e) => e.target.style.borderColor = '#007aff'}
                  onBlur={(e) => e.target.style.borderColor = '#e5e5e7'}
                />
              )}
            </div>

            {/* Î≤ÑÌäº */}
            <div style={{ display: 'flex', gap: 12, justifyContent: 'center' }}>
              <button
                onClick={() => {
                  setShowQuizModal(false);
                  setCurrentQuiz(null);
                  setQuizAnswer('');
                  setSelectedQuizOption(-1);
                }}
                style={{
                  padding: '12px 24px',
                  borderRadius: 12,
                  border: 'none',
                  background: '#f2f2f7',
                  color: '#1d1d1f',
                  fontSize: 16,
                  fontWeight: 600,
                  cursor: 'pointer',
                  transition: 'all 0.2s'
                }}
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={handleSubmitQuiz}
                disabled={
                  currentQuiz.type === 'multiple' 
                    ? selectedQuizOption === -1 
                    : !quizAnswer.trim()
                }
                style={{
                  padding: '12px 24px',
                  borderRadius: 12,
                  border: 'none',
                  background: (currentQuiz.type === 'multiple' ? selectedQuizOption !== -1 : quizAnswer.trim()) 
                    ? '#007aff' : '#d1d1d6',
                  color: 'white',
                  fontSize: 16,
                  fontWeight: 600,
                  cursor: (currentQuiz.type === 'multiple' ? selectedQuizOption !== -1 : quizAnswer.trim()) 
                    ? 'pointer' : 'not-allowed',
                  transition: 'all 0.2s',
                  display: 'flex',
                  alignItems: 'center',
                  gap: 8
                }}
              >
                <img 
                  src="/chupa.png" 
                  alt="Ï∫îÎîî" 
                  style={{ width: 16, height: 16 }}
                />
                ÎãµÏïà Ï†úÏ∂ú
              </button>
            </div>
          </div>
        </div>
              )}

      {/* Í±∞Îûò ÎÇ¥Ïó≠ Î™®Îã¨ */}
      {showTransactionModal && (
        <div 
          style={{ 
            position: 'fixed', 
            top: 0, 
            left: 0, 
            width: '100vw', 
            height: '100vh', 
            background: 'rgba(0,0,0,0.7)', 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'center', 
            zIndex: 10001 
          }}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowTransactionModal(false);
            }
          }}
        >
          <div 
            style={{ 
              background: '#f5f5f7', 
              borderRadius: 20, 
              width: '90%', 
              maxWidth: 500, 
              maxHeight: '80vh',
              padding: 32, 
              boxShadow: '0 20px 60px rgba(0,0,0,0.3)',
              border: '2px solid #e5e5e7',
              position: 'relative',
              overflow: 'hidden'
            }}
            onClick={(e) => e.stopPropagation()}
          >
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: 12,
              marginBottom: 24
            }}>
              <span style={{ fontSize: 28 }}>üí∞</span>
              <h2 style={{
                fontSize: 24,
                fontWeight: 800,
                margin: 0,
                color: '#1d1d1f'
              }}>
                Í±∞Îûò ÎÇ¥Ïó≠
              </h2>
            </div>

            <div style={{
              background: 'white',
              borderRadius: 12,
              padding: 16,
              marginBottom: 20,
              border: '1px solid #e5e5e7',
              textAlign: 'center'
            }}>
              <div style={{ fontSize: 18, fontWeight: 600, color: '#FF9800' }}>
                ÌòÑÏû¨ ÏûîÏï°: {student.balance || 0}Ïõê
              </div>
            </div>

            <div style={{
              maxHeight: '300px',
              overflowY: 'auto',
              marginBottom: 24
            }}>
              {student.transactionHistory && student.transactionHistory.length > 0 ? (
                <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>
                  {student.transactionHistory
                    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                    .slice(0, 5)
                    .map((transaction, index) => (
                    <div
                      key={index}
                      style={{
                        background: 'white',
                        borderRadius: 12,
                        padding: 16,
                        border: '1px solid #e5e5e7',
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center'
                      }}
                    >
                      <div>
                        <div style={{
                          fontSize: 14,
                          fontWeight: 600,
                          color: '#1d1d1f',
                          marginBottom: 4
                        }}>
                          {transaction.description}
                        </div>
                        <div style={{
                          fontSize: 12,
                          color: '#86868b'
                        }}>
                          {new Date(transaction.timestamp).toLocaleString('ko-KR')}
                        </div>
                      </div>
                      <div style={{
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'flex-end',
                        gap: 4
                      }}>
                        <div style={{
                          fontSize: 16,
                          fontWeight: 600,
                          color: transaction.amount > 0 ? '#4CAF50' : '#f44336'
                        }}>
                          {transaction.amount > 0 ? '+' : ''}{transaction.amount}Ïõê
                        </div>
                        <div style={{
                          fontSize: 12,
                          color: '#86868b'
                        }}>
                          ÏûîÏï°: {transaction.balanceAfter}Ïõê
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div style={{
                  textAlign: 'center',
                  padding: 40,
                  color: '#86868b',
                  fontSize: 16
                }}>
                  ÏïÑÏßÅ Í±∞Îûò ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.
                </div>
              )}
            </div>

            <button
              onClick={() => setShowTransactionModal(false)}
              style={{
                width: '100%',
                padding: '14px 24px',
                borderRadius: 12,
                border: 'none',
                background: '#1d1d1f',
                color: 'white',
                fontSize: 16,
                fontWeight: 600,
                cursor: 'pointer',
                transition: 'all 0.2s',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: 8,
                fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
              }}
              onMouseEnter={(e) => {
                e.target.style.background = '#424245';
              }}
              onMouseLeave={(e) => {
                e.target.style.background = '#1d1d1f';
              }}
            >
              <img 
                src="/chupa.png" 
                alt="Ï∫îÎîî" 
                style={{ width: 16, height: 16 }}
              />
              Îã´Í∏∞
            </button>
          </div>
        </div>
      )}

      {/* ÌÄ¥Ï¶à Í≤∞Í≥º Î™®Îã¨ */}
      {showQuizResultModal && quizResultData && (
        <div 
          style={{ 
            position: 'fixed', 
            top: 0, 
            left: 0, 
            width: '100vw', 
            height: '100vh', 
            background: 'rgba(0,0,0,0.7)', 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'center', 
            zIndex: 10001 
          }}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowQuizResultModal(false);
              setQuizResultData(null);
            }
          }}
        >
          <div 
            style={{ 
              background: '#f5f5f7', 
              borderRadius: 20, 
              width: '90%', 
              maxWidth: 400, 
              padding: 32, 
              textAlign: 'center',
              boxShadow: '0 20px 60px rgba(0,0,0,0.3)',
              border: '2px solid #e5e5e7',
              position: 'relative'
            }}
            onClick={(e) => e.stopPropagation()}
          >
            {/* Í≤∞Í≥º ÏïÑÏù¥ÏΩò */}
            <div style={{ 
              width: 80, 
              height: 80, 
              borderRadius: '50%', 
              background: quizResultData.isCorrect === true 
                ? 'linear-gradient(135deg, #4CAF50, #45a049)' 
                : quizResultData.isCorrect === false 
                ? 'linear-gradient(135deg, #f44336, #d32f2f)'
                : 'linear-gradient(135deg, #2196F3, #1976D2)',
              display: 'flex', 
              alignItems: 'center', 
              justifyContent: 'center', 
              margin: '0 auto 24px',
              boxShadow: quizResultData.isCorrect === true 
                ? '0 8px 24px rgba(76, 175, 80, 0.3)'
                : quizResultData.isCorrect === false
                ? '0 8px 24px rgba(244, 67, 54, 0.3)'
                : '0 8px 24px rgba(33, 150, 243, 0.3)'
            }}>
              <div style={{ fontSize: 36, color: 'white' }}>
                {quizResultData.isCorrect === true ? '‚úì' : 
                 quizResultData.isCorrect === false ? '‚úó' : '‚Ñπ'}
              </div>
            </div>

            <h2 style={{ 
              fontSize: 24, 
              fontWeight: 800, 
              color: '#1d1d1f', 
              margin: '0 0 16px 0' 
            }}>
              {quizResultData.isCorrect === true ? 'Ï†ïÎãµ!' :
               quizResultData.isCorrect === false ? 'Ïò§Îãµ' : 'Ï†úÏ∂ú ÏôÑÎ£å'}
            </h2>
            
            <p style={{ 
              fontSize: 16, 
              color: '#86868b', 
              margin: '0 0 24px 0',
              lineHeight: 1.5,
              whiteSpace: 'pre-line'
            }}>
              {quizResultData.message}
            </p>

            {/* Î≥¥ÏÉÅ Ï†ïÎ≥¥ */}
            {(quizResultData.expGain > 0 || quizResultData.moneyGain > 0) && (
              <div style={{
                background: 'white',
                borderRadius: 12,
                padding: 16,
                marginBottom: 24,
                border: '1px solid #e5e5e7'
              }}>
                <h3 style={{
                  fontSize: 16,
                  fontWeight: 600,
                  color: '#1d1d1f',
                  margin: '0 0 12px 0'
                }}>
                  ÌöçÎìùÌïú Î≥¥ÏÉÅ
                </h3>
                
                <div style={{ display: 'flex', justifyContent: 'center', gap: 16 }}>
                  {quizResultData.expGain > 0 && (
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                      <span style={{ fontSize: 20 }}>‚≠ê</span>
                      <span style={{ fontSize: 16, fontWeight: 600, color: '#4CAF50' }}>
                        +{quizResultData.expGain} Í≤ΩÌóòÏπò
                      </span>
                    </div>
                  )}
                  
                  {quizResultData.moneyGain > 0 && (
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                      <span style={{ fontSize: 20 }}>üí∞</span>
                      <span style={{ fontSize: 16, fontWeight: 600, color: '#FF9800' }}>
                        +{quizResultData.moneyGain}Ïõê
                      </span>
                    </div>
                  )}
                </div>
              </div>
            )}

            <button
              onClick={() => {
                setShowQuizResultModal(false);
                setQuizResultData(null);
              }}
              style={{
                width: '100%',
                padding: '16px 24px',
                borderRadius: 12,
                border: 'none',
                background: quizResultData.isCorrect === true 
                  ? 'linear-gradient(135deg, #4CAF50, #45a049)'
                  : quizResultData.isCorrect === false
                  ? 'linear-gradient(135deg, #f44336, #d32f2f)'
                  : 'linear-gradient(135deg, #2196F3, #1976D2)',
                color: 'white',
                fontSize: 16,
                fontWeight: 700,
                cursor: 'pointer',
                transition: 'all 0.2s',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: 8,
                boxShadow: quizResultData.isCorrect === true 
                  ? '0 4px 16px rgba(76, 175, 80, 0.3)'
                  : quizResultData.isCorrect === false
                  ? '0 4px 16px rgba(244, 67, 54, 0.3)'
                  : '0 4px 16px rgba(33, 150, 243, 0.3)'
              }}
            >
              <img 
                src="/chupa.png" 
                alt="Ï∫îÎîî" 
                style={{ width: 16, height: 16 }}
              />
              ÌôïÏù∏
            </button>
          </div>
        </div>
      )}

      {/* Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä Î™®Îã¨ */}
      <EmotionAttendanceModal
        isOpen={showEmotionAttendanceModal}
        onClose={() => setShowEmotionAttendanceModal(false)}
        student={student}
        onSubmitSuccess={() => {
          // Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä Ï†úÏ∂ú ÏÑ±Í≥µ Ïãú Ï¶âÏãú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
          console.log('üéâ Í∞êÏ†ïÏ∂úÏÑùÎ∂Ä Ï†úÏ∂ú ÏÑ±Í≥µ! ÏÉÅÌÉúÎ•º Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.');
          setHasSubmittedToday(true);
        }}
      />

      {/* Ïó≠ÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Î™®Îã¨ */}
      {showHistoryModal && (
        <div style={{ 
          position: 'fixed', 
          top: 0, 
          left: 0, 
          width: '100vw', 
          height: '100vh', 
          background: 'rgba(0,0,0,0.5)', 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'center', 
          zIndex: 1000 
        }}>
          <div style={{ 
            background: '#fff', 
            padding: '24px', 
            borderRadius: '16px', 
            width: '90vw', 
            maxWidth: '600px', 
            maxHeight: '80vh',
            overflowY: 'auto'
          }}>
            <h2 style={{ margin: '0 0 20px 0', color: '#2e7d32', textAlign: 'center' }}>
              <HistoryIcon style={{ marginRight: '8px', verticalAlign: 'middle' }} />
              Ïó≠ÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
            </h2>
            
            <div style={{ marginBottom: '16px' }}>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>Ï†úÎ™©</label>
              <input
                type="text"
                value={historyEntryData.title}
                onChange={(e) => setHistoryEntryData({...historyEntryData, title: e.target.value})}
                style={{
                  width: '100%',
                  padding: '12px',
                  borderRadius: '8px',
                  border: '1px solid #ddd',
                  fontSize: '14px'
                }}
                placeholder="Ïó≠ÏÇ¨Ï†Å ÏÇ¨Ïã§Ïùò Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              />
            </div>

            <div style={{ marginBottom: '16px' }}>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>ÎÇ¥Ïö©</label>
              <textarea
                value={historyEntryData.content}
                onChange={(e) => setHistoryEntryData({...historyEntryData, content: e.target.value})}
                style={{
                  width: '100%',
                  padding: '12px',
                  borderRadius: '8px',
                  border: '1px solid #ddd',
                  fontSize: '14px',
                  minHeight: '120px',
                  resize: 'vertical'
                }}
                placeholder="Ïó≠ÏÇ¨Ï†Å ÏÇ¨Ïã§Ïùò ÏÉÅÏÑ∏ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              />
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '16px' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>Ïπ¥ÌÖåÍ≥†Î¶¨</label>
                <select
                  value={historyEntryData.category}
                  onChange={(e) => setHistoryEntryData({...historyEntryData, category: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '8px',
                    borderRadius: '8px',
                    border: '1px solid #ddd',
                    fontSize: '14px'
                  }}
                >
                  <option value="Í≥†ÎåÄÏÇ¨">Í≥†ÎåÄÏÇ¨</option>
                  <option value="Ï§ëÏÑ∏ÏÇ¨">Ï§ëÏÑ∏ÏÇ¨</option>
                  <option value="Í∑ºÎåÄÏÇ¨">Í∑ºÎåÄÏÇ¨</option>
                  <option value="ÌòÑÎåÄÏÇ¨">ÌòÑÎåÄÏÇ¨</option>
                  <option value="ÌïúÍµ≠ÏÇ¨">ÌïúÍµ≠ÏÇ¨</option>
                  <option value="ÏÑ∏Í≥ÑÏÇ¨">ÏÑ∏Í≥ÑÏÇ¨</option>
                  <option value="Î¨∏ÌôîÏÇ¨">Î¨∏ÌôîÏÇ¨</option>
                  <option value="Í∏∞ÌÉÄ">Í∏∞ÌÉÄ</option>
                </select>
              </div>
              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>ÏãúÎåÄ</label>
                <select
                  value={historyEntryData.period}
                  onChange={(e) => setHistoryEntryData({...historyEntryData, period: e.target.value})}
                  style={{
                    width: '100%',
                    padding: '8px',
                    borderRadius: '8px',
                    border: '1px solid #ddd',
                    fontSize: '14px'
                  }}
                >
                  <option value="ÏÑ†ÏÇ¨ÏãúÎåÄ">ÏÑ†ÏÇ¨ÏãúÎåÄ</option>
                  <option value="Í≥†Ï°∞ÏÑ†">Í≥†Ï°∞ÏÑ†</option>
                  <option value="ÏÇºÍµ≠ÏãúÎåÄ">ÏÇºÍµ≠ÏãúÎåÄ</option>
                  <option value="ÌÜµÏùºÏã†Îùº">ÌÜµÏùºÏã†Îùº</option>
                  <option value="Í≥†Î†§">Í≥†Î†§</option>
                  <option value="Ï°∞ÏÑ†">Ï°∞ÏÑ†</option>
                  <option value="Í∑ºÎåÄ">Í∑ºÎåÄ</option>
                  <option value="ÌòÑÎåÄ">ÌòÑÎåÄ</option>
                </select>
              </div>
            </div>

            <div style={{ marginBottom: '16px' }}>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>Ï§ëÏöîÎèÑ</label>
              <select
                value={historyEntryData.importance}
                onChange={(e) => setHistoryEntryData({...historyEntryData, importance: e.target.value})}
                style={{
                  width: '100%',
                  padding: '8px',
                  borderRadius: '8px',
                  border: '1px solid #ddd',
                  fontSize: '14px'
                }}
              >
                <option value="Îß§Ïö∞Ï§ëÏöî">Îß§Ïö∞Ï§ëÏöî</option>
                <option value="Ï§ëÏöî">Ï§ëÏöî</option>
                <option value="Î≥¥ÌÜµ">Î≥¥ÌÜµ</option>
                <option value="ÎÇÆÏùå">ÎÇÆÏùå</option>
              </select>
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>ÌÉúÍ∑∏</label>
              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
                {['ÏÇºÍµ≠ÌÜµÏùº', 'Í≥†Íµ¨Î†§', 'Î∞±Ï†ú', 'Ïã†Îùº', 'Ï°∞ÏÑ†', 'Í≥†Î†§', 'ÏùºÏ†úÍ∞ïÏ†êÍ∏∞', 'ÎèÖÎ¶ΩÏö¥Îèô', 'Í≤ΩÏ†úÎ∞úÏ†Ñ', 'ÎØºÏ£ºÌôî'].map(tag => (
                  <button
                    key={tag}
                    onClick={() => handleHistoryTagChange(tag)}
                    style={{
                      padding: '6px 12px',
                      borderRadius: '16px',
                      border: historyEntryData.tags.includes(tag) ? 'none' : '1px solid #ddd',
                      background: historyEntryData.tags.includes(tag) ? '#2e7d32' : 'transparent',
                      color: historyEntryData.tags.includes(tag) ? 'white' : '#666',
                      cursor: 'pointer',
                      fontSize: '12px'
                    }}
                  >
                    {tag}
                  </button>
                ))}
              </div>
            </div>

            <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>
              <button
                onClick={() => setShowHistoryModal(false)}
                style={{
                  padding: '12px 24px',
                  borderRadius: '8px',
                  background: '#f5f5f5',
                  color: '#666',
                  border: 'none',
                  cursor: 'pointer',
                  fontSize: '14px',
                  fontWeight: 'bold'
                }}
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={handleCreateHistoryEntry}
                style={{
                  padding: '12px 24px',
                  borderRadius: '8px',
                  background: '#2e7d32',
                  color: 'white',
                  border: 'none',
                  cursor: 'pointer',
                  fontSize: '14px',
                  fontWeight: 'bold'
                }}
              >
                ÏÉùÏÑ± (+15 Í≤ΩÌóòÏπò)
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ÏπúÍµ¨ Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞ Î™®Îã¨ */}
      {showFriendMessageModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.32)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 10000 }}>
          <div style={{ background: '#fff', borderRadius: 32, padding: 36, minWidth: 340, maxWidth: 420, boxShadow: '0 12px 64px #1976d220', textAlign: 'center', border: '4px solid #1976d2', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <div style={{ fontSize: 28, color: '#1976d2', marginBottom: 18, fontWeight: 900, letterSpacing: '-1.5px', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 10 }}>
              <span role="img" aria-label="message">üíå</span> ÏπúÍµ¨ÏóêÍ≤å Î©îÏãúÏßÄ
            </div>
            
            {/* ÌÜ†ÌÅ∞ ÌëúÏãú */}
            <div style={{ 
              background: dailyMessageTokens > 0 ? '#e8f5e8' : '#fff3e0', 
              borderRadius: 12, 
              padding: '8px 16px', 
              marginBottom: 16,
              border: `2px solid ${dailyMessageTokens > 0 ? '#c8e6c9' : '#ffcc02'}`,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: 6
            }}>
              <span role="img" aria-label="token" style={{ fontSize: 18 }}>
                {dailyMessageTokens > 0 ? 'üé´' : '‚è∞'}
              </span>
              <span style={{ 
                fontWeight: 600, 
                color: dailyMessageTokens > 0 ? '#2e7d32' : '#f57c00',
                fontSize: 14 
              }}>
                {dailyMessageTokens > 0 
                  ? `Ïò§Îäò ${dailyMessageTokens}Í∞úÏùò Î©îÏãúÏßÄ ÌÜ†ÌÅ∞ ÎÇ®Ïùå`
                  : 'Ïò§ÎäòÏùò Î©îÏãúÏßÄ ÌÜ†ÌÅ∞ÏùÑ Î™®Îëê ÏÇ¨Ïö©ÌñàÏäµÎãàÎã§'
                }
              </span>
            </div>
            
            {/* ÏπúÍµ¨ ÏÑ†ÌÉù */}
            <div style={{ width: '100%', marginBottom: 18 }}>
              <div style={{ fontWeight: 600, fontSize: 16, marginBottom: 8, color: '#1976d2', textAlign: 'left' }}>Î∞õÏùÑ ÏπúÍµ¨ ÏÑ†ÌÉù</div>
              <select
                value={selectedFriendForMessage?.id || ''}
                onChange={(e) => {
                  const friendId = e.target.value;
                  if (friendId && studentsSnapshot) {
                    const friendDoc = studentsSnapshot.docs.find(doc => 
                      (doc.data().id || doc.id) === friendId
                    );
                    if (friendDoc) {
                      const friendData = friendDoc.data();
                      setSelectedFriendForMessage({
                        id: friendId,
                        name: friendData.name
                      });
                    }
                  } else {
                    setSelectedFriendForMessage(null);
                  }
                }}
                style={{
                  width: '100%',
                  borderRadius: 14,
                  border: '2px solid #e0f7fa',
                  padding: 12,
                  fontSize: 16,
                  outline: 'none',
                  background: '#f7faf7',
                  color: '#222',
                  boxSizing: 'border-box'
                }}
              >
                <option value="">ÏπúÍµ¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                {studentsSnapshot && studentsSnapshot.docs.map(doc => {
                  const friend = doc.data();
                  const friendId = friend.id ? friend.id : doc.id;
                  if (friendId === studentId) return null; // ÏûêÍ∏∞ ÏûêÏã† Ï†úÏô∏
                  return (
                    <option key={friendId} value={friendId}>
                      {getPokemonName(friend.name, anonymousMode)}
                    </option>
                  );
                })}
              </select>
            </div>
            
            {/* Î©îÏãúÏßÄ ÏûÖÎ†• */}
            <div style={{ width: '100%', marginBottom: 24 }}>
              <div style={{ fontWeight: 600, fontSize: 16, marginBottom: 8, color: '#1976d2', textAlign: 'left' }}>Î©îÏãúÏßÄ ÎÇ¥Ïö©</div>
              <textarea
                value={friendMessageText}
                onChange={(e) => setFriendMessageText(e.target.value)}
                style={{
                  width: '100%',
                  minHeight: 80,
                  borderRadius: 14,
                  border: '2px solid #e0f7fa',
                  padding: 12,
                  fontSize: 16,
                  outline: 'none',
                  background: '#f7faf7',
                  color: '#222',
                  resize: 'vertical',
                  boxSizing: 'border-box'
                }}
                placeholder="ÏπúÍµ¨ÏóêÍ≤å Î≥¥ÎÇº Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              />
            </div>
            
            {/* Î≤ÑÌäºÎì§ */}
            <div style={{ display: 'flex', gap: 10, justifyContent: 'center' }}>
              <button
                onClick={() => {
                  setShowFriendMessageModal(false);
                  setSelectedFriendForMessage(null);
                  setFriendMessageText('');
                }}
                style={{
                  fontWeight: 700,
                  borderRadius: 999,
                  background: '#ffe4ec',
                  color: '#d72660',
                  border: 'none',
                  padding: '12px 24px',
                  fontSize: 16,
                  boxShadow: '0 2px 8px #f8bbd0a0',
                  cursor: 'pointer',
                  transition: 'all 0.2s'
                }}
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={handleSendFriendMessage}
                disabled={!selectedFriendForMessage || !friendMessageText.trim() || dailyMessageTokens <= 0 || isSendingMessage}
                style={{
                  fontWeight: 700,
                  borderRadius: 999,
                  background: selectedFriendForMessage && friendMessageText.trim() && dailyMessageTokens > 0 && !isSendingMessage ? '#e0f7fa' : '#f5f5f5',
                  color: selectedFriendForMessage && friendMessageText.trim() && dailyMessageTokens > 0 && !isSendingMessage ? '#1976d2' : '#aaa',
                  border: 'none',
                  padding: '12px 24px',
                  fontSize: 16,
                  boxShadow: '0 2px 8px #b2ebf240',
                  cursor: selectedFriendForMessage && friendMessageText.trim() && dailyMessageTokens > 0 ? 'pointer' : 'not-allowed',
                  transition: 'all 0.2s'
                }}
              >
                {isSendingMessage ? 'Ï†ÑÏÜ° Ï§ë... ‚è≥' : 'Ï†ÑÏÜ° üì®'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Í≥µÏßÄÏÇ¨Ìï≠ Í¥ëÍ≥† Î™®Îã¨ */}
      {showBroadcastModal && broadcastNotice && (
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.32)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 10000 }}>
          <div style={{ background: '#fff', borderRadius: 32, padding: 36, minWidth: 340, maxWidth: 420, boxShadow: '0 12px 64px #1976d220', textAlign: 'center', border: '4px solid #1976d2', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <div style={{ fontSize: 28, color: '#1976d2', marginBottom: 18, fontWeight: 900, letterSpacing: '-1.5px', display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 10 }}>
              <span role="img" aria-label="megaphone">üì¢</span> Í≥µÏßÄÏÇ¨Ìï≠
            </div>
            
            {/* ÎÇ¥Ïö© */}
            <div style={{
              fontSize: 16,
              lineHeight: '1.6',
              marginBottom: 24,
              padding: '20px 24px',
              background: '#f7faf7',
              borderRadius: 16,
              border: '2px solid #e0f7fa',
              color: '#333',
              minHeight: 60,
              maxHeight: 200,
              overflowY: 'auto',
              width: '100%',
              boxSizing: 'border-box',
              whiteSpace: 'pre-wrap'
            }}>
              {broadcastNotice.content || 'Í≥µÏßÄÏÇ¨Ìï≠ ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§.'}
            </div>
            
            {/* Î≤ÑÌäº */}
            <button
              onClick={() => {
                if (broadcastNotice && broadcastNotice.broadcastTime) {
                  markBroadcastAsSeen(broadcastNotice.id, broadcastNotice.broadcastTime);
                }
                setShowBroadcastModal(false);
                setBroadcastNotice(null);
              }}
              style={{
                fontWeight: 700,
                borderRadius: 999,
                background: '#e0f7fa',
                color: '#1976d2',
                border: 'none',
                padding: '12px 32px',
                fontSize: 16,
                boxShadow: '0 2px 8px #b2ebf240',
                cursor: 'pointer',
                transition: 'all 0.2s'
              }}
              onMouseOver={(e) => {
                e.target.style.background = '#b2ebf2';
                e.target.style.transform = 'translateY(-1px)';
                e.target.style.boxShadow = '0 4px 12px #b2ebf260';
              }}
              onMouseOut={(e) => {
                e.target.style.background = '#e0f7fa';
                e.target.style.transform = 'translateY(0)';
                e.target.style.boxShadow = '0 2px 8px #b2ebf240';
              }}
            >
              ÌôïÏù∏ÌñàÏñ¥Ïöî! üëç
            </button>
          </div>
        </div>
      )}

      {/* ÌïôÏäµÏùºÏßÄ Î™®Îã¨ */}
      <LearningJournalModal
        isOpen={showLearningJournalModal}
        onClose={() => setShowLearningJournalModal(false)}
        studentName={student?.name || ''}
      />

      <style jsx>{`
        @keyframes firework-0 {
          0% { transform: translateY(0) scale(1); opacity: 1; }
          50% { transform: translateY(-30px) scale(1.5); opacity: 0.8; }
          100% { transform: translateY(-60px) scale(0.5); opacity: 0; }
        }
        @keyframes firework-1 {
          0% { transform: translateX(0) scale(1); opacity: 1; }
          50% { transform: translateX(30px) scale(1.5); opacity: 0.8; }
          100% { transform: translateX(60px) scale(0.5); opacity: 0; }
        }
        @keyframes firework-2 {
          0% { transform: translate(0, 0) scale(1); opacity: 1; }
          50% { transform: translate(-30px, -30px) scale(1.5); opacity: 0.8; }
          100% { transform: translate(-60px, -60px) scale(0.5); opacity: 0; }
        }
        @keyframes rainbow-particle-0 {
          0% { transform: translateY(0) scale(1) rotate(0deg); opacity: 1; }
          50% { transform: translateY(-40px) scale(1.5) rotate(180deg); opacity: 0.8; }
          100% { transform: translateY(-80px) scale(0.5) rotate(360deg); opacity: 0; }
        }
        @keyframes rainbow-particle-1 {
          0% { transform: translateX(0) scale(1) rotate(0deg); opacity: 1; }
          50% { transform: translateX(40px) scale(1.5) rotate(180deg); opacity: 0.8; }
          100% { transform: translateX(80px) scale(0.5) rotate(360deg); opacity: 0; }
        }
        @keyframes rainbow-particle-2 {
          0% { transform: translate(0, 0) scale(1) rotate(0deg); opacity: 1; }
          50% { transform: translate(-40px, -40px) scale(1.5) rotate(180deg); opacity: 0.8; }
          100% { transform: translate(-80px, -80px) scale(0.5) rotate(360deg); opacity: 0; }
        }
        @keyframes rainbow-particle-3 {
          0% { transform: translate(0, 0) scale(1) rotate(0deg); opacity: 1; }
          50% { transform: translate(40px, -40px) scale(1.5) rotate(180deg); opacity: 0.8; }
          100% { transform: translate(80px, -80px) scale(0.5) rotate(360deg); opacity: 0; }
        }
        @keyframes rainbow-pulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.2); }
          100% { transform: scale(1); }
        }
        @keyframes modalAppear {
          0% { transform: scale(0.8) translateY(20px); opacity: 0; }
          100% { transform: scale(1) translateY(0); opacity: 1; }
        }
        @keyframes bounce {
          0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
          40% { transform: translateY(-10px); }
          60% { transform: translateY(-5px); }
        }
      `}</style>
    </div>
  );
};

export default StudentPage; 